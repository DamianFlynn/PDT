#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 5aeeb443-97a2-42a1-9146-e446e076b4d1
# Source File: ..\..\SCDT-Config-GUI\PDT-GUI.psproj
#------------------------------------------------------------------------
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.44
# Generated On: 05.06.2014 16:04
# Generated By: Kamil.Kosek
#========================================================================


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	
	cd $(Get-ScriptDirectory)
	#region Language file support
	$script:Str_Back = 'Back'
	$script:Str_Next = 'Next'
	$script:Str_Cancel = 'Cancel'
	$script:Str_Finish = 'Finish'
	$script:Str_TabAbout = 'About'
	$script:Str_TabGeneral = 'General'
	$script:Str_TabVMs = 'VMs'
	$script:Str_TabSQL = 'SQL'
	$script:Str_TabRoles = 'Roles'
	$script:Str_TabFinish = 'Finish'
	$script:Str_AboutText = 'The PDT GUI is a Graphical User Interface for the Powershell Deployment Toolkit. The original PDT is created and maintained by Rob Willis from Microsoft Corporation. The PDT GUI is created and maintained by German Microsoft Partner "Elanity Network Partner GmbH" and is not an official Microsoft Product. The PDT GUI helps to create fast PDT Configuration-Files (Variable.xml) for Zero Touch System Center Deployments. PDT GUI creates and validates the configuration files for PDT, it does not alter the existing PDT in any way. An installed PDT is neccessary for a succesful PDT Deployment, download it from '
	$script:Str_AboutCode = 'Code'
	$script:Str_AboutIdeasAndTesting = 'Idea & Product Management'
	$script:Str_GeneralSave = 'Save'
	$script:Str_VmsTabDomain = 'Domain'
	$script:Str_VmsTabDefaultVMSettings = 'Default VM Settings'
	$script:Str_VmsTabVMs = 'VMs'
	$script:Str_DomainCreateNewADForest = 'Create a new Active-Directory-Forest'
	$script:Str_DomainSaveChanges = 'Save changes'
	$script:Str_DefaultVMSettingsSpecify = 'Specify the default settings for all VMs generated, switch to VMs tab to set individual settings per VM'
	$script:Str_DefaultVMSettingsSaveChanges = 'Save changes'
	$script:Str_DefaultVMSettingsValue = 'Value'
	$script:Str_VMSettingsVMs = 'VMs'
	$script:Str_VMSettingsSettings = 'Settings'
	$script:Str_VMSettingsValue = 'Value'
	$script:Str_VMSettingsSaveSetting = 'Save setting'
	$script:Str_VMSettingsAddSettingNode = 'Add setting node:'
	$script:Str_VMSettingsRemoveSelectedNode = 'Remove selected node'
	$script:Str_SQLInstances = 'Instances'
	$script:Str_SQLSaveChanges = 'Save changes'
	$script:Str_SQLAddInstance = 'Add insntance'
	$script:Str_SQLRemoveSelectedInstance = 'Remove selected instance'
	$script:Str_SQLInstanceVariables = 'Instance variables'
	$script:Str_SQLSaveInstanceVariables = 'Save instance variables'
	$script:Str_RolesComponentsAndRoles = 'Components and roles that will be installed'
	$script:Str_RolesSaveValues = 'Save values'
	$script:Str_RolesRemoveSelectedRole = 'Remove selected role'
	$script:Str_RolesRemoveSelectedComponent = 'Remove selected component'
	$script:Str_RolesComponent = 'Component'
	$script:Str_RolesRole = 'Role'
	$script:Str_RolesAddSelectedRole= 'Add selected role'
	$script:Str_RolesToServer = 'to Server:'
	$script:Str_RolesDisableRolecombinationValid = 'Disable Rolecomibination validation'
	$script:Str_RunValidation = "Run validation process"
	$script:Str_SelectFile = "Select file"
	$script:Str_SelectAFileVarXML  = "Select a file (variable.xml) which you like to edit or create a new one, then click load."
	$script:Str_SelectExisting = "Select existing file in PDT GUI directory"
	$script:Str_BrowseforVariable = "Browse for variable file"
	$script:Str_SaveDescription = "Save description"
	$script:Str_CreateANewDeployment = "Create a new deployment scenario"
	$script:Str_Description = "Description"
	$script:Str_Open = "Open"
	$script:Str_PleaseBeAware = "Please be aware that the current variable.xml in {0} will be overwritten" -f $(get-scriptdirectory)
	$script:Str_RunDownloader = "Start downloader"
	$script:Str_CreateVMs = "Run VMCreator"
	

	if (Test-Path ".\language.xml")
	{
		$lang = [xml](Get-Content ".\language.xml" -Encoding 'UTF8')
		$lang.Language.Variable | %{
			Set-Variable -Name "Str_$($_.Name)"	-Value $_.Value -Scope Script
		}
	}
	
	
	#endregion
	if (!(Test-Path ".\workflow.xml"))
	{
		if ([System.Windows.Forms.MessageBox]::Show("workflow.xml not found`nDownload PDT now?", "No workflow.xml", 'OKCancel', 'Question') -eq 'OK')
		{
			Call-EULA_psf
			
			if ($script:eulaAccept)
			{
				try
				{
					$wr = Invoke-WebRequest -Uri 'http://gallery.technet.microsoft.com/PowerShell-Deployment-f20bb605'
					$PDTLink = "http://gallery.technet.microsoft.com" + ($wr.Links | ? { $_.href -match ".zip" }).href
					Invoke-WebRequest -Uri $PDTLink -OutFile "$($env:TEMP)\PDT.zip"
					[System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem')
					$zip = [System.IO.Compression.ZipFile]::Open("$($env:Temp)\PDT.zip", "READ")
					foreach ($ZipEntry in $zip.Entries)
					{
						[System.IO.Compression.ZipFileExtensions]::ExtractToFile($ZipEntry, "$(Get-ScriptDirectory)\$($ZipEntry.Fullname)", $true)
					}
				}
				catch { 
					
					[void][System.Windows.Forms.MessageBox]::Show("Could not download or extract the PDT package. PDT GUI will now quit.`n`nError: `n$($error[0].Exception.message)","Error")
				}
			}
			else
			{
				exit
			}
		}
		else
		{
			exit
		}
		
	}
	if (!(Test-Path ".\Variable.xml"))
	{
#		[void][System.Windows.Forms.MessageBox]::Show("Variable.xml not found, exiting.`nPlease make sure that all files from PDT are in the same folder as the PDT GUI.", "Error", 'OK', 'Error')
#		exit
	}
#	$script:variable = [xml](Get-Content ".\Variable.xml")
	if (Test-Path ".\ValidationInfo.xml")
	{
		$script:ValidationInfo = [xml](Get-Content ".\ValidationInfo.xml"	)
	}
	#load some workflow xml and get some data
	$script:Workflow = [xml](Get-Content ".\workflow.xml")
	if((Call-Edit-Config_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: Globals.ps1
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	function save-DeploymentScenario
	{
		$script:Variable.save("$(Get-ScriptDirectory)\Variable.xml")
		$script:Variable.Save($script:DeploymentScenario)
	}
	function Get-CurrentLineNumber {
	    $MyInvocation.ScriptLineNumber
	}
	try
	{
		New-Alias -Name __LINE__ -Value Get-CurrentLineNumber
	}
	catch
	{
		Write-Debug "Alias __LINE__ already exists"
	}
	function Fill-XMLNodesToTreeView{
		param(
			$Tn,
			$Element
		)
		 foreach($Item in $($Element.get_ChildNodes()|?{$_.Name -ne '#text'})){ 
	            $node = new-object System.Windows.Forms.TreeNode
	            $Node.Text = $Item.name
	            [Void]$Tn.Nodes.add( $node )
	          
	                Fill-XMLNodesToTreeView -Element $Item -Tn $node
	          
	        }
	}
	[string]$ScriptDirectory = Get-ScriptDirectory
	$script:Version = "v1.0.1.3"
	#region Control Helper Functions
	function Get-CheckedNodes 
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNodes $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param(
		[ValidateNotNull()]
		[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
		[ValidateNotNull()]
		[System.Collections.ArrayList]$CheckedNodes)
		
		foreach($Node in $NodeCollection)
		{
			if($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNodes $Node.Nodes $CheckedNodes
		}
	}
	
	
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	
	function Sort-ListViewColumn
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory = $true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			$local:type = [ListViewItemComparer]
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort()#Sort the items
		}
		else
		{
			if ($Sort -eq [System.Windows.Forms.SortOrder]::None)
			{
				$Sort = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[int]$ImageIndex = -1,
			[string[]]$SubItems,
			[System.Windows.Forms.ListViewGroup]$Group,
			[switch]$Clear)
		
		if ($Clear)
		{
			$ListView.Items.Clear();
		}
		
		if ($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{
				$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if ($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if ($Group -ne $null)
				{
					$listitem.Group = $Group
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
	}
	
	#endregion
	
	#region Control Helper Functions
	function Sort-ListViewColumn
	{
		<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
	
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
	
		.PARAMETER ListView
			The ListView control to sort.
	
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
			
		.PARAMETER  SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
	#>
		param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory = $true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			$local:type = [ListViewItemComparer]
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort()#Sort the items
		}
		else
		{
			if ($Sort -eq [System.Windows.Forms.SortOrder]::None)
			{
				$Sort = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListView]$ListView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[int]$ImageIndex = -1,
			[string[]]$SubItems,
			[System.Windows.Forms.ListViewGroup]$Group,
			[switch]$Clear)
		
		if ($Clear)
		{
			$ListView.Items.Clear();
		}
		
		if ($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{
				$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if ($SubItems -ne $null)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if ($Group -ne $null)
				{
					$listitem.Group = $Group
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
	}
	
	
	function Load-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Load-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Get-CheckedNodes
	{
	<#
		.SYNOPSIS
			This function collects a list of checked nodes in a TreeView
	
		.DESCRIPTION
			This function collects a list of checked nodes in a TreeView
	
		.PARAMETER  $NodeCollection
			The collection of nodes to search
	
		.PARAMETER  $CheckedNodes
			The ArrayList that will contain the all the checked items
		
		.EXAMPLE
			$CheckedNodes = New-Object System.Collections.ArrayList
			Get-CheckedNodes $treeview1.Nodes $CheckedNodes
			foreach($node in $CheckedNodes)
			{	
				Write-Host $node.Text
			}
	#>
		param (
			[ValidateNotNull()]
			[System.Windows.Forms.TreeNodeCollection] $NodeCollection,
			[ValidateNotNull()]
			[System.Collections.ArrayList]$CheckedNodes)
		
		foreach ($Node in $NodeCollection)
		{
			if ($Node.Checked)
			{
				[void]$CheckedNodes.Add($Node)
			}
			Get-CheckedNodes $Node.Nodes $CheckedNodes
		}
	}
	$assem = ('System.Windows.Forms')
	Add-Type -ReferencedAssemblies $assem -TypeDefinition @"
using System;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;

namespace Elanity
{
    public static class GUITools
    {
        public enum MoveDirection
        {
            Up,
            Down
        }
        public static void MoveItems(ListView sender, MoveDirection direction)
        {
            bool valid = sender.SelectedItems.Count > 0 &&
                        ((direction == MoveDirection.Down && (sender.SelectedItems[sender.SelectedItems.Count - 1].Index < sender.Items.Count - 1))
                        || (direction == MoveDirection.Up && (sender.SelectedItems[0].Index > 0)));

            if (valid)
            {
                bool start = true;
                int first_idx = 0;
                List<ListViewItem> items = new List<ListViewItem>();
                foreach (ListViewItem i in sender.SelectedItems)
                {
                    if (start)
                    {
                        first_idx = i.Index;
                        start = false;
                    }
                    items.Add(i);
                }

                sender.BeginUpdate();
                foreach (ListViewItem i in sender.SelectedItems) i.Remove();
                if (direction == MoveDirection.Up)
                {
                    int insert_to = first_idx - 1;
                    foreach (ListViewItem i in items)
                    {
                        sender.Items.Insert(insert_to, i);
                        insert_to++;
                    }
                }
                else
                {
                    int insert_to = first_idx + 1;
                    foreach (ListViewItem i in items)
                    {
                        sender.Items.Insert(insert_to, i);
                        insert_to++;
                    }
                }
                sender.EndUpdate();
            }
        }
    }
}
"@
	#endregion
	function Generate-Report
	{
		<# Credits go out to Joze Markic #>
		# GenerateConfigReport v1.0  #
	# Created by Joze Markic     #
	# a-jomark@microsoft.com     #
	
	<#
	This script can generate report of active configuration based on data from two XMLs: Variable.xml and Workflow.xml.
	Before you can run this PowerShell script, you need to change the file path for the two XMLs.
	If you don't want to generate report for something just comment or remove that section.
	
	When you run this script it will automatically create subfolder with current date & time as its name.
	Script automatically creates copies of both XMLs to this subfolder.
	In the subfolder script also creates VMs.csv with active configuration of all VMs based on Variable.xml.
	One additional file is also created during script execution: VariableReport.txt.
	VariableReport.txt file is the transcript of whole script execution process.
	
	When you run this script it does the following::
	- create new sub-folder at the same location script is saved at
	- start transcript of all the script activity
	- create copies of the two original XML files
	- load XML data into variable
	- Report on the following from Variable.xml:
	    - List variables and values of all the general variables 
	    - list domain config
	        - Domain config
	        - Join Domain - Config
	        - Join Domain - Credentials
	    - list default VM config
	        - Default VM config
	        - Default VM OS Drive config
	        - Default VM Page File Drive config
	        - Default VM Data Drive config
	        - Default VM Network config
	        - Default VM AutoStart config
	        - Default VM AutoStop config
	    - list all the VMs and their configuration
	        - list all the VMs and:
	            - Sequence number
	            - IP Address, 
	            - VMName, 
	            - does it have custom DataDisks, 
	            - does it have custom Memory configuration
	            - does it have shared data disks
	        - Custom OS Drives config - if this section is empty, there is no custom configuration
	        - Custom Data Drives config - if this section is empty, there is no custom configuration
	        - Custom Shared Data Drives config - if this section is empty, there is no custom configuration
	        - Custom Memory config - if this section is empty, there is no custom configuration
	        - Custom VM Generation config - if this section is empty, there is no custom configuration
	        - Custom Network Adapter config - if this section is empty, there is no custom configuration
	    - Summary for VM deploy
	        - table view for all the VMs and their configuration:
	            - Sequence number
	            - IP Address
	            - VMName
	            - Startup RAM
	            - Minimum RAM
	            - Maximum RAM
	            - RAM Buffer
	            - number of CPUs
	            - minimum disk space needed for OS VHDX (0 if Differencing is specified or if VHDX is not accessible)
	            - maximum disk space needed for OS VHDX (based on max size for VHDX; 0 if VHDX is not accessible)
	            - Page File VHDX minimum size (0 if Dynamic Disk is used; empty if VHDX is not accessible)
	            - Page File VHDX maximum size (based on max size for VHDX; empty if VHDX is not accessible)
	            - total maximum disk usage per VM for additional data VHDX
	            - export all this information to VMs.csv
	        - Generate TOTAL summary for all the hardware resources needed
	            - Startup RAM usage
	            - Minimum RAM usage
	            - Maximum RAM usage
	            - Total vCPUs
	            - Minimum VM OS Disk space needed
	            - Maximum VM OS Disk space needed
	            - Minimum PF Disk space needed
	            - Maximum PF Disk space needed
	            - Maximum Data Disk space needed
	            - Generate report of Shared Disk usage (if used)
	    - List all the components including the variables currently set
	    - List all the roles currently set to install, but exclude integration roles
	    - List all the SQL versions and the variables currently set
	- Generate report from Workflow.xml:
	    - List roles that can be combined with VMM 2012 R2 Server
	    - List all the roles that can be deployed with PDT
	    - List of all the downloadable Installables and their download URL
	    - List of all the Installables that do not have download URL
	    
	If you don't want to generate report of Workflow.xml data, just remove or comment section between this lines:
	
	#########################################################################################
	####################### Generate report from Workflow.xml - START #######################
	#########################################################################################
	
	#########################################################################################
	####################### Generate report from Workflow.xml - END #########################
	#########################################################################################
	#>
	
	$SourceVarXML = $script:DeploymentScenario
	$SourceWorXML = "$(Get-ScriptDirectory)\Workflow.xml"
	
	#################################################################################
	####################### Generate report from Variable.xml #######################
	#################################################################################
	
	#Generate folder name
	$Logging = $script:DeploymentScenarioFolder
	#Set folder path
	$LogFolder = Join-Path (Get-ScriptDirectory) $Logging
	
	#Set variables
	$LogName = "VariableReport.txt"
	$FullLogPath = Join-Path $LogFolder $LogName
	$VMSummary = "VMs.csv"
	$VMLogPath = Join-Path $LogFolder $VMSummary
	$CopyXMLVariable = "Variable.xml"
	$CopyXMLVariablePath = Join-Path $LogFolder $CopyXMLVariable
	
	#Check for log folder and create it
	if (!(Test-Path $LogFolder)) {
		New-Item -Path (Get-ScriptDirectory) -Name $Logging -ItemType Directory | Out-Null
	}
	
	#Start transcript
	Start-Transcript -Path $FullLogPath
	
	#Create copies of original XML files
	#Copy-Item -Path $SourceVarXML -Destination $CopyXMLVariablePath
	
	#load source XML
	$xml = New-Object -TypeName XML
	$xml.Load("$SourceVarXML")
	
	#List values of all the general variables
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "General variables"
	$xml.Installer.Variable | Format-Table -AutoSize
	Write-Host "`n" 
	
	#list domain config
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Domain config"
	if (!($xml.Installer.VMs.Domain)) {write-host "No domain configuration found.`n"} else {$xml.Installer.VMs.Domain | Format-List}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Join Domain - Config"
	$xml.Installer.VMs.Default.JoinDomain | Select-Object Domain,OrganizationalUnit | Format-List
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Join Domain - Credentials"
	$xml.Installer.VMs.Default.JoinDomain.Credentials | Format-List
	Write-Host "`n" 
	
	#list default VM config
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM config"
	$xml.Installer.VMs.Default.VMName | Format-List
	$xml.Installer.VMs.Default | Select-Object Host,VMFolder,VHDFolder,SharedVHDXFolder,TimeZone,VMGeneration,Processor,DVD,DVDDrive,GuestServices,AdministratorPassword
	$xml.Installer.VMs.Default.Memory | Format-Table -AutoSize
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM OS Drive config"
	$xml.Installer.VMs.Default.OSDisk | Format-List
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM Page File Drive config"
	if (!($xml.Installer.VMs.Default.PageFileDisk)) {Write-Host "No default Page File Drive configured.`n"} else {$xml.Installer.VMs.Default.PageFileDisk | Format-List}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM Data Drive config"
	if (!($xml.Installer.VMs.Default.DataDisks)) {Write-Host "Ne default Data Drive configured.`n"} else {$xml.Installer.VMs.Default.DataDisks | Format-Table -AutoSize}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM Network config"
	$xml.Installer.VMs.Default.NetworkAdapter | Select-Object VirtualSwitch,VlanId,MACSpoofing | Format-List
	$xml.Installer.VMs.Default.NetworkAdapter.IP
	$xml.Installer.VMs.Default.NetworkAdapter.MAC | Format-List
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM AutoStart config"
	$xml.Installer.VMs.Default.AutoStart | Format-List
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Default VM AutoStop config"
	if (!($xml.Installer.VMs.Default.AutoStop)) {Write-Host "No default AutoStop action configured.`n"} else {$xml.Installer.VMs.Default.AutoStop}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#list all the VMs and their configuration
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "All VMs"
	$xml.Installer.VMs.VM | Format-Table -AutoSize Count,@{Expression={$IP = $xml.Installer.VMs.Default.NetworkAdapter.IP.Prefix; [int]$IP1 = ($_.Count); [int]$IP2=$xml.Installer.VMs.Default.NetworkAdapter.IP.Sequence;$IP+($IP1+$IP2)};Label="IP Address"},VMName,Memory,DataDisks,SharedDataDisks
	
	#list custom configuration where available
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Custom OS Drives config"
	$xml.Installer.VMs.VM | ForEach-Object {if ($_.OSDisk) {$_.VMName,$_.OSDisk | Format-Table -AutoSize}}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Custom Data Drives config"
	$xml.Installer.VMs.VM | ForEach-Object {if ($_.DataDisks) {$_.VMName,$_.DataDisks | Format-Table -AutoSize }}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Custom Shared Data Drives config"
	$xml.Installer.VMs.VM | ForEach-Object {if ($_.SharedDataDisks) {$_.VMName,$_.SharedDataDisks | Format-Table -AutoSize }}
	write-host "`n"
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Custom Memory config"
	$xml.Installer.VMs.VM | ForEach-Object {if ($_.Memory) {$_.VMName,$_.Memory | Format-Table -AutoSize}}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Custom VM Generation config"
	$xml.Installer.VMs.VM | ForEach-Object {if ($_.VMGeneration) {$_.VMName,$_.VMGeneration | Format-Table -AutoSize}}
	write-host "`n"
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Custom Network Adapter config"
	$xml.Installer.VMs.VM | ForEach-Object {if ($_.NetworkAdapter) {$_.VMName,$_.NetworkAdapter | Format-Table -AutoSize}}
	write-host "`n"
	
	#Create summary in table view
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Summary for VM deploy"
	$TotalVMs = $xml.Installer.VMs.VM | Select-Object Count,@{Expression={$IP = $xml.Installer.VMs.Default.NetworkAdapter.IP.Prefix; [int]$IP1 = ($_.Count); [int]$IP2=$xml.Installer.VMs.Default.NetworkAdapter.IP.Sequence;$IP+($IP1+$IP2)};Label="IP Address"},VMName,@{Expression={if (!($_.Memory)) {$StartumRAM = $xml.Installer.VMs.Default.Memory.Startup} else {$StartumRAM = $_.Memory.Startup};$StartumRAM };Label="Startup"},@{Expression={if (!($_.Memory)) {$MinimumRAM = $xml.Installer.VMs.Default.Memory.Minimum} else {$MinimumRAM = $_.Memory.Minimum};$MinimumRAM };Label="Minimum"},@{Expression={if (!($_.Memory)) {$MaximumRAM = $xml.Installer.VMs.Default.Memory.Maximum} else {$MaximumRAM = $_.Memory.Maximum};$MaximumRAM };Label="Maximum"},@{Expression={if (!($_.Memory)) {$BufferRAM = $xml.Installer.VMs.Default.Memory.Buffer} else {$BufferRAM = $_.Memory.Buffer};$BufferRAM };Label="Buffer"},@{Expression={if (!($_.Processor)) {$CPU = $xml.Installer.VMs.Default.Processor} else {$CPU = $_.Processor}; $CPU };Label="CPUs"},@{Expression={if (!($_.OSDisk)) { if ($xml.Installer.VMs.Default.OSDisk.Type -eq "Differencing") {[int]$OSDisk = 0} else {[int]$OSDisk = (Get-VHD -Path $xml.Installer.VMs.Default.OSDisk.Parent).FileSize / 1024 /1024 /1024}} else {if ($_.OSDisk.Type -eq "Differencing") {[int]$OSDisk = 0} else {[int]$OSDisk = (Get-VHD -Path $_.OSDisk.Parent).FileSize / 1024 /1024 /1024}}; $OSDisk };Label="OS-Min"},@{Expression={if (!($_.OSDisk)) { if ($xml.Installer.VMs.Default.OSDisk.Type -eq "Differencing") {[int]$OSDiskMax = (Get-VHD -Path $xml.Installer.VMs.Default.OSDisk.Parent).Size / 1024 /1024 /1024} else {[int]$OSDiskMax = (Get-VHD -Path $xml.Installer.VMs.Default.OSDisk.Parent).Size / 1024 /1024 /1024}} else {if ($_.OSDisk.Type -eq "Differencing") {[int]$OSDiskMax = (Get-VHD -Path $_.OSDisk.Parent).Size / 1024 /1024 /1024} else {[int]$OSDiskMax = (Get-VHD -Path $_.OSDisk.Parent).Size / 1024 /1024 /1024}}; $OSDiskMax };Label="OS-Max"},@{Expression={if (!($_.PageFileDisk)) { if ($xml.Installer.VMs.Default.PageFileDisk.Type -eq "Dynamic") {[int]$PFDisk = 0} else {[int]$PFDisk = (Get-VHD -Path $xml.Installer.VMs.Default.PageFileDisk.Template).Size / 1024 /1024 /1024}} else {if ($_.PFDisk.Type -eq "Dynamic") {[int]$PFDisk = 0} else {[int]$PFDisk = (Get-VHD -Path $_.PageFileDisk.Template).Size / 1024 /1024 /1024}}; $PFDisk };Label="PF-Min"},@{Expression={if (!($_.PageFileDisk)) { if ($xml.Installer.VMs.Default.PageFileDisk.Type -eq "Fixed") {[int]$PFDiskMax = (Get-VHD -Path $xml.Installer.VMs.Default.PageFileDisk.Template).Size / 1024 /1024 /1024} else {[int]$PFDiskMax = (Get-VHD -Path $xml.Installer.VMs.Default.PageFileDisk.Template).Size / 1024 /1024 /1024}} else {if ($_.PFDisk.Type -eq "Fixed") {[int]$PFDiskMax = (Get-VHD -Path $_.PageFileDisk.Template).Size / 1024 /1024 /1024} else {[int]$PFDiskMax = (Get-VHD -Path $_.PageFileDisk.Template).Size / 1024 /1024 /1024}}; $PFDiskMax };Label="PF-Max"},@{Expression={if (!($_.DataDisks)) { [int]$DataDiskCount = $xml.Installer.VMs.Default.DataDisks.Count; [int]$DataDiskSize = $xml.Installer.VMs.Default.DataDisks.Size; $DataDiskMax = $DataDiskCount * $DataDiskSize} else {if ($_.DataDisks.Size.Count -eq 1) { [int]$DataDiskCount = $_.DataDisks.Count; [int]$DataDiskSize = $_.DataDisks.Size; $DataDiskMax = $DataDiskCount * $DataDiskSize} elseif ($_.DataDisks.Size.Count -gt 1) {$TotalDisk = $_.DataDisks | Select-Object count,size,@{Expression={[int]$DataDiskCount = $_.Count; [int]$DataDiskSize = $_.Size; $DataDiskAll =  $DataDiskCount * $DataDiskSize;$DataDiskAll};Label="Total"}; $DataDiskMax = ($TotalDisk | Measure-Object -Property Total -Sum).Sum }};$DataDiskMax};Label="DataDisk-Max"}
	$TotalVMs | Format-Table Count, "IP Address", "VMName", "Startup", "Minimum", "Maximum", "Buffer", "CPUs", "OS-Min", "OS-Max", "PF-Min", "PF-Max", "DataDisk-Max" -AutoSize
	
	#Export configuration summary to CSV
	$TotalVMs | Export-Csv -Path $VMLogPath
	
	#Generate summary for all the hardware resources needed
	[int]$StartupRAM = ($TotalVMs | Measure-Object -Sum -Property Startup).Sum / 1024
	[int]$MinimumRAM = ($TotalVMs | Measure-Object -Sum -Property Minimum).Sum / 1024
	[int]$MaximumRAM = ($TotalVMs | Measure-Object -Sum -Property Maximum).Sum / 1024
	[int]$TotalCPUs = ($TotalVMs | Measure-Object -Sum -Property CPUs).Sum
	[int]$MinimumOSDisk = ($TotalVMs | Measure-Object -Sum -Property "OS-Min").Sum
	[int]$MaximumOSDisk = ($TotalVMs | Measure-Object -Sum -Property "OS-Max").Sum
	[int]$MinimumPFDisk = ($TotalVMs | Measure-Object -Sum -Property "PF-Min").Sum
	[int]$MaximumPFDisk = ($TotalVMs | Measure-Object -Sum -Property "PF-Max").Sum
	[int]$MaximumDataDisk = ($TotalVMs | Measure-Object -Sum -Property "DataDisk-Max").Sum
	
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Summary for all VMs:"
	Write-Host "Startup RAM usage is:"$StartupRAM "GB"
	Write-Host "Minimum RAM usage is:"$MinimumRAM "GB"
	Write-Host "Maximum RAM usage is:"$MaximumRAM "GB"
	Write-Host "Total vCPUs:"$TotalCPUs
	Write-Host "Minimum VM OS Disk space needed:"$MinimumOSDisk "GB"
	Write-Host "Maximum VM OS Disk space needed:"$MaximumOSDisk "GB"
	Write-Host "Minimum PF Disk space needed:"$MinimumPFDisk "GB"
	Write-Host "Maximum PF Disk space needed:"$MaximumPFDisk "GB"
	Write-Host "Maximum Data Disk space needed:"$MaximumDataDisk "GB"
	Write-Host "`n"
	
	#Generate report of Shared Disk usage
	$SharedDisks = $xml.Installer.VMs.VM | Where-Object SharedDataDisks | ForEach-Object {$_.SharedDataDisks} | Select-Object -Unique -Property prefix,count,size,@{Expression={[int]$SharedDiskCount = $_.Count; [int]$SharedDiskSize = $_.Size; $SharedDiskAll =  $SharedDiskCount * $SharedDiskSize;$SharedDiskAll};Label="TotalShared"}
	
	if ($SharedDisks ) {
		Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Maximum space needed for shared disks:"
		$SharedDisks | Format-Table -AutoSize
	}
	
	#List all the components including the variables currently set:
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "All the components including the variables currently set"
	$xml.Installer.Components.Component | select Name,Variable | sort Name | foreach{Write-Host $_.Name -ForegroundColor Cyan;If($_.PSObject.Properties.Match('Variable').Count){foreach($Var in $_.Variable){Write-Host " - $($Var.Name)=$($Var.Value)"}}}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#List all the roles currently set to install, but exclude integration roles:
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "All the roles currently set to install"
	$xml.Installer.Roles.Role | where {$_.Type -ne 'Integration'} | select Name -Unique | sort Name | ft -AutoSize
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	
	#List all the SQL versions and the variables currently set:
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "All the SQL versions and the variables currently set"
	$xml.Installer.SQL.Instance | select Instance,Variable | sort Instance | foreach{Write-Host $_.Instance -ForegroundColor Cyan;foreach($Var in $_.Variable){Write-Host " - $($Var.Name)=$($Var.Value)"}}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#########################################################################################
	####################### Generate report from Workflow.xml - START #######################
	#########################################################################################
	
	#Set variables
	$CopyXMLWorkflow = "Workflow.xml"
	$CopyXMLWorkflowPath = Join-Path $LogFolder $CopyXMLWorkflow
	
	#Create copies of original XML files
	Copy-Item -Path $SourceWorXML -Destination $CopyXMLWorkflowPath
	
	#load source XML
	$xml2 = New-Object -TypeName XML
	$xml2.Load("$SourceWorXML")
	
	#List roles that can be combined with VMM 2012 R2 Server:
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "Roles that can be combined with VMM 2012 R2 Server"
	$xml2.Installer.Roles.Role | where {$_.Name -eq 'System Center 2012 R2 Virtual Machine Manager Management Server'} | foreach {$_.Validation.Combinations.Combination}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#List of all the downloadable Installables and their download URL
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "List of all the Installables and the URL"
	$xml2.Installer.Installables.Installable | foreach {If ($_.Download.URL) {Write-Host $_.Name -ForegroundColor Cyan}; foreach ($Link in $_.Download.URL){Write-Host "  " $Link}}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#List of all the Installables that do not have download URL
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "List of all the Installables that do not have download URL"
	$xml2.Installer.Installables.Installable | foreach {If (! $_.Download.URL) {Write-Host $_.Name -ForegroundColor Red}}
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#List all the roles that can be deployed with PDT:
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow "All the Roles that can be deployed with PDT"
	$xml2.Installer.Roles.Role | Select Component, Name
	Write-Host -ForegroundColor Blue -BackgroundColor Yellow 
	
	#########################################################################################
	####################### Generate report from Workflow.xml - END #########################
	#########################################################################################
	}#endregion Source: Globals.ps1

#region Source: Edit-Config.psf
function Call-Edit-Config_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formPDTGUI = New-Object 'System.Windows.Forms.Form'
	$picturebox1 = New-Object 'System.Windows.Forms.PictureBox'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$buttonscriptStr_Cancel = New-Object 'System.Windows.Forms.Button'
	$buttonscriptStr_Back = New-Object 'System.Windows.Forms.Button'
	$buttonscriptStr_Finish = New-Object 'System.Windows.Forms.Button'
	$tabcontrolWizard = New-Object 'System.Windows.Forms.TabControl'
	$tabpageAbout = New-Object 'System.Windows.Forms.TabPage'
	$picturebox2 = New-Object 'System.Windows.Forms.PictureBox'
	$labelBenedictBergerbbelan = New-Object 'System.Windows.Forms.Label'
	$labelscriptStr_AboutIdeas = New-Object 'System.Windows.Forms.Label'
	$labelKamilKosekkkelanityd = New-Object 'System.Windows.Forms.Label'
	$labelscriptStr_AboutCode = New-Object 'System.Windows.Forms.Label'
	$linklabelHttpgallerytechnetmi = New-Object 'System.Windows.Forms.LinkLabel'
	$labelThePDTGuiIsAGraphica = New-Object 'System.Windows.Forms.Label'
	$tabpageSelectFile = New-Object 'System.Windows.Forms.TabPage'
	$buttonscriptStr_SaveDescri = New-Object 'System.Windows.Forms.Button'
	$textboxDescription = New-Object 'System.Windows.Forms.TextBox'
	$labelscriptStr_PleaseBeAw = New-Object 'System.Windows.Forms.Label'
	$textboxNewDescription = New-Object 'System.Windows.Forms.TextBox'
	$labelscriptStr_Descriptio = New-Object 'System.Windows.Forms.Label'
	$buttonscriptStr_Open = New-Object 'System.Windows.Forms.Button'
	$textboxNewDeploymentScenario = New-Object 'System.Windows.Forms.TextBox'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$radiobuttonscriptStr_CreateANew = New-Object 'System.Windows.Forms.RadioButton'
	$buttonBrowse = New-Object 'System.Windows.Forms.Button'
	$radiobuttonscriptStr_BrowseforV = New-Object 'System.Windows.Forms.RadioButton'
	$textboxFile = New-Object 'System.Windows.Forms.TextBox'
	$radiobuttonscriptStr_SelectExis = New-Object 'System.Windows.Forms.RadioButton'
	$labelscriptStr_SelectAFil = New-Object 'System.Windows.Forms.Label'
	$listviewSelectVariableFile = New-Object 'System.Windows.Forms.ListView'
	$tabpageVariable = New-Object 'System.Windows.Forms.TabPage'
	$tablelayoutpanelGeneral = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$tabpageVMs = New-Object 'System.Windows.Forms.TabPage'
	$tabcontrolSubVMs = New-Object 'System.Windows.Forms.TabControl'
	$tabpageDomain = New-Object 'System.Windows.Forms.TabPage'
	$buttonSaveDomainChanges = New-Object 'System.Windows.Forms.Button'
	$textboxGroupOU = New-Object 'System.Windows.Forms.TextBox'
	$labelGroupOU = New-Object 'System.Windows.Forms.Label'
	$textboxServiceAccountOU = New-Object 'System.Windows.Forms.TextBox'
	$labelServiceAccountOU = New-Object 'System.Windows.Forms.Label'
	$TextboxDomainName = New-Object 'System.Windows.Forms.TextBox'
	$labelName = New-Object 'System.Windows.Forms.Label'
	$checkboxscriptStr_DomainCrea = New-Object 'System.Windows.Forms.CheckBox'
	$tabpageDefaultVMSettings = New-Object 'System.Windows.Forms.TabPage'
	$tablelayoutpanelDefaultVMSetting = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$buttonDefaultVMSettingSave = New-Object 'System.Windows.Forms.Button'
	$label3 = New-Object 'System.Windows.Forms.Label'
	$treeviewDefaultVMSetting = New-Object 'System.Windows.Forms.TreeView'
	$labelscriptStr_DefaultVMS = New-Object 'System.Windows.Forms.Label'
	$tabpageVMSettings = New-Object 'System.Windows.Forms.TabPage'
	$buttonMoveVMDown = New-Object 'System.Windows.Forms.Button'
	$buttonMoveVMUp = New-Object 'System.Windows.Forms.Button'
	$tablelayoutpanelVMSettings = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$listviewVMs = New-Object 'System.Windows.Forms.ListView'
	$comboboxSettingNodeToAdd = New-Object 'System.Windows.Forms.ComboBox'
	$labelAddSettingNode = New-Object 'System.Windows.Forms.Label'
	$buttonRemoveSetting = New-Object 'System.Windows.Forms.Button'
	$buttonAddSetting = New-Object 'System.Windows.Forms.Button'
	$buttonRemoveVM = New-Object 'System.Windows.Forms.Button'
	$buttonAddVM = New-Object 'System.Windows.Forms.Button'
	$buttonSaveVMSetting = New-Object 'System.Windows.Forms.Button'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$labelSettings = New-Object 'System.Windows.Forms.Label'
	$labelscriptStr_VMSettings = New-Object 'System.Windows.Forms.Label'
	$treeviewVMSettings = New-Object 'System.Windows.Forms.TreeView'
	$tabpageSQL = New-Object 'System.Windows.Forms.TabPage'
	$buttonscriptStr_SQLSaveIns = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$tablelayoutpanelSQLVariables = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$buttonscriptStr_SQLRemoveS = New-Object 'System.Windows.Forms.Button'
	$buttonscriptStr_SQLAddInst = New-Object 'System.Windows.Forms.Button'
	$buttonscriptStr_SQLSaveCha = New-Object 'System.Windows.Forms.Button'
	$comboboxSQLVersion = New-Object 'System.Windows.Forms.ComboBox'
	$textboxSQLInstanceName = New-Object 'System.Windows.Forms.TextBox'
	$comboboxSQLServers = New-Object 'System.Windows.Forms.ComboBox'
	$labelscriptStr_SQLInstanc = New-Object 'System.Windows.Forms.Label'
	$listviewSQLInstances = New-Object 'System.Windows.Forms.ListView'
	$tabpageRoles = New-Object 'System.Windows.Forms.TabPage'
	$checkboxscriptStr_RolesDisab = New-Object 'System.Windows.Forms.CheckBox'
	$labelscriptStr_RolesToSer = New-Object 'System.Windows.Forms.Label'
	$comboboxToServer = New-Object 'System.Windows.Forms.ComboBox'
	$buttonscriptStr_RolesAddSe = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonRemoveSelectedCompon = New-Object 'System.Windows.Forms.Button'
	$buttonscriptStr_RolesRemov = New-Object 'System.Windows.Forms.Button'
	$buttonSaveValuesCR = New-Object 'System.Windows.Forms.Button'
	$tablelayoutpanelComponentAndRoleSettings = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$treeviewComponentsAndRoles = New-Object 'System.Windows.Forms.TreeView'
	$labelscriptStr_RolesRole = New-Object 'System.Windows.Forms.Label'
	$listboxRole = New-Object 'System.Windows.Forms.ListBox'
	$labelscriptStr_RolesCompo = New-Object 'System.Windows.Forms.Label'
	$listboxComponent = New-Object 'System.Windows.Forms.ListBox'
	$tabpageFinish = New-Object 'System.Windows.Forms.TabPage'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonRunInstaller = New-Object 'System.Windows.Forms.Button'
	$labelSkipValidation = New-Object 'System.Windows.Forms.Label'
	$comboboxSkipValidation = New-Object 'System.Windows.Forms.ComboBox'
	$buttonscriptStr_RunValidat = New-Object 'System.Windows.Forms.Button'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonscriptStr_CreateVMs = New-Object 'System.Windows.Forms.Button'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$checkboxDeploymentOnly = New-Object 'System.Windows.Forms.CheckBox'
	$buttonscriptStr_RunDownloa = New-Object 'System.Windows.Forms.Button'
	$buttonscriptStr_Next = New-Object 'System.Windows.Forms.Button'
	$columnheader1 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader2 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheader3 = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderVMCount = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderVMName = New-Object 'System.Windows.Forms.ColumnHeader'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$columnheaderDeplScenario = New-Object 'System.Windows.Forms.ColumnHeader'
	$columnheaderDescription = New-Object 'System.Windows.Forms.ColumnHeader'
	$maskedtextboxIP = New-Object 'System.Windows.Forms.MaskedTextBox'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$imagelistIcons = New-Object 'System.Windows.Forms.ImageList'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$errorproviderWarning = New-Object 'System.Windows.Forms.ErrorProvider'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$editDescriptionToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	function Validate-WizardPage
	{
		
		# Placeholder function for next version
		[OutputType([boolean])]
		param ([System.Windows.Forms.TabPage]$tabPage)
		#region Validate Variable Page
		if ($tabPage -eq $tabpageVariable)
		{
			
			#		foreach ($textbox in $($tablelayoutpanel1.Controls | ? { $_ -is [System.Windows.Forms.TextBox] }))
			#		{
			#			if ($textbox.text -eq "")
			#			{
			#				return $false
			#			}
			#		}
			
			return $true
		}
		#endregion
		elseif ($tabPage -eq $tabpageSelectFile)
		{
			if ($script:variable -eq $null)
			{
				return $false
			}
			else { return $true }
		}
		elseif ($tabPage -eq $tabpageComponents)
		{
			#TODO: Enter Validation Code here for Step 2
			
			return $true
			
		}
		elseif ($tabPage -eq $tabpageRoles)
		{
			
			return $true
		}
		elseif ($tabPage -eq $tabpageVms)
		{
			return $true
		}
		elseif ($tabpage -eq $tabpageSQL)
		{
			return $true
		}
		elseif ($tabpage -eq $tabpageAbout)
		{
			return $true
		}
		return $false
	}
	
	$buttonscriptStr_Finish_Click = {
		#-------------------------------------------------------
		# TODO: Place finalization script here
		#-------------------------------------------------------
		
	}
	
	#region Events and Functions
	$buttonSaveVariable_click = {
		UpdateNavButtons
		$save = $true
		foreach ($textbox in $($tablelayoutpanelGeneral.Controls | ? { $_ -is [System.Windows.Forms.TextBox] }))
		{
			
			foreach ($checkbox in $($tablelayoutpanelGeneral.Controls | ? { $_ -is [System.Windows.Forms.Checkbox] -and $_.Name -eq $textbox.Name })) { $c = $checkbox }
			
			if ($c.Font.Bold) # required variables have bold set
			{
				if ($textbox.Text -ne "")
				{
					#$script:Variable.Installer.Variable | ? { $_.Name -eq $textbox.Name } | %{ $_.Value = $textbox.text }
					if ($script:variable.SelectSingleNode("//Installer/Variable[@Name='$($Textbox.Name)']") -ne $null)
					{
						$script:variable.Installer.removeChild($script:variable.SelectSingleNode("//Installer/Variable[@Name='$($Textbox.Name)']"))
					}
					$newVar = $script:Variable.CreateElement("Variable")
					$newVar.Setattribute("Name", $textbox.Name)
					$newVar.Setattribute("Value", $textbox.Text)
					$script:Variable.Installer.AppendChild($newVar)
				}
				else
				{
					$save = $false
					$textbox.BackColor = "LightPink"
					$textbox.Add_TextChanged($changeTextboxColor)
				}
			}
			elseif ($c.Checked -and $textbox.text -ne "")
			{
				if ($script:variable.SelectSingleNode("//Installer/Variable[@Name='$($Textbox.Name)']") -ne $null)
				{
					$script:variable.Installer.removeChild($script:variable.SelectSingleNode("//Installer/Variable[@Name='$($Textbox.Name)']"))
				}
				$newVar = $script:Variable.CreateElement("Variable")
				$newVar.Setattribute("Name", $textbox.Name)
				$newVar.Setattribute("Value", $textbox.Text)
				$script:Variable.Installer.AppendChild($newVar)
			}
			
		}
		if ($save)
		{
			Save-DeploymentScenario
		}
		
	}
	function UpdateNavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Validate-WizardPage $tabcontrolWizard.SelectedTab
		$buttonscriptStr_Next.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonscriptStr_Back.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonscriptStr_Finish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting = [System.Windows.Forms.TabControlCancelEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting = [System.Windows.Forms.TabControlCancelEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage.
		# Users can move back without validating
		if ($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for ($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Validate-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if ($_.Cancel)
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		UpdateNavButtons
	}
	
	$buttonscriptStr_Back_Click = {
		#Go to the previous tab page
		if ($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonscriptStr_Next_Click = {
		#Go to the next tab page
		if ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}
	}
	$changeTextboxColor = {
		$this.BackColor = "White"
	}
	
	#endregion
	
	$formPDTGUI_Load = {
		UpdateNavButtons
		
		$script:SQLServerVersions = $script:Workflow.Installer.SQL.SQL.Version
		
		$formPDTGUI.Text = "PDT GUI - $($script:Workflow.'#Comment'[0])"
		
		
	}
	$buttonSaveDomainChanges_Click = {
		
		$save = $true
		foreach ($textbox in $($tabpageDomain.Controls | ? { $_ -is [System.Windows.Forms.TextBox] }))
		{
			if ($textbox.text -eq "")
			{
				$textbox.backcolor = "lightpink"
				$textbox.add_TextChanged($changeTextboxColor)
				$save = $false
			}
		}
		if ($save)
		{
			$domain = $script:variable.SelectSingleNode("//Installer/VMs/Domain")
			$domain.name = $TextboxDomainName.Text
			$domain.GroupOU = $textboxGroupOU.Text
			$domain.ServiceAccountOU = $textboxServiceAccountOU.Text
			Save-DeploymentScenario
			
		}
	}
	$checkboxscriptStr_DomainCrea_CheckedChanged = {
		
		$buttonSaveDomainChanges.Enabled = $checkboxscriptStr_DomainCrea.Checked
		if (!$this.checked)
		{
			foreach ($textbox in $($tabpageDomain.Controls | ? { $_ -is [System.Windows.Forms.TextBox] }))
			{
				$textbox.Enabled = $false
			}
			$script:variable.Installer.VMs.RemoveChild($script:variable.installer.VMs.Domain)
			Save-DeploymentScenario
		}
		else
		{
			
			foreach ($textbox in $($tabpageDomain.Controls | ? { $_ -is [System.Windows.Forms.TextBox] }))
			{
				$textbox.Enabled = $true
			}
			$domain = $script:variable.SelectSingleNode("//Installer/VMs/Domain")
			if ($domain -eq $null)
			{
				$domain = $script:variable.CreateElement("Domain")
				$name = $script:variable.CreateElement("Name")
				$serviceAccountOU = $script:variable.CreateElement("ServiceAccountOU")
				$GroupOU = $script:variable.CreateElement("GroupOU")
				$domain = $script:variable.Installer.VMs.AppendChild($domain)
				$domain.AppendChild($name)
				$domain.AppendChild($serviceAccountOU)
				$domain.AppendChild($GroupOU)
				#Save-DeploymentScenario
			}
			
		}
	}
	
	
	$treeviewDefaultVMSetting_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
		$tablelayoutpanelDefaultVMSetting.Controls.Clear()
		$tablelayoutpanelDefaultVMSetting.VerticalScroll.Value = 0
		$tablelayoutpanelDefaultVMSetting.SuspendLayout()
		$script:Variable.SelectNodes("//Installer/VMs/$($treeviewDefaultVMSetting.SelectedNode.FullPath)//text()") | %{
			$label = New-Object System.Windows.Forms.Label
			$label.Text = $_.ParentNode.Name
			$label.TextAlign = 'TopRight'
			$label.Dock = 'Fill'
			$tablelayoutpanelDefaultVMSetting.Controls.Add($label)
			
			$Textbox = New-Object System.Windows.Forms.TextBox
			$tablelayoutpanelDefaultVMSetting.Controls.Add($Textbox)
			$tablelayoutpanelDefaultVMSetting.SetColumnSpan($Textbox, 2)
			$Textbox.Name = $_.ParentNode.Name
			$Textbox.Text = $_.Value
			$Textbox.Dock = 'Fill'
			$Textbox = Add-ValidationBlockToControl -Control $Textbox
			
			$xmlPath = Get-XMLPath $_
			$Textbox.Name = $xmlPath
			
			
		}
		$tablelayoutpanelDefaultVMSetting.ResumeLayout($true)
	}
	$buttonDefaultVMSettingSave_Click = {
		foreach ($textbox in $($tablelayoutpanelDefaultVMSetting.Controls | ? { $_ -is [System.Windows.Forms.TextBox] -or $_ -is [System.Windows.Forms.Combobox] -or $_ -is [System.Windows.forms.DomainUpDown] }))
		{
			$FullPathtoDefault = $textbox.Name -replace "_", "/"
			
			if ($FullPathtoDefault -match "Maximum$")
			{
				
				$fullpathtoMinimum = $FullPathtoDefault -replace "Maximum", "Minimum"
				
				$fullpathtoStartUp = $FullPathtoDefault -replace "Maximum", "Startup"
				
				$max = $textbox.text
				$min = [int]$script:Variable.SelectSingleNode("//Installer/VMs/Default/$fullpathtoMinimum/text()").Value
				
				$startup = [int]$script:Variable.SelectSingleNode("//Installer/VMs/Default/$fullpathtoStartUp/text()").Value
				if (($min -gt $max) -or ($startup -gt $max))
				{
					
					$errorprovider1.SetError($textbox, "The maximum memory cannot be lower than the minimum or startup")
				}
				else
				{
					$errorprovider1.SetError($textbox, "")
				}
				
			}
			$script:Variable.SelectSingleNode("//Installer/VMs/Default/$FullPathToDefault").Set_InnerText($textbox.Text)
		}
		save-DeploymentScenario
	}
	function Get-XMLPathVM ()
	{
		param (
			[System.Xml.XmlNode]$Node
		)
		# This function gets the full path from the config element to
		while ($Node.ParentNode.Name -ne "VM")
		{
			
			$search = $Node.ParentNode
			if ($nfirst)
			{
				$xmlPath = $search.Name + '_' + $xmlPath
			}
			else
			{
				$xmlPath = $search.Name
				$nfirst = $true
			}
			$node = $search
		}
		return $xmlPath
	}
	function Get-XMLPath ()
	{
		param (
			[System.Xml.XmlNode]$Node
		)
		# This function gets the full path from the config element to
		while ($Node.ParentNode.Name -ne "Default")
		{
			
			$search = $Node.ParentNode
			if ($nfirst)
			{
				$xmlPath = $search.Name + '_' + $xmlPath
			}
			else
			{
				$xmlPath = $search.Name
				$nfirst = $true
			}
			$node = $search
		}
		return $xmlPath
	}
	$buttonSaveDefVMSettings_Click = {
		
		$script:variable.SelectSingleNode("//Installer/VMs/$($treeviewDefaultVMSetting.SelectedNode.FullPath)").'#text' = $textboxDefVMSettingsValue.Text
		Save-DeploymentScenario
	}
	
	
	
	$buttonAddSetting_Click = {
		
		if ($script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/$($comboboxSettingNodeToAdd.Text)").count -eq 0)
		{
			$currentVMNode = $script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]")
			$currentVMNode.AppendChild($script:variable.selectSingleNode("Installer/VMs/Default/$($comboboxSettingNodeToAdd.Text)").Clone())
			Save-DeploymentScenario
			
			#refresh tree view
			$treeviewVMSettings.Nodes.Clear()
			$currentVMNode = $script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]")
			
			Fill-XMLNodesToTreeView -Element $currentVMNode -Tn $treeviewVMSettings
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("This setting node already exists", "Error", 'OK', 'Error')
		}
	}
	
	$buttonRemoveSetting_Click = {
		
		if ($treeviewVMSettings.SelectedNode.Parent -ne $null)
		{
			$currentVMNode = $script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/$($treeviewVMSettings.SelectedNode.Parent.FullPath)")
			$currentvmnode.removeChild($currentVMNode.SelectSingleNode("$($treeviewVMSettings.SelectedNode.Text)"))
		}
		else
		{
			$currentVMNode = $script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]")
			$currentvmnode.removeChild($currentVMNode.SelectSingleNode("$($treeviewVMSettings.SelectedNode.FullPath)"))
		}
		
		
		Save-DeploymentScenario
		
		#refresh tree view
		$treeviewVMSettings.Nodes.Clear()
		$currentVMNode = $script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]")
		$rootNode = New-Object System.Windows.Forms.TreeNode
		$rootNode.Text = $currentVMNode.get_name()
		
		Fill-XMLNodesToTreeView -Element $currentVMNode -Tn $treeviewVMSettings
	}
	
	$buttonRemoveVM_Click = {
		$InstancesInUse = $script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($listviewVMs.SelectedItems.SubItems.Text[1]).$($script:variable.Installer.VMs.Default.JoinDomain.Domain)']")
		$RolesInUse = $script:variable.SelectNodes("//Installer/Roles/Role[@Server='$($listviewVMs.SelectedItems.SubItems.Text[1]).$($script:variable.Installer.VMs.Default.JoinDomain.Domain)']")
		if ($InstancesInUse.Count -eq 0 -and $RolesInUse.Count -eq 0)
		{
			$script:variable.Installer.VMs.RemoveChild($script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]"))
			$script:variable.Installer.VMs.Count = [string]"$($listViewVMS.Items.Count-1)"
			
			#rewrite the 'count' values of the vm nodes
			1..$script:variable.Installer.VMs.Count | %{
				$script:variable.Installer.VMs.VM[$_ - 1].Count = "$_"
			}
			$listviewVMs.Items.Clear()
			$script:variable.Installer.VMs.VM | Sort-Object { [int]$_.Count } | %{ $listviewVMs.Items.Add($_.Count).SubItems.Add($_.VMName) }
			Save-DeploymentScenario
		}
		else
		{
			$InstancesInUse.Instance | %{ $MessageStrInstances += "$_`n" }
			$RolesInUse.Name | %{ $MessageStrRoles += "$_`n" }
			[void][System.Windows.Forms.MessageBox]::Show("This server is used by:`n`nInstances:`n$($MessageStrInstances)`nRoles:`n$($MessageStrRoles)", "Error - Cannot remove VM", 'OK', 'Error')
		}
	}
	
	$buttonAddVM_Click = {
		$newVM = $script:variable.CreateElement("VM")
		$newVM.SetAttribute("Count", $([int]$script:variable.Installer.VMs.Count + 1))
		$script:variable.Installer.VMs.AppendChild($newVM)
		$script:variable.Installer.VMs.Count = [String]$([int]$script:variable.Installer.VMs.Count + 1)
		$vmn = $script:variable.CreateElement("VMName")
		$vmn.Set_InnerText("NewVM")
		$newVM.AppendChild($vmn)
		#$listboxVMs.Items.Add("$($newVM.Count)-")
		$listviewVMs.Items.Add($newVM.Count).SubItems.Add("NewVM")
		Save-DeploymentScenario
	}
	
	$tabcontrolWizard_SelectedIndexChanged = {
		
		if ($tabcontrolWizard.SelectedTab -eq $tabpageSQL)
		{
			$comboboxSQLServers.Items.Clear()
			$comboboxSQLVersion.Items.Clear()
			
			$listviewSQLInstances.Items.Clear()
			if ($script:Variable.Installer.SQL.Instance -ne $null)
			{
				$script:variable.Installer.SQL.Instance | %{
					$li = New-Object System.Windows.Forms.ListViewItem
					$li.Text = $_.Server
					$li.SubItems.Add($_.Instance)
					$li.SubItems.Add($_.Version)
					$listviewSQLInstances.Items.Add($li)
				}
			}
			$comboboxSQLVersion.Items.AddRange($script:SQLServerVersions)
			$script:variable.Installer.VMs.VM.VMName | %{ $comboboxSQLServers.Items.Add("$_.$($script:variable.Installer.VMs.Default.JoinDomain.Domain)") }
		}
		elseif ($tabcontrolWizard.SelectedTab -eq $tabpageRoles)
		{
			$comboboxToServer.Items.clear()
			
			$listboxComponent.Items.Clear()
			$listboxComponent.Items.AddRange($script:Workflow.SelectNodes("//Installer/Components").component.name)
			$treeviewComponentsAndRoles.Nodes.Clear()
			$treeViewComponentsNODES = @()
			foreach ($component in $script:variable.Installer.Components.Component)
			{
				$treeViewComponentsNODES += $component.name #$($script:Workflow.SelectSingleNode("//Installer/Components/Component[@Name='$($component.Name)']").Name | Sort-Object -Unique)
			}
			$treeViewComponentsNODES | Sort-Object -Unique | %{
				$t = New-Object System.Windows.Forms.TreeNode
				$t.Text = $_
				$t.Name = $_
				$treeviewComponentsAndRoles.Nodes.Add($t)
			}
			
			foreach ($role in $script:variable.Installer.Roles.role)
			{
				$tn = $treeviewComponentsAndRoles.Nodes.Find($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($Role.Name)']").Component, $true)[0]
				if ($tn -ne $null)
				{
					$tn.nodes.add("$($role.Name)\$($Role.Server)")
				}
			}
			
			
			
		}
		elseif ($tabcontrolWizard.SelectedTab -eq $tabpageVMs)
		{
			if ($tabcontrolSubVMs.SelectedTab -eq $tabpageDomain -and $checkboxscriptStr_DomainCrea.Checked)
			{
				[void][System.Windows.Forms.MessageBox]::Show("The first deployed VM will automatically be the Domain Controller", "Warning", 'OK', 'Warning')
			}
		}
		elseif ($tabcontrolWizard.SelectedTab -eq $tabpageSelectFile)
		{
			$listviewSelectVariableFile.Items.Clear()
			$xmlfilesFolders = dir -Directory -Exclude "Extenders"
			foreach ($folder  in $xmlfilesFolders)
			{
				$file = Join-Path $folder.FullName "variable.xml"
				if (Test-Path $file)
				{
					$si = $([xml](Get-Content $file)).'#comment'
					if ($si -eq $null) { $si = "No description, add a comment to $($file) that describe the deployment scenario" }
					$listviewSelectVariableFile.Items.Add($folder.Name).SubItems.Add($si)
				}
			}
			
		}
		elseif ($tabcontrolWizard.SelectedTab -eq $tabpageVariable)
		{
			
			$formPDTGUI.ValidateChildren()
		}
	}
	
	$buttonscriptStr_SQLAddInst_Click = {
		
		if ($script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($comboboxSQLServers.Text)'][@Instance='$($textboxSQLInstanceName.Text)']").Count -eq 0)
		{
			if (($comboboxSQLServers.Text -ne "") -and ($textboxSQLInstanceName.Text -ne "") -and ($comboboxSQLVersion.Text -ne ""))
			{
				$newInstance = $script:variable.CreateElement("Instance")
				$newInstance.SetAttribute("Server", $comboboxSQLServers.Text)
				$newInstance.SetAttribute("Instance", $textboxSQLInstanceName.Text)
				$newInstance.SetAttribute("Version", $comboboxSQLVersion.Text)
				$script:variable.SelectSingleNode("//Installer/SQL").AppendChild($newInstance)
				$li = New-Object System.Windows.Forms.ListViewItem
				$li.Text = $comboboxSQLServers.Text
				$li.SubItems.Add($textboxSQLInstanceName.Text)
				$li.SubItems.Add($comboboxSQLVersion.Text)
				
				$listviewSQLInstances.Items.Add($li)
				Save-DeploymentScenario
			}
			else
			{
				[void][System.Windows.Forms.MessageBox]::Show("Empty values not allowed", "Error", 'OK', 'Error')
			}
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("This Instance already exists", "Error", 'OK', 'Error')
		}
	}
	
	$buttonscriptStr_SQLSaveCha_Click = {
		
		if ($script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($comboboxSQLServers.Text)'][@Instance='$($textboxSQLInstanceName.Text)']").Count -eq 0)
		{
			if (($comboboxSQLServers.Text -ne "") -and ($textboxSQLInstanceName.Text -ne "") -and ($comboboxSQLVersion.Text -ne ""))
			{
				$tmp = $listviewSQLInstances.SelectedItems.SubItems.Text
				$InstanceToChange = $script:variable.SelectSingleNode("//Installer/SQL/Instance[@Server='$($tmp[0])'][@Instance='$($tmp[1])']")
				
				$script:variable.selectNodes("//Installer/Roles/Role[@Server='$($tmp[0])'][@Instance='$($tmp[1])']") | %{
					$_.SetAttribute("Instance", $textboxSQLInstanceName.Text)
					$_.SetAttribute("Server", $comboboxSQLServers.Text)
					$_.SetAttribute("Version", $comboboxSQLVersion.Text)
				}
				
				$InstanceToChange.SetAttribute("Server", $comboboxSQLServers.Text)
				$InstanceToChange.SetAttribute("Instance", $textboxSQLInstanceName.Text)
				$InstanceToChange.SetAttribute("Version", $comboboxSQLVersion.Text)
				
				Save-DeploymentScenario
				$listviewSQLInstances.SelectedItems.SubItems[0].Text = $comboboxSQLServers.Text
				$listviewSQLInstances.SelectedItems.SubItems[1].Text = $textboxSQLInstanceName.Text
				$listviewSQLInstances.SelectedItems.SubItems[2].Text = $comboboxSQLVersion.Text
			}
			else
			{
				[void][System.Windows.Forms.MessageBox]::Show("Empty values not allowed", "Error", 'OK', 'Error')
			}
		}
		else
		{
			
			[void][System.Windows.Forms.MessageBox]::Show("This Instance already exists", "Error", 'OK', 'Error')
		}
	}
	
	$buttonscriptStr_SQLRemoveS_Click = {
		
		if ($listviewSQLInstances.SelectedItems -ne $null)
		{
			if ($script:variable.SelectNodes("//Installer/Roles/Role[@Server='$($listviewSQLInstances.SelectedItems.SubItems[0].Text)'][@Instance='$($listviewSQLInstances.SelectedItems.SubItems[1].Text)']").count -eq 0)
			{
				$script:variable.Installer.SQL.RemoveChild($script:variable.selectSingleNode("//Installer/SQL/Instance[@Server='$($listviewSQLInstances.SelectedItems.SubItems[0].Text)'][@Instance='$($listviewSQLInstances.SelectedItems.SubItems[1].Text)']"))
				Save-DeploymentScenario
				$listviewSQLInstances.Items.Remove($listviewSQLInstances.SelectedItems[0])
			}
			else
			{
				$RolesInUse = $script:variable.SelectNodes("//Installer/Roles/Role[@Server='$($listviewSQLInstances.SelectedItems.SubItems[0].Text)'][@Instance='$($listviewSQLInstances.SelectedItems.SubItems[1].Text)']")
				$RolesInUse.Name | %{ $MessageStrRoles += "$_`n" }
				[void][System.Windows.Forms.MessageBox]::Show("Cannot remove this Instance because it is in use by`n$MessageStrRoles", "Error", 'OK', 'Error')
			}
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("No instance was selected", "Error", 'OK', 'Error')
		}
		
	}
	
	$buttonscriptStr_SQLSaveIns_Click = {
		write-host $comboboxSQLServers.Text
		Write-Host $textboxSQLInstanceName.Text
		if ($script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($comboboxSQLServers.Text)'][@Instance='$($textboxSQLInstanceName.Text)']").Count -eq 1)
		{
			$script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($comboboxSQLServers.Text)'][@Instance='$($textboxSQLInstanceName.Text)']/Variable") | %{ $_.ParentNode.RemoveChild($_) }
			foreach ($control  in $tablelayoutpanelSQLVariables.Controls)
			{
				if ($control -is [System.Windows.Forms.CheckBox])
				{
					if ($control.Checked)
					{
						$newVariableNode = $script:variable.CreateElement("Variable")
						$newVariableNode.SetAttribute("Name", $control.Text)
						$newVariableNode.SetAttribute("Value", $($tablelayoutpanelSQLVariables.Controls.Find("$($control.Text)", $false)[0].Text))
						$script:variable.SelectSingleNode("//Installer/SQL/Instance[@Server='$($comboboxSQLServers.Text)'][@Instance='$($textboxSQLInstanceName.Text)']").appendChild($newVariableNode)
					}
				}
			}
			Save-DeploymentScenario
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("The selected Instance does not exist", "Error", 'OK', 'Error')
		}
	}
	
	$listboxComponent_SelectedIndexChanged = {
		
		$listboxRole.Items.Clear()
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
		$listboxRole.Items.AddRange($($script:Workflow.SelectNodes("//Installer/Roles/Role[@Component='$($listboxComponent.Text)']") | ? { $_.Type -ne "Integration" } | Select-Object -ExpandProperty Name))
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Continue
		$script:ComponenttoAdd = $listboxComponent.Text
	}
	
	$buttonscriptStr_RolesAddSe_Click = {
		$script:MessageShown = $false
		if ($comboboxToServer.Text -ne "")
		{
			$comboboxToServer.Text -match "([^\.\s]+\.co\.[^\.\s]+$)|([^\.\s]+\.[^\.\s]+$)"
			if ($matches[0] -eq $script:variable.Installer.VMs.Default.JoinDomain.Domain)
			{
				if (($script:variable.Installer.VMs.VM.vmname -contains ($comboboxToServer.Text.Split(".")[0])) -and ($comboboxToServer.Text -match "(?=^.{4,255}$)(^((?!-)[a-zA-Z0-9-]{1,63}(?<!-)\.)+[a-zA-Z]{2,63}$)"))
				{
					add-role -role $listboxRole.Text -toServer $comboboxToServer.Text
				}
				elseif ($checkboxscriptStr_RolesDisab.Checked)
				{
					add-role -role $listboxRole.Text -toServer $comboboxToServer.Text
				}
				else
				{
					[void][System.Windows.Forms.MessageBox]::Show("The selected server is not available in the VM list or the machine name is not a valid FQDN", "Error", 'OK', 'Error')
				}
			}
			else
			{
				[void][System.Windows.Forms.MessageBox]::Show("The Domain name is not correct.", "Error", 'OK', 'Error')
			}
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("Please select a server from the server list.", "Error", 'OK', 'Error')
		}
		$comboboxToServer.Text = ""
	}
	function add-role
	{
		param (
			$role,
			$toServer
		)
		$valid = $True
		if (($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").validation.multiple -eq $null) -and $role -ne "")
		{
			
			if ($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").Dependency -ne $null)
			{
				foreach ($dependency in $script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").Dependency.Name)
				{
					if ($script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($dependency)']") -eq $null)
					{
						
						[void][System.Windows.Forms.MessageBox]::Show("Please add $dependency first.", "Dependencies not met", 'OK', 'Warning')
						return $false
						#$valid = add-role -role $dependency -toServer $toServer
					}
				}
			}
			#get roles on server and check if it matches with combination, if not then give a message
			
			$nodesToValidate = $script:variable.SelectNodes("//Installer/Roles/Role[@Server='$toServer']")
			
			$RoleCombinationsToCheck = $script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$role']")
			
			$CombinationValid = $true
			$notSupportedRoles = @()
			if (!$checkboxscriptStr_RolesDisab.Checked)
			{
				foreach ($n in $nodesToValidate)
				{
					if ($RoleCombinationsToCheck.Validation.Combinations.Combination -notcontains $n.Name)
					{
						$notSupportedRoles += $n.Name
						$CombinationValid = $false
					}
				}
			}
			if (!$CombinationValid)
			{
				[void][System.Windows.Forms.MessageBox]::Show("There some unsupported role combinations:`n$notSupportedRoles", "Role combinations are invalid", 'OK', 'Error')
				return $false
			}
			if ($treeviewComponentsAndRoles.Nodes.Find($script:ComponenttoAdd, $true)[0] -eq $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show("The Component $($script:ComponenttoAdd) will be added.", "Info", 'OK', 'Information')
				$nodeClone = $script:Workflow.SelectSingleNode("//Installer/Components/Component[@Name='$($script:ComponenttoAdd)']").CloneNode($true)
				$impNode = $script:variable.ImportNode($nodeClone, $True)
				
				$impNode.SelectNodes("Variable[not(@Required)]") | %{ $impNode.removeChild($_) }
				
				$script:variable.SelectSingleNode("//Installer/Components").AppendChild($impNode)
				$t = New-Object System.Windows.Forms.TreeNode
				$t.Name = $script:ComponenttoAdd
				$t.Text = $script:ComponenttoAdd
				$treeviewComponentsAndRoles.Nodes.Add($t)
				
			}
			$script:variable.SelectNodes("//Installer/Roles/Role[@Server='$toServer']")
			$roleNode = $script:variable.CreateElement("Role")
			$roleNode.SetAttribute("Name", $role)
			$roleNode.SetAttribute("Server", "$toServer")
			if ($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").SQL -eq "True")
			{
				$roleNode.SetAttribute("Server", "$toServer")
				$roleNode.SetAttribute("Instance", $script:variable.Installer.SQL.Instance[-1].Instance)
			}
			$script:variable.SelectSingleNode("//Installer/Roles").AppendChild($roleNode)
			$tn = $treeviewComponentsAndRoles.Nodes.Find($listboxComponent.Text, $true)[0]
			$tn.nodes.add("$($role)\$($roleNode.Server)")
			Save-DeploymentScenario
		}
		elseif (($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").validation.multiple -ne $null) -and ($script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']") -eq $null) -and ($role -ne ""))
		{
			
			if ($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").Dependency -ne $null)
			{
				foreach ($dependency in $script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").Dependency.Name)
				{
					if ($script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($dependency)']") -eq $null)
					{
						
						[void][System.Windows.Forms.MessageBox]::Show("Please add $dependency first.", "Dependencies not met", 'OK', 'Warning')
						return $false
						#$valid = add-role -role $dependency -toServer $toServer
					}
				}
			}
			
			
			$nodesToValidate = $script:variable.SelectNodes("//Installer/Roles/Role[@Server='$toServer']")
			
			$RoleCombinationsToCheck = $script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$role']")
			
			$CombinationValid = $true
			$notSupportedRoles = @()
			if (!$checkboxscriptStr_RolesDisab.Checked)
			{
				foreach ($n in $nodesToValidate)
				{
					if ($RoleCombinationsToCheck.Validation.Combinations.Combination -notcontains $n.Name)
					{
						$notSupportedRoles += $n.Name
						$CombinationValid = $false
					}
				}
			}
			if (!$CombinationValid)
			{
				[void][System.Windows.Forms.MessageBox]::Show("There some unsupported role combinations:`n$notSupportedRoles", "Role combinations are invalid", 'OK', 'Error')
				return $false
			}
			
			if ($treeviewComponentsAndRoles.Nodes.Find($script:ComponenttoAdd, $true)[0] -eq $null)
			{
				[void][System.Windows.Forms.MessageBox]::Show("The Component $($script:ComponenttoAdd) will be added.", "Info", 'OK', 'Information')
				$nodeClone = $script:Workflow.SelectSingleNode("//Installer/Components/Component[@Name='$($script:ComponenttoAdd)']").CloneNode($true)
				$impNode = $script:variable.ImportNode($nodeClone, $True)
				$impNode.SelectNodes("Variable[not(@Required)]") | %{ $impNode.removeChild($_) }
				$script:variable.SelectSingleNode("//Installer/Components").AppendChild($impNode)
				$t = New-Object System.Windows.Forms.TreeNode
				$t.Name = $script:ComponenttoAdd
				$t.Text = $script:ComponenttoAdd
				$treeviewComponentsAndRoles.Nodes.Add($t)
				
			}
			$roleNode = $script:variable.CreateElement("Role")
			$roleNode.SetAttribute("Name", $role)
			$roleNode.SetAttribute("Server", "$toServer")
			if ($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($role)']").SQL -eq "True")
			{
				$roleNode.SetAttribute("Server", "$toServer")
				$roleNode.SetAttribute("Instance", $script:variable.Installer.SQL.Instance[-1].Instance)
			}
			$script:variable.SelectSingleNode("//Installer/Roles").AppendChild($roleNode)
			$tn = $treeviewComponentsAndRoles.Nodes.Find($listboxComponent.Text, $true)[0]
			$tn.nodes.add("$($role)\$($roleNode.Server)")
			Save-DeploymentScenario
			
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("Only one instance of this role is allowed", "Error", 'OK', 'Error')
		}
		return $true
	}
	$listviewSQLInstances_SelectedIndexChanged = {
		
		$tablelayoutpanelSQLVariables.SuspendLayout()
		
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
		$tmp = $listviewSQLInstances.SelectedItems.SubItems.Text
		$comboboxSQLServers.Text = ""
		$comboboxSQLServers.Text = $tmp[0]
		$textboxSQLInstanceName.Text = ""
		$textboxSQLInstanceName.Text = $tmp[1]
		$comboboxSQLVersion.Text = ""
		$comboboxSQLVersion.Text = $tmp[2]
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Continue
		$CurrentInstance = $script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($comboboxSQLServers.Text)'][@Instance='$($textboxSQLInstanceName.Text)']")
		$tablelayoutpanelSQLVariables.Controls.Clear()
		$script:Workflow.SelectSingleNode("Installer/SQL/SQL[@Version='$($comboboxSQLVersion.Text)']").Variable | %{
			$Checkbox = New-Object System.Windows.Forms.CheckBox
			$Checkbox.Text = $_.Name
			$Checkbox.Dock = 'Top'
			$Checkbox.Name = "Checkbox_$($_.Name)"
			
			$Textbox = New-Object System.Windows.Forms.Textbox
			$Textbox.Name = "$($_.Name)"
			$Textbox.Width = 220
			$tablelayoutpanelSQLVariables.Controls.Add($Checkbox)
			
			$tablelayoutpanelSQLVariables.Controls.Add($Textbox)
			$tablelayoutpanelSQLVariables.SetColumnSpan($Textbox, 2)
			if ($_.Required -eq "True")
			{
				
				$Checkbox.Checked = $true
				$Checkbox.Enabled = $false
				$checkbox.Font = "Arial, 8.25pt, style=Bold"
			}
			
			$Checkbox.add_CheckedChanged($checkbox_toggleValidationAutoDetect)
		}
		foreach ($var in $CurrentInstance.Variable)
		{
			
			$cb = $tablelayoutpanelSQLVariables.Controls.Find("Checkbox_$($var.Name)", $false)
			$tb = $tablelayoutpanelSQLVariables.Controls.Find("$($var.Name)", $false)
			$tb[0].text = $var.Value
			$cb[0].Checked = $true
		}
		
		foreach ($Checkbox in $($tablelayoutpanelSQLVariables.control | ? { $_ -is [system.Windows.Forms.CheckBox] -and $_.Checked -eq $true }))
		{
			$Textbox = $tablelayoutpanelSQLVariables.Controls.Find($Checkbox.Text, $false)
			Add-ValidationBlockToControl -Control $Textbox -AutoMatchValidationType
		}
		if ($tablelayoutpanelSQLVariables.VerticalScroll.Visible)
		{
			$tablelayoutpanelSQLVariables.Size.Width = $tablelayoutpanelSQLVariables.Size.Width - 30
			
		}
		$tablelayoutpanelSQLVariables.ResumeLayout()
		$formPDTGUI.ValidateChildren()
	}
	$treeviewComponentsAndRoles_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		$tablelayoutpanelComponentAndRoleSettings.SuspendLayout()
		if ($treeviewComponentsAndRoles.SelectedNode.Parent -eq $null)
		{
			$tablelayoutpanelComponentAndRoleSettings.Controls.Clear()
			$script:Workflow.SelectSingleNode("//Installer/Components/Component[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text)']").Variable | %{
				$checkbox = New-Object System.Windows.Forms.Checkbox
				$checkbox.Text = $_.Name
				$checkbox.CheckAlign = 'MiddleRight'
				if ($_.Required -eq "True")
				{
					$checkbox.Checked = $true
					$checkbox.Enabled = $false
					$checkbox.Font = "Arial, 8.25pt, style=Bold"
				}
				$checkbox.TextAlign = 'MiddleRight'
				$checkbox.Dock = 'Top'
				$textbox = New-Object System.Windows.Forms.TextBox
				$textbox.Text = $script:variable.SelectSingleNode("//Installer/Components/Component[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text)']/Variable[@Name='$($_.Name)']").Value
				
				$textbox.Name = $_.Name
				$textbox.Dock = 'Fill'
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($checkbox)
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($textbox)
				$tablelayoutpanelComponentAndRoleSettings.SetColumnSpan($textbox, 2)
				if ($script:variable.SelectSingleNode("//Installer/Components/Component[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text)']/Variable[@Name='$($_.Name)']").Value -ne $null)
				{
					
					$checkbox.Checked = $true
					Add-ValidationBlockToControl -AutoMatchValidationType -Control $textbox
				}
				else
				{
					$checkbox.Checked = $false
				}
				$checkbox.add_CheckedChanged($checkbox_toggleValidationAutoDetect)
				
				
			}
		}
		else
		{
			$tablelayoutpanelComponentAndRoleSettings.Controls.Clear()
			if ($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[0])']").SQL -eq "True")
			{
				
				$label = New-Object System.Windows.Forms.Label
				$label.Text = "Server"
				$label.TextAlign = 'MiddleRight'
				$label.Dock = 'Top'
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($label)
				$Combobox = New-Object System.Windows.Forms.Combobox
				$Combobox.Items.AddRange($script:variable.Installer.SQL.Instance.server)
				$Combobox.add_SelectedIndexChanged($FillInstancesToCombobox)
				$Combobox.Text = $script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[0])'][@Server='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[1])']").Server
				$Combobox.Name = "Server"
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($Combobox)
				$tablelayoutpanelComponentAndRoleSettings.SetColumnSpan($Combobox, 2)
				$label = New-Object System.Windows.Forms.Label
				$label.Text = "Instance"
				$label.TextAlign = 'MiddleRight'
				$label.Dock = 'Fill'
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($label)
				$comboboxInstances = New-Object System.Windows.Forms.Textbox
				$comboboxInstances.Name = "Instance"
				$comboboxInstances.Text = $script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[0])'][@Server='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[1])']").Instance
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($comboboxInstances)
				
				
			}
			else
			{
				$label = New-Object System.Windows.Forms.Label
				$label.Text = "Server"
				$label.TextAlign = 'MiddleRight'
				$label.Dock = 'Top'
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($label)
				$combobox = New-Object System.Windows.Forms.ComboBox
				
				$script:variable.Installer.VMs.VM.VMName | %{ $combobox.Items.Add("$_.$($script:variable.Installer.VMs.Default.JoinDomain.Domain)") }
				$combobox.add_SelectedIndexChanged($FillInstancesToCombobox)
				$combobox.Text = $script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[0])'][@Server='$($treeviewComponentsAndRoles.SelectedNode.Text.split("\")[1])']").Server
				$combobox.Name = "Server"
				$tablelayoutpanelComponentAndRoleSettings.Controls.Add($combobox)
			}
			
		}
		$tablelayoutpanelComponentAndRoleSettings.ResumeLayout()
	}
	$FillInstancesToCombobox = {
		
		$cb = $tablelayoutpanelComponentAndRoleSettings.Controls.Find("Instance", $true)[0]
		if ($cb -ne $null)
		{
			$cb.Items.Clear()
			$cb.Items.AddRange($script:variable.SelectNodes("//Installer/SQL/Instance[@Server='$($this.Text)']").instance)
		}
		
	}
	$buttonSaveValuesCR_Click = {
		
		if ($treeviewComponentsAndRoles.SelectedNode.Parent -eq $null)
		{
			$script:variable.SelectNodes("//Installer/Components/Component[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text)']/Variable") | %{ $_.ParentNode.RemoveChild($_) }
			foreach ($checkbox in $($tablelayoutpanelComponentAndRoleSettings.Controls | ? { $_ -is [System.Windows.Forms.Checkbox] }))
			{
				if ($checkbox.Checked)
				{
					$cTextbox = $($tablelayoutpanelComponentAndRoleSettings.Controls | ? { $_ -is [System.Windows.Forms.Textbox] -and $_.Name -eq $checkbox.Text })
					$newVarElement = $script:variable.createElement("Variable")
					$newVarElement.SetAttribute("Name", $checkbox.Text)
					$newVarElement.SetAttribute("Value", $cTextbox.Text)
					$currentComponent = $script:variable.SelectSingleNode("//Installer/Components/Component[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text)']")
					$currentComponent.AppendChild($newVarElement)
					
				}
			}
			
		}
		else
		{
			foreach ($combobox in $($tablelayoutpanelComponentAndRoleSettings.Controls | ? { $_ -is [System.Windows.Forms.ComboBox] }))
			{
				$nodeToSave = $treeviewComponentsAndRoles.SelectedNode.Text.Split("\")
				
				if ($combobox.name -eq "Server")
				{
					$nodesToValidate = $script:variable.SelectNodes("//Installer/Roles/Role[@Server='$($combobox.TExt)']")
					
					$RoleCombinationsToCheck = $script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($nodeToSave[0])']")
					
					$CombinationValid = $true
					$notSupportedRoles = ""
					if (!$checkboxscriptStr_RolesDisab.checked)
					{
						foreach ($n in $nodesToValidate)
						{
							if ($RoleCombinationsToCheck.Validation.Combinations.Combination -notcontains $n.Name -and $n.Name -ne $nodeToSave[0])
							{
								$notSupportedRoles += "$($n.Name)`n"
								$CombinationValid = $false
							}
						}
					}
					if (!$CombinationValid)
					{
						[void][System.Windows.Forms.MessageBox]::Show("There some unsupported role combinations:`n$notSupportedRoles", "Role combinations are invalid", 'OK', 'Error')
						$combobox.Text = $nodeToSave[1]
					}
					else
					{
						$treeviewComponentsAndRoles.SelectedNode.Text = "$($nodeToSave[0])\$($combobox.text)"
						$script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($nodeToSave[0])'][@Server='$($nodeToSave[1])']").SetAttribute($($combobox.Name), $combobox.text)
					}
				}
				elseif ($combobox.name -eq "Instance")
				{
					if ($script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($nodeToSave[0])'][@Server='$($nodeToSave[1])'][@Instance='$($combobox.text)']") -ne $null)
					{
						$treeviewComponentsAndRoles.SelectedNode.Text = "$($nodeToSave[0])\$($combobox.text)"
						$script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($nodeToSave[0])'][@Server='$($nodeToSave[1])']").SetAttribute($($combobox.Name), $combobox.text)
					}
					else
					{
						[void][System.Windows.Forms.MessageBox]::Show("The Server $($nodeToSave[1]) has not an instance called $($combobox.text) ", "Error", 'OK', 'Error')
					}
				}
				else
				{
					#$treeviewComponentsAndRoles.SelectedNode.Text = "$($nodeToSave[0])\$($combobox.text)"
					$script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($nodeToSave[0])'][@Server='$($nodeToSave[1])']").SetAttribute($($combobox.Name), $combobox.text)
				}
				
				
			}
			
		}
		Save-DeploymentScenario
	}
	
	$buttonscriptStr_RolesRemov_Click = {
		
		if ($treeviewComponentsAndRoles.SelectedNode.Parent -ne $null)
		{
			$nodetoRemove = $treeviewComponentsAndRoles.SelectedNode.Text.Split("\")
			$dependency = $script:Workflow.SelectSingleNode("//Installer/Roles/Role/Dependency[@Name='$($nodeToRemove[0])']").parentnode.name
			
			if ($script:variable.SelectNodes("//Installer/Roles/Role[@Name='$dependency']").count -eq 0)
			{
				$tablelayoutpanelComponentAndRoleSettings.Controls.Clear()
				$script:variable.Installer.Roles.RemoveChild($script:variable.SelectSingleNode("//Installer/Roles/Role[@Name='$($nodeToRemove[0])'][@Server='$($NodeToRemove[1])']"))
				Save-DeploymentScenario
				$treeviewComponentsAndRoles.Nodes.Remove($treeviewComponentsAndRoles.SelectedNode)
			}
			else
			{
				#[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
				[void][System.Windows.Forms.MessageBox]::Show("Could not remove $($nodeToRemove[0]) because $dependency is dependent of it.", "Error", 'OK', 'Error')
			}
		}
		else
		{
			
			[void][System.Windows.Forms.MessageBox]::Show("This is not a role`nIt´s not necessary to remove components.", "Error", 'OK', 'Error')
		}
	}
	
	$buttonscriptStr_RunValidat_Click = {
		$sd = Get-ScriptDirectory
		#Set-ExecutionPolicy -Scope 'CurrentUser' -ExecutionPolicy 'RemoteSigned'
		Start-Process powershell.exe -Verb runas -ArgumentList (" -noprofile -noexit -file `"installer.ps1`" -path `"$sd`" -ValidateOnly")
	}
	
	$listboxRole_SelectedIndexChanged = {
		
		$comboboxToServer.Items.Clear()
		
		if ($script:Workflow.SelectSingleNode("//Installer/Roles/Role[@Name='$($listboxRole.Text)']").SQL -eq "True")
		{
			$comboboxToServer.Items.AddRange($script:variable.Installer.SQL.Instance.server)
		}
		else
		{
			$script:variable.Installer.VMs.VM.VMName | %{ $comboboxToServer.Items.Add("$_.$($script:variable.Installer.VMs.Default.JoinDomain.Domain)") }
		}
		$comboboxToServer.Text = ""
	}
	
	$linklabelHttpgallerytechnetmi_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		& start "$($linklabelHttpgallerytechnetmi.Text)"
	}
	
	$buttonRemoveSelectedCompon_Click = {
		#TODO: Place custom script here
		if ($treeviewComponentsAndRoles.SelectedNode.Parent -eq $null -and $treeviewComponentsAndRoles.SelectedNode.Nodes.Count -eq 0)
		{
			$script:variable.Installer.Components.removeChild($script:variable.SelectSingleNode("//Installer/Components/Component[@Name='$($treeviewComponentsAndRoles.SelectedNode.Text)']"))
			Save-DeploymentScenario
			$treeviewComponentsAndRoles.Nodes.Remove($treeviewComponentsAndRoles.SelectedNode)
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("This component has roles and cannot be removed", "Error", 'OK', 'Error')
		}
		
	}
	
	$picturebox1_Click = {
		& start "http://www.elanity.de"
	}
	
	$picturebox2_Click = {
		& start "https://mvp.microsoft.com/en-us/mvp/Benedict%20Berger-5000270"
	}
	
	$tabcontrolSubVMs_SelectedIndexChanged = {
		if ($tabcontrolSubVMs.SelectedTab -eq $tabpageVMSettings)
		{
			$listviewVMs.Items.Clear()
			$script:variable.Installer.VMs.VM | Sort-Object { [int]$_.Count } | %{ $listviewVMs.Items.Add($_.Count).SubItems.Add($_.VMName) }
		}
		
		
	}
	
	$listviewVMs_SelectedIndexChanged = {
		#TODO: Place custom script here
		$tablelayoutpanelVMSettings.Controls.Clear()
		if ($listviewVMs.SelectedItems -ne $null)
		{
			if ($listViewVMs.SelectedItems.SubItems.Text -ne "")
			{
				$treeviewVMSettings.Nodes.Clear()
				$VMCount = $listviewVMs.SelectedItems.SubItems.Text[0]
				
				$currentVMNode = $script:variable.selectSingleNode("//Installer/VMs/VM[@Count=$($VMCount)]")
				$rootNode = New-Object System.Windows.Forms.TreeNode
				$rootNode.Text = $currentVMNode.get_name()
				#$treeviewVMSettings.Nodes.Add($rootNode)
				Fill-XMLNodesToTreeView -Element $currentVMNode -Tn $treeviewVMSettings
			}
			else
			{
				$treeviewVMSettings.Nodes.Clear()
			}
		}
	}
	$treeviewVMSettings_AfterSelect = [System.Windows.Forms.TreeViewEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.TreeViewEventArgs]
		
		$tablelayoutpanelVMSettings.Controls.Clear()
		$tablelayoutpanelVMSettings.VerticalScroll.Value = 0
		$tablelayoutpanelVMSettings.SuspendLayout()	
		$script:Variable.SelectNodes("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/$($treeviewVMSettings.SelectedNode.FullPath)//text()") | %{
			$label = New-Object System.Windows.Forms.Label
			$label.Text = $_.ParentNode.Name
			$label.TextAlign = 'TopRight'
			$label.Dock = 'Fill'
			$tablelayoutpanelVMSettings.Controls.Add($label)
			
			$Textbox = New-Object System.Windows.Forms.TextBox
			$tablelayoutpanelVMSettings.Controls.Add($Textbox)
			$tablelayoutpanelVMSettings.SetColumnSpan($Textbox, 2)
			$Textbox.Name = $_.ParentNode.Name
			$Textbox.Text = $_.Value
			$Textbox.Dock = 'Fill'
			$Textbox = Add-ValidationBlockToControl -Control $Textbox
			
			
			$xmlPath = Get-XMLPathVM $_
			$Textbox.Name = $xmlPath
		}
		$tablelayoutpanelVMSettings.ResumeLayout($true)
	}
	$buttonSaveVMSetting_Click = {
		$oldVmName = $listviewVMs.SelectedItems.SubItems.Text[1]
		
		if ($treeviewVMSettings.SelectedNode.Text -eq "VMName")
		{
			$textbox = $tablelayoutpanelVMSettings.Controls | ? { $_ -is [system.Windows.Forms.TextBox] }
			$script:variable.selectNodes("//Installer/Roles/Role[@Server='$oldVmname.$($script:variable.Installer.VMs.Default.JoinDomain.Domain)']") | %{
				$_.SetAttribute("Server", "$($textbox.Text).$($script:variable.Installer.VMs.Default.JoinDomain.Domain)")
			}
			$script:variable.selectNodes("//Installer/SQL/Instance[@Server='$oldVmname.$($script:variable.Installer.VMs.Default.JoinDomain.Domain)']") | %{
				$_.SetAttribute("Server", "$($textbox.Text).$($script:variable.Installer.VMs.Default.JoinDomain.Domain)")
			}
			$script:Variable.SelectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/VMName").Set_InnerText("$($textbox.Text)")
			$listviewVMs.SelectedItems.SubItems[1].Text = $textbox.text
		}
		else
		{
			foreach ($textbox in $($tablelayoutpanelVMSettings.Controls | ? { $_ -is [System.Windows.Forms.TextBox] -or $_ -is [System.Windows.Forms.Combobox] -or $_ -is [System.Windows.Forms.DomainUpDown] }))
			{
				$pathtoXML = $textbox.Name -replace "_", "/"
				if ($pathtoXML -match "Maximum$")
				{
					$fullpathtoMinimum = $pathtoXML -replace "Maximum", "Minimum"
					$fullpathtoStartUp = $pathtoXML -replace "Maximum", "Startup"
					$max = $textbox.text
					$min = [int]$script:Variable.SelectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/$fullpathtoMinimum/text()").Value
					$startup = [int]$script:Variable.SelectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/$fullpathtoStartUp/text()").Value
					if (($min -gt $max )-or ($startup -gt $max))
					{
						$errorprovider1.SetError($textbox, "The maximum memory cannot be lower than the minimum or startup")
					}
					else
					{
						$errorprovider1.SetError($textbox, "")
					}
					
				}
				$script:Variable.SelectSingleNode("//Installer/VMs/VM[@Count=$($listviewVMs.SelectedItems.SubItems.Text[0])]/$pathtoXML").Set_InnerText($textbox.Text)
			}
		}
		
		Save-DeploymentScenario
	}
	$buttonMoveVMUp_Click = {
		#TODO: Place custom script here
		if ($listviewVMs.SelectedItems.SubItems.Text[0] -ne "1" -and $listviewVMs.SelectedItems -ne $null)
		{
			
			
			$currentVMCount = $listviewVMs.SelectedItems.SubItems.Text[0]
			$newVMCount = [int]($listviewVMs.SelectedItems.SubItems.Text[0]) - 1
			$vmToMoveUP = $script:variable.SelectSingleNode("//Installer/VMs/VM[@Count='$CurrentVMCount']")
			$vmToMoveDown = $script:variable.SelectSingleNode("//Installer/VMs/VM[@Count='$newVMCount']")
			$listviewVMs.SelectedItems.SubItems[0].Text = $newVMCount
			$listviewVms.Items[$listviewVMs.SelectedIndices[0] - 1].SubItems[0].Text = $currentVMCount
			
			$vmToMoveUP.SetAttribute("Count", $newVMCount)
			$vmToMoveDown.SetAttribute("Count", $currentVMCount)
			[Elanity.GUITools]::MoveItems($listviewVMs, 'Up')
			Save-DeploymentScenario
		}
	}
	
	$buttonMoveVMDown_Click = {
		#TODO: Place custom script here
		if ($listviewVMs.SelectedItems.SubItems.Text[0] -ne $script:variable.Installer.VMs.Count -and $listviewVMs.SelectedItems -ne $null)
		{
			$currentVMCount = $listviewVMs.SelectedItems.SubItems.Text[0]
			$newVMCount = [int]($listviewVMs.SelectedItems.SubItems.Text[0]) + 1
			$vmToMoveUP = $script:variable.SelectSingleNode("//Installer/VMs/VM[@Count='$CurrentVMCount']")
			$vmToMoveDown = $script:variable.SelectSingleNode("//Installer/VMs/VM[@Count='$newVMCount']")
			$listviewVMs.SelectedItems.SubItems[0].Text = $newVMCount
			$listviewVms.Items[$listviewVMs.SelectedIndices[0] + 1].SubItems[0].Text = $currentVMCount
			$vmToMoveUP.SetAttribute("Count", $newVMCount)
			$vmToMoveDown.SetAttribute("Count", $currentVMCount)
			[Elanity.GUITools]::MoveItems($listviewVMs, 'Down')
			Save-DeploymentScenario
			
		}
	}
	
	
	
	$buttonBrowse_Click = {
		
		if ($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$textboxFile.Text = $openfiledialog1.FileName
		}
	}
	
	$buttonBrowse_Click2 = {
		$radiobuttonscriptStr_BrowseforV.Checked = $true
		if ($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$textboxFile.Text = $openfiledialog1.FileName
			$buttonscriptStr_Open.PerformClick()
		}
	}
	
	$buttonscriptStr_Open_Click = {
		#TODO: Place custom script here
		if ($radiobuttonscriptStr_SelectExis.Checked)
		{
			Copy-Item ".\$($listviewSelectVariableFile.SelectedItems.Subitems[0].Text)\Variable.xml"	".\"
			$script:DeploymentScenario = (Get-ChildItem ".\$($listviewSelectVariableFile.SelectedItems.Subitems[0].Text)\Variable.xml").FullName
			$script:DeploymentScenraioFolder = (Get-ChildItem ".\$($listviewSelectVariableFile.SelectedItems.Subitems[0].Text)\Variable.xml").Directory.Fullname
			$script:Variable = [xml](Get-Content ".\Variable.xml")
		}
		elseif ($radiobuttonscriptStr_BrowseforV.Checked)
		{
			if (Test-Path $textboxFile.Text)
			{
				Copy-Item "$($textboxFile.Text)"	".\"
				$script:DeploymentScenario = (Get-ChildItem $textboxFile.Text).FullName
				$script:DeploymentScenraioFolder = (Get-ChildItem $textboxFile.Text).Directory.Fullname
				$script:Variable = [xml](Get-Content ".\Variable.xml")
			}
		}
		elseif ($radiobuttonscriptStr_CreateANew.Checked)
		{
			if ($textboxNewDeploymentScenario.Text -ne "")
			{
				if (!(Test-Path (Join-Path $(Get-ScriptDirectory) $($textboxNewDeploymentScenario.Text))))
				{
					md (Join-Path $(Get-ScriptDirectory) $textboxNewDeploymentScenario.Text)
					'<?xml version="1.0" encoding="utf-8"?>
<Installer version="2.0">
  <Components>
  </Components>
  <Roles>
  </Roles>
  <SQL>
  </SQL>
  <VMs>
    <Count>0</Count>
    <Default>
      <Host>Localhost</Host>
      <VMFolder>C:\VMs</VMFolder>
      <VHDFolder>C:\VMs</VHDFolder>
      <VMName>
        <Prefix>WS12R2D</Prefix>
        <Sequence>1</Sequence>
      </VMName>
      <Processor>2</Processor>
      <Memory>
        <Startup>1024</Startup>
        <Minimum>512</Minimum>
        <Maximum>2048</Maximum>
        <Buffer>20</Buffer>
      </Memory>
      <NetworkAdapter>
        <VirtualSwitch>CorpNet01</VirtualSwitch>
        <MAC>
          <Prefix>00:15:5D:65:01:</Prefix>
          <Sequence>4</Sequence>
        </MAC>
        <IP>
          <Prefix>192.168.1.</Prefix>
          <Sequence>4</Sequence>
          <Mask>24</Mask>
          <Gateway>192.168.1.1</Gateway>
          <DNS>192.168.1.4</DNS>
        </IP>
      </NetworkAdapter>
      <OSDisk>
        <Parent>C:\VHD\WS12R2D.vhdx</Parent>
        <Type>Differencing</Type>
      </OSDisk>
      <DataDisks>
        <Count>1</Count>
        <Format>VHDX</Format>
        <Size>100</Size>
      </DataDisks>
      <DVD>False</DVD>
      <AutoStart>
        <Action>Nothing</Action>
        <Delay>0</Delay>
      </AutoStart>
      <JoinDomain>
        <Domain>contoso.com</Domain>
        <Credentials>
          <Domain>contoso.com</Domain>
          <Password>P@ssw0rd</Password>
          <Username>!jd</Username>
        </Credentials>
        <OrganizationalUnit>Servers.HQ</OrganizationalUnit>
      </JoinDomain>
      <AdministratorPassword>P@ssw0rd</AdministratorPassword>
    </Default>
   </VMs>
</Installer>' | Out-File "$(Join-Path $(Get-ScriptDirectory) $textboxNewDeploymentScenario.Text)\Variable.xml"
					Copy-Item "$(Join-Path $(Get-ScriptDirectory) $textboxNewDeploymentScenario.Text)\Variable.xml" ".\"
					$script:DeploymentScenario = (Get-ChildItem "$(Join-Path $(Get-ScriptDirectory) $textboxNewDeploymentScenario.Text)\Variable.xml").FullName
					$script:DeploymentScenraioFolder = (Get-ChildItem "$(Join-Path $(Get-ScriptDirectory) $textboxNewDeploymentScenario.Text)\Variable.xml").Directory.Fullname
					$script:Variable = [xml](Get-Content ".\Variable.xml")
					$comment = $script:Variable.CreateComment($textboxNewDescription.Text)
					$script:Variable.InsertBefore($comment, $script:Variable.DocumentElement)
				}
				else
				{
					[void][System.Windows.Forms.MessageBox]::Show("This deployment scenario already exist", "Error", 'OK', 'Error')
				}
			}
		}
		if ($script:variable -ne $null)
		{
			$listviewVMs.Items.Clear()
			$script:variable.Installer.VMs.VM | Sort-Object { [int]$_.Count } | %{ $listviewVMs.Items.Add($_.Count).SubItems.Add($_.VMName) }
			$tablelayoutpanelGeneral.Controls.Clear()
			$treeviewDefaultVMSetting.Nodes.Clear()
			$tablelayoutpanelGeneral.controls.Add($labelSetGlobalParametersU)
			$tabpageDomain.Controls | %{
				if ($_ -is [System.Windows.Forms.TextBox]) { $_.Text = '' }
				elseif ($_ -is [System.Windows.Forms.CheckBox]) { $_.Checked = $false }
			}
			$script:workflow.SelectNodes("//Installer/Variable") | %{
				$checkbox = New-Object System.Windows.Forms.Checkbox -Property @{ Name = $_.Name; Text = "$($_.Name)"; Dock = "Fill"; TextAlign = "MiddleRight"; }
				$checkbox.CheckAlign = 'MiddleRight'
				$textbox = New-Object System.Windows.Forms.TextBox -Property @{ Name = $_.Name; Text = $script:variable.SelectSingleNode("//Installer/Variable[@Name='$($_.Name)']").Value; Dock = "Fill" }
				$tablelayoutpanelGeneral.Controls.Add($checkbox)
				$tablelayoutpanelGeneral.Controls.Add($textbox)
				$tablelayoutpanelGeneral.SetColumnSpan($textbox, 2)
				$validationAdded = $false
				
				if ($_.Required -eq "True")
				{
					$checkbox.Font = "Arial, 8.25pt, style=Bold"
					$checkbox.Enabled = $false
					$checkbox.Checked = $true
					Add-ValidationBlockToControl -Control $textbox
					$validationAdded = $true
				}
				
				if ($script:variable.SelectSingleNode("//Installer/Variable[@Name='$($_.Name)']") -ne $null)
				{
					$checkbox.Checked = $true
					if (!$validationAdded)
					{
						Add-ValidationBlockToControl -Control $textbox
					}
				}
				
				
				
				$checkbox.add_CheckedChanged($checkbox_toggleValidation)
			}
			$buttonSaveVariable = New-Object System.Windows.Forms.Button -Property @{ text = "Save" }
			$tablelayoutpanelGeneral.Controls.Add($(New-Object System.Windows.Forms.Label -Property @{ text = "Bold variables are required*"; Dock = "fill"; TextAlign = "TopRight" }))
			$buttonSaveVariable.add_Click($buttonSaveVariable_click)
			$tablelayoutpanelGeneral.Controls.Add($buttonSaveVariable)
			
			$domain = $script:variable.SelectSingleNode("//Installer/VMs/Domain")
			if ($domain -ne $null)
			{
				$checkboxscriptStr_DomainCrea.Checked = $true
				$TextboxDomainName.Text = $domain.name
				$textboxGroupOU.Text = $domain.GroupOU
				$textboxServiceAccountOU.Text = $domain.ServiceAccountOU
			}
			else
			{
				foreach ($textbox in $($tabpageDomain.Controls | ? { $_ -is [System.Windows.Forms.TextBox] }))
				{
					$textbox.Enabled = $false
				}
				$buttonSaveDomainChanges.Enabled = $false
			}
			#endregion
			
			
			$DefaultVMSettings = $script:variable.SelectSingleNode("//Installer/VMs/Default")
			$rootNode = New-Object System.Windows.Forms.TreeNode
			$rootNode.Text = $DefaultVMSettings.get_name()
			$treeviewDefaultVMSetting.Nodes.Add($rootNode)
			Fill-XMLNodesToTreeView -Element $DefaultVMSettings -Tn $rootNode
			$DefaultVMSettings | Get-Member -MemberType property | select -ExpandProperty Name | %{ $comboboxSettingNodeToAdd.Items.Add($_) }
			UpdateNavButtons
			$si = $script:Variable.'#comment'
			if ($si -eq $null) { $si = "No description, add a comment to $($file) that describe the deployment scenario" }
			$statusbar1.Text = "$($script:Version) | Current deployment scenario: $($script:DeploymentScenario) | $si"
			$tabcontrolWizard.SelectTab($tabpageVariable)
		}
	}
	$checkbox_toggleValidation = {
		
		if ($this.checked)
		{
			$textbox = $this.Parent.Controls | ? { $_ -is [System.Windows.Forms.TextBox] -and $_.name -eq $this.Text }
			
			Add-ValidationBlockToControl -Control $textbox
			$textbox.CausesValidation = $true
			$formPDTGUI.ValidateChildren()
		}
		else
		{
			$textbox = $this.Parent.Controls | ? { $_ -is [System.Windows.Forms.TextBox] -and $_.name -eq $this.Text }
			Remove-ValidationBlockToControl -Control $textbox
			$textbox.CausesValidation = $false
			$formPDTGUI.ValidateChildren()
		}
		
	}
	$checkbox_toggleValidationAutoDetect = {
		
		if ($this.checked)
		{
			$textbox = $this.Parent.Controls | ? { $_ -is [System.Windows.Forms.TextBox] -and $_.name -eq $this.Text }
			
			Add-ValidationBlockToControl -Control $textbox -AutoMatchValidationType
			$textbox.CausesValidation = $True
			$formPDTGUI.ValidateChildren()
		}
		else
		{
			$textbox = $this.Parent.Controls | ? { $_ -is [System.Windows.Forms.TextBox] -and $_.name -eq $this.Text }
			Remove-ValidationBlockToControl -Control $textbox -AutoMatchValidationType
			$textbox.CausesValidation = $false
			$formPDTGUI.ValidateChildren()
		}
		
	}
	function Add-ValidationBlockToControl
	{
		param (
			[System.Windows.forms.Control]$Control,
			[switch]$AutoMatchValidationType
		)
		if ($AutoMatchValidationType)
		{
			
			switch -regex ($Control.Name.ToString())
			{
				'Account$' {
					$valType = "ValidateAccount"
				}
				'Users$|Group$|Admins$' {
					$valType = "ValidateAccount"
				}
				'Port$'{
					$valType = "ValidateNumeric"
				}
				'Password$' {
					$valType = ""
				}
				'Dir$' {
					$valType = "ValidatePath"
				}
				default
				{
					#<code>
				}
			}
			
		}
		else
		{
			$ValVar = $script:ValidationInfo.SelectSingleNode("//ValidationInfo/Validate[@ValueName='$($control.Name)']")
			$valType = $ValVar.ValidationBlock
		}
		switch ($valType)
		{
			
			"ValidateDropDown" {
				
				$parentControl = $control.Parent
				$ControlText = $control.Text
				$parentControl.Controls.Remove($Control)
				$combobox = New-Object system.Windows.Forms.ComboBox
				$combobox.Dock = 'Fill'
				$combobox.Text = $ControlText
				
				$combobox.Items.AddRange($script:ValidationInfo.ValidationInfo.$($ValVar.Values).Value)
				$parentControl.Controls.Add($combobox)
				$parentControl.SetColumnSpan($combobox, 2)
				return $combobox
			}
			
			"ValidateAccount" {
				
				$parentControl = $control.Parent
				if ($parentControl.GetColumnSpan($Control) -gt 1)
				{
					$Pos = $parentControl.GetPositionFromControl($Control)
					$Pos.Column += 1
					$parentControl.SetColumnSpan($Control, 1)
					$button = New-Object System.Windows.Forms.Button
					$button.Text = ""
					$button.Width = 25
					$button.Height = 25
					$button.BackgroundImage = $imagelistIcons.Images[0]
					$button.BackgroundImageLayout = 'Zoom'
					$button.Name = $Control.Name
					$tooltip1.SetToolTip($button, "Click here to select an object from Active Directory")
					if ($Control.Name -match 'Users$|Group$|Admins$')
					{
						$button.add_Click($buttonBrowseADGroup_Click)
					}
					
					else
					{
						$button.add_Click($buttonBrowseADUser_Click)
					}
					$parentControl.SetCellPosition($button, $Pos)
					$parentControl.Controls.Add($button)
				}
				$Control.add_Validating($ValidateAccount)
			}
			"ValidateComputername" {
				
				$parentControl = $control.Parent
				if ($parentControl.GetColumnSpan($Control) -gt 1)
				{
					$Pos = $parentControl.GetPositionFromControl($Control)
					$Pos.Column += 1
					$parentControl.SetColumnSpan($Control, 1)
					$button = New-Object System.Windows.Forms.Button
					$button.Text = ""
					$button.Width = 25
					$button.Height = 25
					$button.BackgroundImage = $imagelistIcons.Images[0]
					$button.BackgroundImageLayout = 'Zoom'
					$button.Name = $Control.Name
					$tooltip1.SetToolTip($button, "Click here to select a computer object from Active Directory")
					$button.add_Click($buttonBrowseADComputer_Click)
					$parentControl.SetCellPosition($button, $Pos)
					$parentControl.Controls.Add($button)
				}
				$Control.add_Validating($ValidateComputername)
			}
			"ValidateIPAddress" {
				$Control.add_Validating($ValidateIPAddress)
			}
			"ValidateProductKey" {
				$Control.add_Validating($ValidateProductKey)
			}
			"Validate1Or0" {
				$Control.add_Validating($Validate1Or0)
			}
			"ValidatePath" {
				$Control.add_Validating($ValidatePath)
			}
			"ValidateAlphanumeric" {
				$Control.add_Validating($ValidateAlphanumeric)
			}
			"ValidateNumeric" {
				$parentControl = $control.Parent
				$ControlText = $control.Text
				$Pos = $parentControl.GetPositionFromControl($Control)
				
				$parentControl.Controls.Remove($Control)
				$DomainUpDown = New-Object system.Windows.Forms.DomainUpDown
				$DomainUpDown.Dock = 'Fill'
				$DomainUpDown.Text = $ControlText
				if ($ValVar.Max -ne $null -and $ValVar.Min -ne $null)
				{
					$DomainUpDown.Items.AddRange($($valvar.Max .. $ValVar.Min))
				}
				else
				{
					$DomainUpDown.Items.AddRange($(0..65535))
				}
				$parentControl.Controls.Add($DomainUpDown)
				$parentControl.setCellPosition($DomainUpDown,$Pos)
				$parentControl.SetColumnSpan($DomainUpDown, 2)
				$DomainUpDown.add_Validating($ValidateNumeric)
				return $DomainUpDown
				
			}
			"ValidateNumericCPU" {
				
				$parentControl = $control.Parent
				$ControlText = $control.Text
				$parentControl.Controls.Remove($Control)
				$DomainUpDown = New-Object system.Windows.Forms.DomainUpDown
				$DomainUpDown.Dock = 'Fill'
				$DomainUpDown.Text = $ControlText
				if ($ValVar.Max -ne $null -and $ValVar.Min -ne $null)
				{
					$DomainUpDown.Items.AddRange($($valvar.Max .. $ValVar.Min))
				}
				else
				{
					$DomainUpDown.Items.AddRange($(65535..0))
				}
				$parentControl.Controls.Add($DomainUpDown)
				$parentControl.SetColumnSpan($DomainUpDown, 2)
				$DomainUpDown.add_Validating($ValidateNumericCPU)
				return $DomainUpDown
			}
			"ValidateNumericPercent"{
				
				$parentControl = $control.Parent
				$ControlText = $control.Text
				$parentControl.Controls.Remove($Control)
				$DomainUpDown = New-Object system.Windows.Forms.DomainUpDown
				$DomainUpDown.Dock = 'Fill'
				$DomainUpDown.Text = $ControlText
				$DomainUpDown.Items.AddRange($(100..0))
				$parentControl.Controls.Add($DomainUpDown)
				$parentControl.SetColumnSpan($DomainUpDown, 2)
				$DomainUpDown.add_Validating($ValidateNumericPercent)
				
				return $DomainUpDown
			}
			"ValidateNumericRAM"{
				
				$parentControl = $control.Parent
				$ControlText = $control.Text
				$ControlName = $Control.Name
				$parentControl.Controls.Remove($Control)
				$button = New-Object System.Windows.Forms.Button
				$button.Text = ".."
				$button.Width = 20
				$button.Height = 20
				$button.add_Click($buttonSelectRAMSize_Click)
				$button.Name = $Controlname
				$tooltip1.SetToolTip($button, "Click here to enter a value")
				$DomainUpDown = New-Object system.Windows.Forms.DomainUpDown
				$DomainUpDown.Dock = 'Fill'
				$DomainUpDown.Text = $ControlText
				$DomainUpDown.Name = $ControlName
				$DomainUpDown.Items.AddRange($(0..65536))
				
				$parentControl.Controls.Add($DomainUpDown)
				$parentControl.Controls.Add($button)
				return $DomainUpDown
			}
			#			"ValidateMACAddress"{
			#				$Control.add_Validating($ValidateMACAddress)
			#			}
			default
			{
				$Control.add_Validating($ValidateAnyNonEmpty)
			}
		}
		return $control
	}
	
	function Remove-ValidationBlockToControl
	{
		param (
			[System.Windows.forms.Control]$Control,
			[switch]$AutoMatchValidationType
		)
		$errorprovider1.SetError($Control, "")
		
	}
	$ValidateIPAddress = [System.ComponentModel.CancelEventHandler]{
		if ($this.text -notmatch '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$')
		{
			$errorprovider1.SetError($this, "Please provide a valid IP adress")
		}
		else
		{
			$errorprovider1.SetError($this, "")
			
		}
	}
	
	$ValidateComputername = [System.ComponentModel.CancelEventHandler]{
		if ($this.text -notmatch '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$')
		{
			$errorprovider1.SetError($this, "Please provide a valid hostname or IP adress")
		}
		else
		{
			$errorprovider1.SetError($this, "")
			if (!(Test-Connection -Count 1 -Quiet -ComputerName $this.text))
			{
				$errorproviderWarning.SetError($this, "The Computer didn´t respond to ping, make sure its online!")
			}
			else
			{
				$errorproviderWarning.SetError($this, "")
			}
		}
	}
	$ValidateNumericCPU = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^6[1-4]$|^[1-5][0-9]$|^[1-9]$")
		{
			$errorprovider1.SetError($this, "Please provie a value from 1 to 64")
		}
		else
		{
			$errorprovider1.SetError($this, "")
			
		}
		
	}
	$ValidateNumericPercent = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^10{2}$|^[1-9][0-9]$|^[0-9]$")
		{
			$errorprovider1.SetError($this, "Please provide a value from 0 - 100")
		}
		else
		{
			$errorprovider1.SetError($this, "")
			
		}
		
	}
	$ValidateMACAddress = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch ".+") #no time for regex now :D
		{
			$errorprovider1.SetError($this, "MAC")
		}
		else
		{
			$errorprovider1.SetError($this, "")
			
		}
		
	}
	$ValidateAnyNonEmpty = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^.+$")
		{
			$errorprovider1.SetError($this, "Provide any value but non empty")
		}
		else
		{
			$errorprovider1.SetError($this, "")
		}
		
	}
	$Validate1Or0 = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^[0-1]{1}$")
		{
			$errorprovider1.SetError($this, "Only 0 or 1 is allowed")
		}
		else
		{
			$errorprovider1.SetError($this, "")
			
		}
		
	}
	$ValidateAccount = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^.+@.+|.+\\.+$")
		{
			$errorprovider1.SetError($this, "Please provide an account name in user@domain or domain\user format ")
		}
		else
		{
			$errorprovider1.SetError($this, "")
		}
		
	}
	$ValidateAlphanumeric = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^[0-9a-zA-Z]$")
		{
			$errorprovider1.SetError($this, "Only Alphanumeric char´s allowed")
		}
		else
		{
			$errorprovider1.SetError($this, "")
		}
		
	}
	$ValidateNumeric = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch "^[0-9]+$")
		{
			$errorprovider1.SetError($this, "Only numeric char´s allowed")
		}
		else
		{
			$errorprovider1.SetError($this, "")
		}
		
	}
	$ValidatePath = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch '^([a-zA-Z]:|\\\\[a-zA-Z0-9]+\\(?!\.)[^\r\n$<>]+\$?)(\\|(\\(?!\.)[^\r\n<>\\]+)*)(?<!\\)$')
		{
			$errorprovider1.SetError($this, "Please provide a path, e.g. c:\temp or \\server\share")
		}
		else
		{
			$errorprovider1.SetError($this, "")
		}
		
	}
	$ValidateProductKey = [System.ComponentModel.CancelEventHandler]{
		if ($this.Text -notmatch '^[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}-[a-zA-Z0-9]{5}$')
		{
			$errorprovider1.SetError($this, "Provide the key in xxxxx-xxxxx-xxxxx-xxxxx-xxxxx Format")
		}
		else
		{
			$errorprovider1.SetError($this, "")
		}
		
	}
	$buttonBrowseADUser_Click = {
		if (([adsi]'').DistinguishedName -ne $null)
		{
			
			$script:SearchADObjectType = "User"
			Call-DirectoryObjectPicker_psf
			if ($script:SelectedADObject -ne $null)
			{
				$textbox = ($this.Parent.Controls.Find($this.Name, $false) | ? { $_ -is [System.Windows.forms.TextBox] })[0]
				$textbox.Text = $script:SelectedADObject
			}
			
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("No connection to domain controller", "Error", 'OK', 'Error')
		}
		
	}
	$buttonBrowseADComputer_Click = {
		$script:SearchADObjectType = "Computer"
		if (([adsi]'').DistinguishedName -ne $null)
		{
			
			Call-DirectoryObjectPicker_psf
			if ($script:SelectedADObject -ne $null)
			{
				$textbox = ($this.Parent.Controls.Find($this.Name, $false) | ? { $_ -is [System.Windows.forms.TextBox] })[0]
				$textbox.Text = $script:SelectedADObject
			}
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("No connection to Doamin controller", "Error", 'OK', 'Error')
		}
		
	}
	$buttonBrowseADGroup_Click = {
		$script:SearchADObjectType = "Group"
		if (([adsi]'').DistinguishedName -ne $null)
		{
			Call-DirectoryObjectPicker_psf
			if ($script:SelectedADObject -ne $null)
			{
				$textbox = ($this.Parent.Controls.Find($this.Name, $false) | ? { $_ -is [System.Windows.forms.TextBox] })[0]
				$textbox.Text = $script:SelectedADObject
			}
		}
		
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show("No connection to Doamin controller", "Error", 'OK', 'Error')
		}
	}
	$buttonSelectRAMSize_Click = {
		Call-SelectSize_psf
		if ($script:SizeSelected -ne $null)
		{
			$textbox= $this.Parent.Controls | ? { $_ -is [System.Windows.forms.DomainUpDown] -and $_.Name -match "$($this.Name)$"}
			$textbox.Text = $script:SizeSelected
		}
		
	}
	$listviewSelectVariableFile_SelectedIndexChanged={
		#TODO: Place custom script here
		$radiobuttonscriptStr_SelectExis.Checked = $true
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
		$textboxDescription.Text = $listviewSelectVariableFile.SelectedItems[0].SubItems[1].Text
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Continue
	}
	
	$buttonscriptStr_SaveDescri_Click= {
		#TODO: Place custom script here
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
		$listviewSelectVariableFile.SelectedItems[0].SubItems[1].Text = $textboxDescription.Text
		$ErrorActionPreference = [System.Management.Automation.ActionPreference]::Continue
		$si = [xml](Get-Content ".\$($listviewSelectVariableFile.SelectedItems.Subitems[0].Text)\Variable.xml")
		if ($si.'#comment' -ne $null)
		{
			$si.'#comment' = $textboxDescription.Text
		}
		else
		{
			$comment = $si.CreateComment($textboxDescription.Text)
			$si.InsertBefore($comment, $si.DocumentElement)
			
		}
		$si.Save("$(get-scriptdirectory)\$($listviewSelectVariableFile.SelectedItems.Subitems[0].Text)\Variable.xml")
	}
	
	
	
	
	$buttonscriptStr_RunDownloa_Click= {
		#TODO: Place custom script here
		$sd = Get-ScriptDirectory
		#Set-ExecutionPolicy -Scope 'CurrentUser' -ExecutionPolicy 'RemoteSigned'
		$argList = " -noprofile -noexit -file `"Downloader.ps1`" -path `"$sd`" "
		if ($checkboxDeploymentOnly.Checked) { $argList += "-DeploymentOnly" }
		Start-Process powershell.exe -Verb runas -ArgumentList ($argList)
	}
	
	$buttonscriptStr_CreateVMs_Click={
		#TODO: Place custom script here
		$sd = Get-ScriptDirectory
		#Set-ExecutionPolicy -Scope 'CurrentUser' -ExecutionPolicy 'RemoteSigned'
		$argList = " -noprofile -noexit -file `"VMCreator.ps1`" -path `"$sd`" "
		Start-Process powershell.exe -Verb runas -ArgumentList ($argList)
	}
	
	$buttonRunInstaller_Click={
		#TODO: Place custom script here
		$sd = Get-ScriptDirectory
		#Set-ExecutionPolicy -Scope 'CurrentUser' -ExecutionPolicy 'RemoteSigned'
		$argList = " -noprofile -noexit -file `"Installer.ps1`" -path `"$sd`" "
		if ($comboboxSkipValidation.Text -ne "") { $argList += "-SkipValidation $($comboboxSkipValidation.Text)" }
		Start-Process powershell.exe -Verb runas -ArgumentList ($argList)
	}
	
	$textboxNewDeploymentScenario_Enter={
		#TODO: Place custom script here
		$radiobuttonscriptStr_CreateANew.Checked = $true
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formPDTGUI.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Edit_Config_textboxDescription = $textboxDescription.Text
		$script:Edit_Config_textboxNewDescription = $textboxNewDescription.Text
		$script:Edit_Config_textboxNewDeploymentScenario = $textboxNewDeploymentScenario.Text
		$script:Edit_Config_radiobuttonscriptStr_CreateANew = $radiobuttonscriptStr_CreateANew.Checked
		$script:Edit_Config_radiobuttonscriptStr_BrowseforV = $radiobuttonscriptStr_BrowseforV.Checked
		$script:Edit_Config_textboxFile = $textboxFile.Text
		$script:Edit_Config_radiobuttonscriptStr_SelectExis = $radiobuttonscriptStr_SelectExis.Checked
		$script:Edit_Config_listviewSelectVariableFile = $listviewSelectVariableFile.SelectedItems
		$script:Edit_Config_textboxGroupOU = $textboxGroupOU.Text
		$script:Edit_Config_textboxServiceAccountOU = $textboxServiceAccountOU.Text
		$script:Edit_Config_TextboxDomainName = $TextboxDomainName.Text
		$script:Edit_Config_checkboxscriptStr_DomainCrea = $checkboxscriptStr_DomainCrea.Checked
		if($treeviewDefaultVMSetting.SelectedNode -ne $null)
		{
			$script:Edit_Config_treeviewDefaultVMSetting = $treeviewDefaultVMSetting.SelectedNode.Text
		}
		else
		{
			$script:Edit_Config_treeviewDefaultVMSetting = $null
		}
		$script:Edit_Config_listviewVMs = $listviewVMs.SelectedItems
		$script:Edit_Config_comboboxSettingNodeToAdd_SelectedItem = $comboboxSettingNodeToAdd.SelectedItems
		if($treeviewVMSettings.SelectedNode -ne $null)
		{
			$script:Edit_Config_treeviewVMSettings = $treeviewVMSettings.SelectedNode.Text
		}
		else
		{
			$script:Edit_Config_treeviewVMSettings = $null
		}
		$script:Edit_Config_comboboxSQLVersion = $comboboxSQLVersion.Text
		$script:Edit_Config_comboboxSQLVersion_SelectedItem = $comboboxSQLVersion.SelectedItems
		$script:Edit_Config_textboxSQLInstanceName = $textboxSQLInstanceName.Text
		$script:Edit_Config_comboboxSQLServers = $comboboxSQLServers.Text
		$script:Edit_Config_comboboxSQLServers_SelectedItem = $comboboxSQLServers.SelectedItems
		$script:Edit_Config_listviewSQLInstances = $listviewSQLInstances.SelectedItems
		$script:Edit_Config_checkboxscriptStr_RolesDisab = $checkboxscriptStr_RolesDisab.Checked
		$script:Edit_Config_comboboxToServer = $comboboxToServer.Text
		$script:Edit_Config_comboboxToServer_SelectedItem = $comboboxToServer.SelectedItems
		if($treeviewComponentsAndRoles.SelectedNode -ne $null)
		{
			$script:Edit_Config_treeviewComponentsAndRoles = $treeviewComponentsAndRoles.SelectedNode.Text
		}
		else
		{
			$script:Edit_Config_treeviewComponentsAndRoles = $null
		}
		$script:Edit_Config_listboxRole = $listboxRole.SelectedItems
		$script:Edit_Config_listboxComponent = $listboxComponent.SelectedItems
		$script:Edit_Config_comboboxSkipValidation = $comboboxSkipValidation.Text
		$script:Edit_Config_comboboxSkipValidation_SelectedItem = $comboboxSkipValidation.SelectedItems
		$script:Edit_Config_checkboxDeploymentOnly = $checkboxDeploymentOnly.Checked
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$picturebox1.remove_Click($picturebox1_Click)
			$buttonscriptStr_Back.remove_Click($buttonscriptStr_Back_Click)
			$buttonscriptStr_Finish.remove_Click($buttonscriptStr_Finish_Click)
			$picturebox2.remove_Click($picturebox2_Click)
			$linklabelHttpgallerytechnetmi.remove_LinkClicked($linklabelHttpgallerytechnetmi_LinkClicked)
			$buttonscriptStr_SaveDescri.remove_Click($buttonscriptStr_SaveDescri_Click)
			$buttonscriptStr_Open.remove_Click($buttonscriptStr_Open_Click)
			$textboxNewDeploymentScenario.remove_Enter($textboxNewDeploymentScenario_Enter)
			$buttonBrowse.remove_Click($buttonBrowse_Click2)
			$listviewSelectVariableFile.remove_SelectedIndexChanged($listviewSelectVariableFile_SelectedIndexChanged)
			$buttonSaveDomainChanges.remove_Click($buttonSaveDomainChanges_Click)
			$checkboxscriptStr_DomainCrea.remove_CheckedChanged($checkboxscriptStr_DomainCrea_CheckedChanged)
			$buttonDefaultVMSettingSave.remove_Click($buttonDefaultVMSettingSave_Click)
			$treeviewDefaultVMSetting.remove_AfterSelect($treeviewDefaultVMSetting_AfterSelect)
			$buttonMoveVMDown.remove_Click($buttonMoveVMDown_Click)
			$buttonMoveVMUp.remove_Click($buttonMoveVMUp_Click)
			$listviewVMs.remove_SelectedIndexChanged($listviewVMs_SelectedIndexChanged)
			$buttonRemoveSetting.remove_Click($buttonRemoveSetting_Click)
			$buttonAddSetting.remove_Click($buttonAddSetting_Click)
			$buttonRemoveVM.remove_Click($buttonRemoveVM_Click)
			$buttonAddVM.remove_Click($buttonAddVM_Click)
			$buttonSaveVMSetting.remove_Click($buttonSaveVMSetting_Click)
			$treeviewVMSettings.remove_AfterSelect($treeviewVMSettings_AfterSelect)
			$tabcontrolSubVMs.remove_SelectedIndexChanged($tabcontrolSubVMs_SelectedIndexChanged)
			$buttonscriptStr_SQLSaveIns.remove_Click($buttonscriptStr_SQLSaveIns_Click)
			$buttonscriptStr_SQLRemoveS.remove_Click($buttonscriptStr_SQLRemoveS_Click)
			$buttonscriptStr_SQLAddInst.remove_Click($buttonscriptStr_SQLAddInst_Click)
			$buttonscriptStr_SQLSaveCha.remove_Click($buttonscriptStr_SQLSaveCha_Click)
			$listviewSQLInstances.remove_SelectedIndexChanged($listviewSQLInstances_SelectedIndexChanged)
			$buttonscriptStr_RolesAddSe.remove_Click($buttonscriptStr_RolesAddSe_Click)
			$buttonRemoveSelectedCompon.remove_Click($buttonRemoveSelectedCompon_Click)
			$buttonscriptStr_RolesRemov.remove_Click($buttonscriptStr_RolesRemov_Click)
			$buttonSaveValuesCR.remove_Click($buttonSaveValuesCR_Click)
			$treeviewComponentsAndRoles.remove_AfterSelect($treeviewComponentsAndRoles_AfterSelect)
			$listboxRole.remove_SelectedIndexChanged($listboxRole_SelectedIndexChanged)
			$listboxComponent.remove_SelectedIndexChanged($listboxComponent_SelectedIndexChanged)
			$buttonRunInstaller.remove_Click($buttonRunInstaller_Click)
			$buttonscriptStr_RunValidat.remove_Click($buttonscriptStr_RunValidat_Click)
			$buttonscriptStr_CreateVMs.remove_Click($buttonscriptStr_CreateVMs_Click)
			$buttonscriptStr_RunDownloa.remove_Click($buttonscriptStr_RunDownloa_Click)
			$tabcontrolWizard.remove_SelectedIndexChanged($tabcontrolWizard_SelectedIndexChanged)
			$tabcontrolWizard.remove_Selecting($tabcontrolWizard_Selecting)
			$tabcontrolWizard.remove_Deselecting($tabcontrolWizard_Deselecting)
			$buttonscriptStr_Next.remove_Click($buttonscriptStr_Next_Click)
			$formPDTGUI.remove_Load($formPDTGUI_Load)
			$formPDTGUI.remove_Load($Form_StateCorrection_Load)
			$formPDTGUI.remove_Closing($Form_StoreValues_Closing)
			$formPDTGUI.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formPDTGUI.SuspendLayout()
	$tabcontrolWizard.SuspendLayout()
	$tabpageAbout.SuspendLayout()
	$tabpageSelectFile.SuspendLayout()
	$tabpageVariable.SuspendLayout()
	$tablelayoutpanelGeneral.SuspendLayout()
	$tabpageVMs.SuspendLayout()
	$tabcontrolSubVMs.SuspendLayout()
	$tabpageDomain.SuspendLayout()
	$tabpageDefaultVMSettings.SuspendLayout()
	$tablelayoutpanelDefaultVMSetting.SuspendLayout()
	$tabpageVMSettings.SuspendLayout()
	$tablelayoutpanelVMSettings.SuspendLayout()
	$tabpageSQL.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tablelayoutpanelSQLVariables.SuspendLayout()
	$tabpageRoles.SuspendLayout()
	$groupbox2.SuspendLayout()
	$tablelayoutpanelComponentAndRoleSettings.SuspendLayout()
	$tabpageFinish.SuspendLayout()
	$groupbox5.SuspendLayout()
	$groupbox4.SuspendLayout()
	$groupbox3.SuspendLayout()
	#
	# formPDTGUI
	#
	$formPDTGUI.Controls.Add($picturebox1)
	$formPDTGUI.Controls.Add($statusbar1)
	$formPDTGUI.Controls.Add($buttonscriptStr_Cancel)
	$formPDTGUI.Controls.Add($buttonscriptStr_Back)
	$formPDTGUI.Controls.Add($buttonscriptStr_Finish)
	$formPDTGUI.Controls.Add($tabcontrolWizard)
	$formPDTGUI.Controls.Add($buttonscriptStr_Next)
	$formPDTGUI.AcceptButton = $buttonscriptStr_Finish
	$formPDTGUI.BackColor = 'ControlLightLight'
	$formPDTGUI.CancelButton = $buttonscriptStr_Cancel
	$formPDTGUI.ClientSize = '1255, 674'
	$formPDTGUI.Font = "Arial, 8.25pt"
	$formPDTGUI.Name = "formPDTGUI"
	$formPDTGUI.StartPosition = 'CenterScreen'
	$formPDTGUI.Text = "PDT GUI"
	$formPDTGUI.add_Load($formPDTGUI_Load)
	#
	# picturebox1
	#
	$picturebox1.Anchor = 'Top, Right'
	#region Binary Data
	$picturebox1.Image = [System.Convert]::FromBase64String('
/9j/4AAQSkZJRgABAQEBLAEsAAD/4QBkRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUA
AAABAAAARgEoAAMAAAABAAIAAAExAAIAAAAOAAAATgAAAAAAAAEsAAAAAQAAASwAAAABcGFpbnQu
bmV0IDQuMAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAAsAG0DASIAAhEBAxEB/8QAHwAA
AQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpT
VFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAA
AAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEI
FEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVm
Z2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD+gT/grn/wUD/ac/Y1+I3w
/wBC+EWpeBdJ8G698OtT8X3t3rHg0+IddudW07WL+y1KymuL/V/7PWxs7G106508WWnWVz5+oXyX
095Gln9n1/gTqf8AwWB/aM/Z6+DP7Qng39oD9mnw/o3xv+FHgL4veGvDfiHwFPYa3puhfEbwtpXj
DQ9O1ia08B+JtPi1KDTNWtYroWk17apOXVbqZAs1fFP/AAcexO+r/BnyInluZfhJ8W4Y0iQvLK4u
dK8mONFBd3aSUhEUEszYUZPP6bfsA/tv/sWeCv2D/wBivwZ4p/a1/Zr8L+KvB37JX7OXhXxN4T8Q
fG/4a6P4n8OeIfDvwe8G6PrWga34fv8AxJb6vpmsaRqVnc6fqWm3llDeWV5bzW9xDHJE6r+LZTiM
TmvG3iPlua8UZrgsDk2OySnlOGw+a08vhhqePyv63iVD3U6i9rKHLzuappcq0bR/XfFGBy/hnwf8
Ac/4a8OOGc2zji3JuMK3E+Px3DdbPKuPr5LxJHK8ulVtUcaE3hoVFN0lSlWbcm3KN17J+wVf/wDB
QSS7+Omjft22/gydNI8SeFD8GPEHg200KzXVfD9xpur2viy11X+wIbK1ubi21rTbLV9LuksIF/4R
/wARaTa3Uo1201zTtL/nw/Yi1jxfqn/Bdrwnovijxh4u8Xf8Iraftx2NtdeLPEuteJL0ReHpdB8N
WDTXms315cSy29leSW8cskjuqSuoIDtX9Y3wk+PHwd+PWm6zrfwY+Inhr4m6F4f1NdF1XxB4Ovf7
a8PQawbdLt9Mh1+1R9Hvr+3tZbe4vLWwvbqaxhu7KS8SBb20M38nP7Dib/8Agv3dHOPKj/4KDSYx
97/itvBUWPbHm5/DHuPTz6EsPxX4Q4eGYYrG01jOIqUsXWrxqVMwp0+FsTOnXxU6Cp0MRVnKnCs6
qpqEql5wjHmPnOCqtPHeGH0qMdWyTLsnxEsr4BxNPLMLgp0KGSV8R4mZZRr4LLaWLlXxmAw9KGIq
4WOHniJ1YUFGhWqVeS7/ALIKK/CW8/4Kn/Gb9oj9rVf2PP2K/hf4Ts9XhuPHMniD4yfGO08R674f
8O+Ffh4TY+I/Gd/4Q8K32g3eiaZdeILjR/DPhE6jrGrXut674i0WLUNB0m2/taTS/kv9or/gqN/w
UO/4J8/tJeFPAP7Tdj8Avi38M73XPh3ceK08G+EPEPhrxBffDP4g+LofCB8Z/DrxIniK3t7bWvDV
+dQe88N+LfB+o2+rS6HqOl22q2Anstdk9+PiDw5P6lWp1MfPLswzeORYPOI5di/7Kr5pOvPCQw0M
VKmm4TxVOeGhjPZ/UZ1ouEcTKzZ8TV8C+P6DzfC16GS0c+yLhaXGma8KTz/LP9ZsHw1TwNLNKuYV
ctjXlGNalllelmFbKniP7YpYSpGpUy+Lai/6jqK/GH/gq9/wUj+NX7CR8JaV8Ifhh8N/GGq+MPA3
i3xPpWr/ABF1XXzpkmt+HHNuugXGk6Le+GjY2hludKmm1ybxPIrRX08bafZixF1d+C/FH9uz/gqN
4w/Zk8K/tXfBr4AfC/4afBbVvAGjfEWXxDrLj4geML3wtqWm2t1B44PhK+8S+Gr3TPA+qwzf8JFY
2a6NqGuW/hi8sNTvdVisoru9YzHxB4cy6vnGFk81xmJ4fnTjnNDLcjzbHSy6FXDRxccRiZ0MJKlT
wv1aXtfrDqeznGNT2cpulVUDIvAvj7PsFwpmUI8M5Rl3HNLET4SxvEPGPDOS0s+rYfMJZVPA5fSx
uaQxVbMf7Qg8M8CsP9YpTnQeIhRjisLKt++3i/xEPCPhTxL4rbRtc8Qp4a0HV9ffQfDNnFqPiPWU
0iwnv30vQdPnubKK/wBYvltzbabZPd24urySGDzUMgI/Jv8A4J/f8FNPiT+25+0H8ZfAlz+zZrXg
b4I+E/Bej+IPh/8AF+wu7/xBpn/CTwa5caf4i+H3xI1d7Ow0XSfGmq6LqnhvxR4T0PRYrkJpOn+K
H1C/uh/Zch1P+CU//BQz4gft5fs/fF7UfiD4V8G+HP2h/gF481P4ceMrHwpFrFl4C8WyX3hLSvGn
w68d6PpOp6preteHtJ8VaVrMdlqmg3PiDWbnTtX0TWmtdSksrixSL5L/AOCav/BUD9pj9rz9qP4v
fBHV/AfwJ8P+DvAv7L+t/FjwF4b8E+HvFXhJ7nxtL8RtF8K+F9J8SeJdS8V+MYY9F+wzXltqN1pH
hqxYyzf2jDpxFsti5X4hoVc+4ReDz2ay7P8AKM2zDCZZRyl4mOdUaGGwWLpYyGYtKrgvqlDEQmsO
oOeLeIpwUOaLsYPgXG4XgjxTWacGUnn3BHFXC+RZpxFiuJll9Xg/FYzMc2yzE5TVyBOWGzd5pjMB
Vozx8q0aeVxwFeq6jjUipfo54j/4KZfs3aH+2B8NP2I9P/4TvxR8Z/iR408S+BDNovhlLfwd4O1v
wp8O/FXxM1dPE+ua9qOjXc8S6D4TvLa3l8LaT4lhk1O7soZZbe2F3dWv6FV/DtHL+0Jrn/BbX4UX
GgQ/CLQ/2rT8e/2gbjw5oviOLxZr3wJh8QWP7PPxYi8X22vajpGoaN43l0rTPAKeIbnQb3TEW6v/
ABXb6Qt1ZW2mT3McX6wf8FLv+Ci//BRX/gn14X+G1zN4R/ZW+Iesaz4I1jxn4i1nSfAnxa07w54n
1bwf4iN54s8B+ELO/wDi3caj4cuLTwbdaHaWuu6vP4lk1LVtXGsR6PpcCHQ4PD4c8R6GKyHHZ3xB
Tr4HD4fifGZLHEU8rx1HC0qE85qZVljrSq+1ampKjDMKrkoYfEVOWrGjzRpr7Lj7wBxmXca5Nwdw
LXwec47G+HeVcXVMDW4jybF5nicXS4SwvEnEUcJTw7w8JUnGpi62R4aEJVcwwGHdTDVMZ7OdeX9F
NFfPZ/aC8M6/+yo/7VHgSa01TwhrHwAf4+eEJtTlMNlf+Hr34eN8QdCOpS2rSPBBcafJaretbu8k
KtL5ZZ1FfmF/wTq/bV/by/b60j40+O4tP/Zi+GHw1+HXjnS/h14T1y5+FfxX8R3ni/xbBpMviDx5
p6Kvx60WE6f4K0/WvA2mNrlsnkat4jv/ABPpf2LT5vDc0cv39TOMFSzfC5HKVV5ji8DiMxpU4UKs
6UcHhatGhWrVa8YujRXtsRSpwjUnGdWU7U4y5ZW/DsPwrnGI4WzHjKFPDQyHLM5wGQYnEVcZhqWI
nmuZYbFYzC4XDYKdRYvFv6rgsVXrVMPSqU8PTpXrzp89NT+Gv+Djm6uLLWPgneWczwXln8Kfi3dW
s8ZxJBcQXWjSwTIcHDxyorqSD8y9DX6a/wDBPv8AYo/ZK8UfsZfsafFXxL+z98MPFXjzxv8Ast/s
9eOfFPiTxN4btfEk+v8AivxP8JvCOv67rt/a619u06a81TV7+61C4YWaxefOxjjRQqr+eH/Bej4Y
/Ff4y/FD4ZeGPhx8LfiT46tdH+DniKHUdV8I+BPFXiTSLPUfFuualaxadcano2k3tlHfx22kQXdx
Zmb7RBa3lnPJGqXMJf379jT/AIKJal+z7+x9+y38CfiT+w7+3vdfEH4Kfs9fBz4ReK7vw58EfDd7
4Zv9f+G/w+8P+Db+/wBH1LVPiTpGqXOlXk+jG7guLvQ7K9aGYM+npJ+6r8UyerwtR8Q/E/FcTYbK
1zZjw/8A2ZiM2wNKs5rD5OqGL+o1cRQqN+zrUoRrewek+RS15T+v+KqHiTjPAj6OOXeHWP4kk6eQ
cdR4hwPC2c4rC+yljuKvreWLOsPgcZQjD22ExFSeFeNik6brOn7vOfvjpOkaToOnWmj6FpenaLpG
nxCCw0vSbK207TrKAEsIbSxs4oba2iDMzCOGJEBYnGSa/j1/YcXZ/wAF/wDU0znZB/wUHXPrt8fe
BRnHbOK/bH4D/trftY/tKftZeBvCOi/smfET4Hfso6Z4F+IHij4ifEn4veEda03xH4g8U6dbaRpX
gjwdo13eR6foOmDUtR8RXOu3Ftpa+ItQe18HzmbVbC0vpLN/x9/Yv+E3x0tv+C09h8aLn4J/GDRf
hp4kk/bYs5PiFqvwx8X2Phbw8vxFv9M8TeDNT1jU9S0i1srOw1mXw/8A2fYz3MyW9xqF7YWTOsl5
Fu+jznMsJnPFPhRmWWKtVwDzbixU6zwuIw8XTo8P4/Bc6hXpUp06NTE8tLD1KkKcK6lCVJyp1Kcp
fn/CmQZpwp4afSb4e4hlhMLnS4Y8Lp18JHMsFjp+2xXHeRZ17H2+CxGJpYjFUMuc8RjqGHq16uDl
Tr0cVGniMPXp0/6Bvi9+2R+zT+zl46i+FXh/TH8eftB/EHV5JbH4IfA7wxYa78SfFPiG5tJdSnvv
EsenfYdM0eWPT45db1fVPFuq2d5aeH4rvxDLFNpdpc3Mf8sf/BarV/jf40/aW+GV38efBXhn4daz
4gt/2aLPwt4A8PeKE8ZXPhbwJqf7Ry6fa6b4t8SW1nY6Nqfi6fWpfEd9qT6B9q0SCyvdMs7W/uWt
5pBb+Dp/a1/4Jw/8FFZvjP8AET4E+KfjFrOqeDfiX8IfGelagPEUN94usPiD408G+MH+K3wn8b23
hrxPYa/r97rHgnT0vLW5t0TXdH1PUdJvtR0PWICIMr/gqjB+2d+1V8Uo/jjY/sbfHXws8Gn/AA01
D4M/Dy48IavrnjbXfDvwk8daX4vdtU0nSdOk1LQtV1vxfB4ki0/SNe0zSNRmtpLG6s7S+0m70zWN
U+BzfiyfFOXcOV8T9ewGOwHiFw7UzLhPDZbXo0eH8FhOIFTVbPMVVwvtK+JlBU6inCvhsJKeIXs8
BUlhamLj+4cL+GVLw1z3j/BZfHJ85yfO/Arjyhw/4nZhxBgsXiuOc2zTgZ1/qnBuW4fMvY4LL6Va
VbDypVsHmOaU6eC/2nOqFPMsNltT7R/4OeZXtvAvwzuoWaOeH4K/tJyRyKSGR4dI8KSRsvPDI5LA
jBzjngV+5/iSws7T/gmXr2lwW8UWn2v7CeqWMFqqgQx2cHwAnt4oFQAKI0hRYwoAAUADivxY/wCD
g/4c/FX9o3wl8KNI+Dvwh+LXje+1H4B/Fu7+w6L8NfGV5qGl3XxF03SLfw9omv2kOjySaD4heXSr
iG90LVRa6npsymO+t4Gxn9qPENr4m1P/AIJn65p3/CIeKbDxnqH7Dmp6YfAV/wCH9UtvGll4quvg
PPYnwld+GZbX+14vEdtrEn9jzaO1ob0aijWohaTAP3mVwf8AbnjRP2U/3tTLvZy9nK1aNPhDDUX7
N2/eKNaFam+Ru1RSi7Suj8V4krQfCH0RKX1mlfC4fPlXp+3hfCVK3ipjsVB4iKnfDueErYaunU5G
6E6VRe44s/E7/g23dx41/wCCjUG4+V/wkn7Ll0E7CefwB8Q7eWTHTc8VlbIT1IiUdhXz1/wb/Kx/
4KI/HpsfIn7F2iqTxw0nxxtCoxnJyIm6DAxyeRX1d/wQO+G/xa+B3i7/AIKB6r8Wfg/8Vfh/onia
z/Z88UeEtZ8WfD/xXoen+KovBfhX4m2Hi3TNDn1HSoBfazocl5okk+lxA3txFrVpJZQ3Sx3X2fxn
/gh18Ffjp8L/ANvr4reKPiD8E/i34L8EeKP2ST4Xs/Gfin4eeK9A8Mp4u0b4vaFrdv4budV1XSrW
2t9U1PQ73VNS02OV0juYdHv41k+0CGGX53hunVWL8BVKlVTw/BvEdKvzU5r2FWWUZBCNOveP7qbl
h68YxnytypTileLR934hV8NLKfpsyp4jDSjj/FvgHFYJwr0ZLG4ePFXG1apiMJyzf1mlGGOwlWdW
jzwjHE0ZyaVSLfm/w1/03/g47+F0g5+x/H/9tqf0x9m/Z5+MOk9iucG729G65wT8w/bn/gs/8D4f
i3+xd4k8UW1it3r3wW17SviFZgRLJNN4eldvDXjKxYsrD7Cmi6yfEF8hwJP+EcgJJ2BH/DL4/eEf
2gP2S/8Agsn4f/aU0H4OeKviTB4d+N/xT8b6f4X07TNfRPiT8Nfj34J8U+GNW/4Q3WdJ8P6/HeeJ
PDH/AAl8V1aaeLRoJ9c8P3Giajc6eJHmX+nj4OeJfiP+1l+zr47b4/fAbV/2eIPikvxD8E6R8NPF
Osw654x/4VZq2mSeGtJ8S+MLVbDS28Oa/wCKYLjU9Z/4RC9s4NU8O6dcaZYauq6ql4F6uEcHg+Ie
CeM+B8R7Wnm0s04ypYzDVsNiKbwVfGZxjq+W4iVadJYfm56mGxWHtUcqns5ThGUac3HzfFHNs14D
8YfCXxjwXsK/DEOHPCXFZTj8Lj8DXWb4LKOE8lwXEGBp4WliZY3k9lQzDLMfzUFGhKvCjWnTqYij
Gf8AMN8GP24JPAf/AAb5eMvhN591rPxR+E/xh8afsQaBosDyXGveIdJn8Qp8RvAOnWenITdzQa38
HfFPh74e6S8a+RNqM1pah2uC8J/py/YB/Zki/Y9/Y9+BH7P8xt7jxN4O8Fwah8SNVttjR6/8WvGN
3deNPivr6zJkzQar8Qdf8RXOnmSSZ4NMaxs1meK2jNfyF/8ABLz9kDVvjB/wUt0rwhrb6hc/Dv4C
eKtP/ag+Nvh95ZJPDKfEP4Su3w9+Cen+Qd1r/bfiD4iafp3ixZJ7cvf6H8FtWtPMjG3P93FfWeG+
LxHEOW0eL8dRqUsXmGVZTlNKNaLjUVHKaM/7Qqcsveh9Yz7E5qlLT6xhcNgaruuTl/MPH7LMBwJx
BivCvJMVQxOV5DxNxPxPiJ4SoqlCWK4oxVFZHh/aQbhVWA4Ky7hqTp6/UczzDOcKrS9s5/lx8W/2
2fid8KPEH7dOn63oXg628NfCbw/44sv2ZfFj2WqyW2qfFn4dfsbfD39pnXfhx8UYTq8Md3e+Ibfx
nqPiXwFJoUukf2z4Y8D/ABC0bUX03VdE0G+8Te+eJ/24fhF4V+Ok/wACb5bibXNL8ffDv4WeINUi
8U/DS3n0fx/8VdI8Ka34K0mL4f6h45s/iz4g0q6s/HngdNV8UeGfAWr6Bo83iuyknvZNN0Dx7qPg
7t/ir+yZ8E/jR8Pfj/8ADD4heH9Q1fwp+0prlp4m+JMMGt6jpuor4k0zwD8P/h1o2veFdWsJYL/w
vquiaH8MPBt3pV3pk0b22tadJqR8xru5ik37v9n/AMLT/EfUviLZ+JviDog8ReJfDPjjxl4H0PxQ
2m+B/GvjrwZomi+G/C/i7xFZxWR183+maD4Y8K6XdaRpHiPSPCfiS18L6Avi3w7r76dE5/SPeXXS
68929PxXXv21/ALx00e3Tv7uv56d9erPmuD9vjS/Cvwt1Xx78WPhV8QND1q3H7Rd74e8IeFLfwr4
k1fxpF8Dvj/pHwK0zwh4Zjs/Gt1Z3HxE8Z634z8D2GiaPfanp2napq91rc8OoWekaeLivVT+1z4Y
13W4vDPws8BeOfi9r2oaz4ttfDsPhK58C6Zo/ibwx8P/AAt8L9f8ceP9H8S+MPGXhvRJfCvh7Xfi
54Q+GkqzXcXiC5+I019pkOhjw7pWq+KLHo2/ZW+FV1beB7PWo/EHiC1+Gvx48VftEeB4dT1WOFdD
8c+LNb8YeJrvTnOj2WlPrfhHTvE3jbVfEekaD4jbWPs2uWPhvUri7u7rwzocllh6B+x18KfA3gT4
Y+BfhdqXjr4Up8Hrfxvp3gLxT4L8RwyeLNM0P4l6yPEHxB8O3t54s0zxRpWu6J4s1qLT9Wv7PXNG
1BrPV9E8Pa1os2l61oGkahZnveXr16fLv+HyPdfR3b0XTy637fe+yPMfHn7btrN8MPip4o+E/gPx
be6h4L/Y01H9q2Pxb4tsfDlj4I8JDV/D/wAXn8DeDvGmmf8ACZ2ni298Vt4o+D/ibTvE2h+G9Mvd
N0iCxl+2+KbGS5smn+oPg38aPB/x38N6n44+HTXWq+AIvE2veGvDHjfzNLk0D4gDwtfy6F4g8QeD
2sdSvL+fw1Y+KrHXPC9tqWs2Oiy6ze+H7/V9DtNS8JXvh7xHrfIwfssfBuz8E+Mfh3Y6HqVp4T8d
fATw1+zXr+nrr2q3U83wt8KWfxIstKsl1PULi81OXXni+K3jKXVPE99d3mtaxeX0N/qd3dXkBnk9
R8KfDzwz4J1nxzrXhq2uNNb4h+ILfxZ4j0yO6kbRT4nj0fT9Bvdc0zTGzDpF5ren6RpTa7Hp/kWW
p6nZvrk9p/bmp61qOptc3W3p/l/wfvVrNaWdltr+S+/8PLt+aX7Mf7Znxn8ceCPh18UvGqN8TvBG
vfsp6j8ePigvg79m74mfB5fh74ztPC/gLxRpfg7wn8Q/iZ4zb4c/EJfEo17xZpOm6XBf2U8cWiWf
i3UPE+m+GI72af6B8Mft1eDPGml2R8IfDzxj4y8U3vx9h/Z0i8LeCfFPwd8W248aT/BGf9oI61/w
muj/ABMm8CyeEdO+HVvLca5eReIJNe03WLW90qPw5eyRW0t57vN+z78OJv2f9M/ZoNnqsfww0X4c
eG/hfpNvHq1yNcsfDnhDSNM0bw3NHrLBpptV0uHR9Nuku7qO4hury1DX9rd28s9tLzfgz9mDwR4R
8UHxvdeJviH408XTfE+2+Mt9rvjPxHaX0t98SIPg1rnwBk8Qf2fpGj6JoulWt38LtaTQZPDHh7TN
G8IWtxpGmazpegafrEmsXurL3tFf1+Vk/n+d3sP3Wm7d7ferJ7Lr0/PU800n9rjxF9mittV+B3jj
VPE/if8Aam+LH7Nnw80Dwtqnw7Vdb/4Vx4e+J3jRPGetapr3xBsNN0LQX8LfCzXl1GW5uV1ltbks
bPTPDN0l7ERyHjb/AIKS/A3wHofhrXNc0vxBZDUvhXbfGXxbomseJPhN4Y8S+A/BU2t+IvDc0M2i
eJviTpVx8QPFVrrPgvxzbt4Z+ETeP7q6j8G6oLCe7vta8C2HjD6c0n4AeCNJ8Qaf4hS68Q3s2ifG
Txb8dPDdhe6haf2d4d8ceOvBHjDwJ4pGnraadaXt3o2qaf4/8X6odP1y+1eSz1nWGk0+6tdNsNK0
yx4u7/ZJ+HHl6dB4d8QfEnwLBH4Ul8AeJ08E+MZtFn+IHgB/EuveLYPCHivUWsrvVYLbS9c8V+K7
nQvEXhG/8K+ONAg8UeI7HRfFVhZa3qMFwnzLr2X328u9/l5jSjdK3bq+1336befkeieAvi5H8QfH
3xg8Faf4J8XaTYfBvxVpXgjVPG2tP4Zh8N+KvE+o+C/Cnj26sfCNpYeItQ8T3FrouheNNAj1LVNd
8P6DYyapPdafpMuptp97JB5B+3L+1r4K/Yw/Z08d/GXxVqFnHq9lpd7pvgDQZz5l14n8cXdpMNF0
+2so91zd2tpMP7U1kW0ck0ek2d0II5ryS0tbj8zP+C0Xw1TwR8Gl+I3gzx58T/Cd74u+Ktz4h8X+
GvD/AI31HS/B3inXb7wb4S8LwatreiWqo1zd6Po3gPSLbRjHeQRWbXWrzNFNLfBocX/gl/8AsKfB
P4k+F/h3+0/8V7vx98WfHfg7VU1TwR4f+IvioeIvAHg/xNaSwXlj4u0nw2+nQS3fiHTLmKC70mXx
Bqet6dpOq2mneIdN0218SaRpGsWH5fmHHlfFcY4zw6yvBvC5t9VhV/tuvXi8PhcLXw0MRWxNDCxo
VJ18dh6NSX1bD1ZU8PUxEIOtXjT5ov8Ao/IvBXBZZ4UZT498SZrHMeGFmdXDf6n4PAzWPzPMMHmF
XBYbL8dmNXG0KODyfH4qjTWYY7DQxGOoYKrWWFwc8Qqc19S/8EfP2PPE37L/AOzhqnjz4u6XcWH7
Rv7UPiOL4w/GG11NVOt+ErGeza2+G/wt1KVel74F8MTyXnia2XfDB8SPFXj+W1mntLmCVv1moor9
Iy/A4XK8Dg8uwVJUcJgcNRwmGpJt8lGhTjTpxcndylyxXNKTcpSvKTbbZ+AZ3nOY8RZzmmfZviHi
s0znMMXmeYYhpR9ti8bXniK81CNo04OpUlyU4JQpw5YQSjFJf//Z')
	#endregion
	$picturebox1.Location = '1130, 2'
	$picturebox1.Name = "picturebox1"
	$picturebox1.Size = '109, 44'
	$picturebox1.TabIndex = 6
	$picturebox1.TabStop = $False
	$picturebox1.add_Click($picturebox1_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 656'
	$statusbar1.Name = "statusbar1"
	$statusbar1.Size = '1255, 18'
	$statusbar1.TabIndex = 5
	$statusbar1.Text = "$($script:Version)"
	#
	# buttonscriptStr_Cancel
	#
	$buttonscriptStr_Cancel.Anchor = 'Bottom, Right'
	$buttonscriptStr_Cancel.DialogResult = 'Cancel'
	$buttonscriptStr_Cancel.Location = '1087, 612'
	$buttonscriptStr_Cancel.Name = "buttonscriptStr_Cancel"
	$buttonscriptStr_Cancel.Size = '75, 23'
	$buttonscriptStr_Cancel.TabIndex = 4
	$buttonscriptStr_Cancel.Text = "$script:Str_Cancel"
	$buttonscriptStr_Cancel.UseVisualStyleBackColor = $True
	#
	# buttonscriptStr_Back
	#
	$buttonscriptStr_Back.Anchor = 'Bottom, Left'
	$buttonscriptStr_Back.Location = '13, 612'
	$buttonscriptStr_Back.Name = "buttonscriptStr_Back"
	$buttonscriptStr_Back.Size = '75, 23'
	$buttonscriptStr_Back.TabIndex = 1
	$buttonscriptStr_Back.Text = "$script:Str_Back"
	$buttonscriptStr_Back.UseVisualStyleBackColor = $True
	$buttonscriptStr_Back.add_Click($buttonscriptStr_Back_Click)
	#
	# buttonscriptStr_Finish
	#
	$buttonscriptStr_Finish.Anchor = 'Bottom, Right'
	$buttonscriptStr_Finish.DialogResult = 'OK'
	$buttonscriptStr_Finish.Location = '1168, 612'
	$buttonscriptStr_Finish.Name = "buttonscriptStr_Finish"
	$buttonscriptStr_Finish.Size = '75, 23'
	$buttonscriptStr_Finish.TabIndex = 3
	$buttonscriptStr_Finish.Text = "$script:Str_Finish"
	$buttonscriptStr_Finish.UseVisualStyleBackColor = $True
	$buttonscriptStr_Finish.add_Click($buttonscriptStr_Finish_Click)
	#
	# tabcontrolWizard
	#
	$tabcontrolWizard.Controls.Add($tabpageAbout)
	$tabcontrolWizard.Controls.Add($tabpageSelectFile)
	$tabcontrolWizard.Controls.Add($tabpageVariable)
	$tabcontrolWizard.Controls.Add($tabpageVMs)
	$tabcontrolWizard.Controls.Add($tabpageSQL)
	$tabcontrolWizard.Controls.Add($tabpageRoles)
	$tabcontrolWizard.Controls.Add($tabpageFinish)
	$tabcontrolWizard.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrolWizard.Location = '13, 28'
	$tabcontrolWizard.Name = "tabcontrolWizard"
	$tabcontrolWizard.SelectedIndex = 0
	$tabcontrolWizard.Size = '1230, 578'
	$tabcontrolWizard.TabIndex = 0
	$tabcontrolWizard.add_SelectedIndexChanged($tabcontrolWizard_SelectedIndexChanged)
	$tabcontrolWizard.add_Selecting($tabcontrolWizard_Selecting)
	$tabcontrolWizard.add_Deselecting($tabcontrolWizard_Deselecting)
	#
	# tabpageAbout
	#
	$tabpageAbout.Controls.Add($picturebox2)
	$tabpageAbout.Controls.Add($labelBenedictBergerbbelan)
	$tabpageAbout.Controls.Add($labelscriptStr_AboutIdeas)
	$tabpageAbout.Controls.Add($labelKamilKosekkkelanityd)
	$tabpageAbout.Controls.Add($labelscriptStr_AboutCode)
	$tabpageAbout.Controls.Add($linklabelHttpgallerytechnetmi)
	$tabpageAbout.Controls.Add($labelThePDTGuiIsAGraphica)
	$tabpageAbout.Location = '4, 23'
	$tabpageAbout.Name = "tabpageAbout"
	$tabpageAbout.Size = '1222, 551'
	$tabpageAbout.TabIndex = 6
	$tabpageAbout.Text = "$script:Str_TabAbout"
	$tabpageAbout.UseVisualStyleBackColor = $True
	#
	# picturebox2
	#
	$picturebox2.Anchor = 'Top'
	#region Binary Data
	$picturebox2.Image = [System.Convert]::FromBase64String('
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')
	#endregion
	$picturebox2.Location = '539, 302'
	$picturebox2.Name = "picturebox2"
	$picturebox2.Size = '147, 60'
	$picturebox2.TabIndex = 6
	$picturebox2.TabStop = $False
	$picturebox2.add_Click($picturebox2_Click)
	#
	# labelBenedictBergerbbelan
	#
	$labelBenedictBergerbbelan.Anchor = 'Top'
	$labelBenedictBergerbbelan.Location = '432, 254'
	$labelBenedictBergerbbelan.Name = "labelBenedictBergerbbelan"
	$labelBenedictBergerbbelan.Size = '358, 23'
	$labelBenedictBergerbbelan.TabIndex = 5
	$labelBenedictBergerbbelan.Text = "Benedict Berger (bb@elanity.de) - Elanity Network Partner GmbH"
	$labelBenedictBergerbbelan.TextAlign = 'MiddleCenter'
	#
	# labelscriptStr_AboutIdeas
	#
	$labelscriptStr_AboutIdeas.Anchor = 'Top'
	$labelscriptStr_AboutIdeas.Font = "Arial, 9pt, style=Bold"
	$labelscriptStr_AboutIdeas.Location = '432, 231'
	$labelscriptStr_AboutIdeas.Name = "labelscriptStr_AboutIdeas"
	$labelscriptStr_AboutIdeas.Size = '358, 23'
	$labelscriptStr_AboutIdeas.TabIndex = 4
	$labelscriptStr_AboutIdeas.Text = "$script:Str_AboutIdeasAndTesting"
	$labelscriptStr_AboutIdeas.TextAlign = 'BottomCenter'
	#
	# labelKamilKosekkkelanityd
	#
	$labelKamilKosekkkelanityd.Anchor = 'Top'
	$labelKamilKosekkkelanityd.Location = '432, 208'
	$labelKamilKosekkkelanityd.Name = "labelKamilKosekkkelanityd"
	$labelKamilKosekkkelanityd.Size = '358, 23'
	$labelKamilKosekkkelanityd.TabIndex = 3
	$labelKamilKosekkkelanityd.Text = "Kamil Kosek (kk@elanity.de) - Elanity Network Partner GmbH"
	$labelKamilKosekkkelanityd.TextAlign = 'MiddleCenter'
	#
	# labelscriptStr_AboutCode
	#
	$labelscriptStr_AboutCode.Anchor = 'Top'
	$labelscriptStr_AboutCode.Font = "Arial, 9pt, style=Bold"
	$labelscriptStr_AboutCode.Location = '432, 185'
	$labelscriptStr_AboutCode.Name = "labelscriptStr_AboutCode"
	$labelscriptStr_AboutCode.Size = '358, 23'
	$labelscriptStr_AboutCode.TabIndex = 2
	$labelscriptStr_AboutCode.Text = "$script:Str_AboutCode"
	$labelscriptStr_AboutCode.TextAlign = 'BottomCenter'
	#
	# linklabelHttpgallerytechnetmi
	#
	$linklabelHttpgallerytechnetmi.Anchor = 'Top'
	$linklabelHttpgallerytechnetmi.Location = '350, 127'
	$linklabelHttpgallerytechnetmi.Name = "linklabelHttpgallerytechnetmi"
	$linklabelHttpgallerytechnetmi.Size = '522, 23'
	$linklabelHttpgallerytechnetmi.TabIndex = 1
	$linklabelHttpgallerytechnetmi.TabStop = $True
	$linklabelHttpgallerytechnetmi.Text = "http://gallery.technet.microsoft.com/PowerShell-Deployment-f20bb605"
	$linklabelHttpgallerytechnetmi.add_LinkClicked($linklabelHttpgallerytechnetmi_LinkClicked)
	#
	# labelThePDTGuiIsAGraphica
	#
	$labelThePDTGuiIsAGraphica.Anchor = 'Top'
	$labelThePDTGuiIsAGraphica.Location = '350, 36'
	$labelThePDTGuiIsAGraphica.Name = "labelThePDTGuiIsAGraphica"
	$labelThePDTGuiIsAGraphica.Size = '522, 87'
	$labelThePDTGuiIsAGraphica.TabIndex = 0
	$labelThePDTGuiIsAGraphica.Text = "$script:Str_AboutText"
	#
	# tabpageSelectFile
	#
	$tabpageSelectFile.Controls.Add($buttonscriptStr_SaveDescri)
	$tabpageSelectFile.Controls.Add($textboxDescription)
	$tabpageSelectFile.Controls.Add($labelscriptStr_PleaseBeAw)
	$tabpageSelectFile.Controls.Add($textboxNewDescription)
	$tabpageSelectFile.Controls.Add($labelscriptStr_Descriptio)
	$tabpageSelectFile.Controls.Add($buttonscriptStr_Open)
	$tabpageSelectFile.Controls.Add($textboxNewDeploymentScenario)
	$tabpageSelectFile.Controls.Add($label2)
	$tabpageSelectFile.Controls.Add($radiobuttonscriptStr_CreateANew)
	$tabpageSelectFile.Controls.Add($buttonBrowse)
	$tabpageSelectFile.Controls.Add($radiobuttonscriptStr_BrowseforV)
	$tabpageSelectFile.Controls.Add($textboxFile)
	$tabpageSelectFile.Controls.Add($radiobuttonscriptStr_SelectExis)
	$tabpageSelectFile.Controls.Add($labelscriptStr_SelectAFil)
	$tabpageSelectFile.Controls.Add($listviewSelectVariableFile)
	$tabpageSelectFile.Location = '4, 23'
	$tabpageSelectFile.Name = "tabpageSelectFile"
	$tabpageSelectFile.Padding = '3, 3, 3, 3'
	$tabpageSelectFile.Size = '1222, 551'
	$tabpageSelectFile.TabIndex = 7
	$tabpageSelectFile.Text = "$script:Str_SelectFile"
	$tabpageSelectFile.UseVisualStyleBackColor = $True
	#
	# buttonscriptStr_SaveDescri
	#
	$buttonscriptStr_SaveDescri.Location = '564, 201'
	$buttonscriptStr_SaveDescri.Name = "buttonscriptStr_SaveDescri"
	$buttonscriptStr_SaveDescri.Size = '189, 23'
	$buttonscriptStr_SaveDescri.TabIndex = 12
	$buttonscriptStr_SaveDescri.Text = "$script:Str_SaveDescription"
	$buttonscriptStr_SaveDescri.UseVisualStyleBackColor = $True
	$buttonscriptStr_SaveDescri.add_Click($buttonscriptStr_SaveDescri_Click)
	#
	# textboxDescription
	#
	$textboxDescription.Location = '8, 202'
	$textboxDescription.Name = "textboxDescription"
	$textboxDescription.Size = '550, 20'
	$textboxDescription.TabIndex = 11
	#
	# labelscriptStr_PleaseBeAw
	#
	$labelscriptStr_PleaseBeAw.Location = '310, 369'
	$labelscriptStr_PleaseBeAw.Name = "labelscriptStr_PleaseBeAw"
	$labelscriptStr_PleaseBeAw.Size = '247, 121'
	$labelscriptStr_PleaseBeAw.TabIndex = 10
	$labelscriptStr_PleaseBeAw.Text = "$script:Str_PleaseBeAware"
	#
	# textboxNewDescription
	#
	$textboxNewDescription.Location = '114, 339'
	$textboxNewDescription.Name = "textboxNewDescription"
	$textboxNewDescription.Size = '275, 20'
	$textboxNewDescription.TabIndex = 7
	#
	# labelscriptStr_Descriptio
	#
	$labelscriptStr_Descriptio.Location = '7, 338'
	$labelscriptStr_Descriptio.Name = "labelscriptStr_Descriptio"
	$labelscriptStr_Descriptio.Size = '101, 23'
	$labelscriptStr_Descriptio.TabIndex = 8
	$labelscriptStr_Descriptio.Text = "$script:Str_Description"
	$labelscriptStr_Descriptio.TextAlign = 'MiddleRight'
	#
	# buttonscriptStr_Open
	#
	$buttonscriptStr_Open.Location = '206, 365'
	$buttonscriptStr_Open.Name = "buttonscriptStr_Open"
	$buttonscriptStr_Open.Size = '98, 23'
	$buttonscriptStr_Open.TabIndex = 8
	$buttonscriptStr_Open.Text = "$script:Str_Open"
	$buttonscriptStr_Open.UseVisualStyleBackColor = $True
	$buttonscriptStr_Open.add_Click($buttonscriptStr_Open_Click)
	#
	# textboxNewDeploymentScenario
	#
	$textboxNewDeploymentScenario.Location = '114, 313'
	$textboxNewDeploymentScenario.Name = "textboxNewDeploymentScenario"
	$textboxNewDeploymentScenario.Size = '275, 20'
	$textboxNewDeploymentScenario.TabIndex = 6
	$textboxNewDeploymentScenario.add_Enter($textboxNewDeploymentScenario_Enter)
	#
	# label2
	#
	$label2.Location = '7, 312'
	$label2.Name = "label2"
	$label2.Size = '101, 23'
	$label2.TabIndex = 5
	$label2.Text = "Name:"
	$label2.TextAlign = 'MiddleRight'
	#
	# radiobuttonscriptStr_CreateANew
	#
	$radiobuttonscriptStr_CreateANew.Location = '7, 286'
	$radiobuttonscriptStr_CreateANew.Name = "radiobuttonscriptStr_CreateANew"
	$radiobuttonscriptStr_CreateANew.Size = '462, 24'
	$radiobuttonscriptStr_CreateANew.TabIndex = 5
	$radiobuttonscriptStr_CreateANew.Text = "$script:Str_CreateANewDeployment"
	$radiobuttonscriptStr_CreateANew.UseVisualStyleBackColor = $True
	#
	# buttonBrowse
	#
	$buttonBrowse.Location = '359, 257'
	$buttonBrowse.Name = "buttonBrowse"
	$buttonBrowse.Size = '30, 23'
	$buttonBrowse.TabIndex = 4
	$buttonBrowse.Text = "..."
	$buttonBrowse.UseVisualStyleBackColor = $True
	$buttonBrowse.add_Click($buttonBrowse_Click2)
	#
	# radiobuttonscriptStr_BrowseforV
	#
	$radiobuttonscriptStr_BrowseforV.Location = '7, 228'
	$radiobuttonscriptStr_BrowseforV.Name = "radiobuttonscriptStr_BrowseforV"
	$radiobuttonscriptStr_BrowseforV.Size = '462, 24'
	$radiobuttonscriptStr_BrowseforV.TabIndex = 2
	$radiobuttonscriptStr_BrowseforV.Text = "$script:Str_BrowseforVariable"
	$radiobuttonscriptStr_BrowseforV.UseVisualStyleBackColor = $True
	#
	# textboxFile
	#
	$textboxFile.AutoCompleteMode = 'SuggestAppend'
	$textboxFile.AutoCompleteSource = 'FileSystem'
	$textboxFile.Location = '7, 258'
	$textboxFile.Name = "textboxFile"
	$textboxFile.Size = '346, 20'
	$textboxFile.TabIndex = 3
	#
	# radiobuttonscriptStr_SelectExis
	#
	$radiobuttonscriptStr_SelectExis.Checked = $True
	$radiobuttonscriptStr_SelectExis.Location = '7, 30'
	$radiobuttonscriptStr_SelectExis.Name = "radiobuttonscriptStr_SelectExis"
	$radiobuttonscriptStr_SelectExis.Size = '462, 24'
	$radiobuttonscriptStr_SelectExis.TabIndex = 0
	$radiobuttonscriptStr_SelectExis.TabStop = $True
	$radiobuttonscriptStr_SelectExis.Text = "$script:Str_SelectExisting"
	$radiobuttonscriptStr_SelectExis.UseVisualStyleBackColor = $True
	#
	# labelscriptStr_SelectAFil
	#
	$labelscriptStr_SelectAFil.Font = "Arial, 8.25pt"
	$labelscriptStr_SelectAFil.Location = '7, 7'
	$labelscriptStr_SelectAFil.Name = "labelscriptStr_SelectAFil"
	$labelscriptStr_SelectAFil.Size = '1037, 33'
	$labelscriptStr_SelectAFil.TabIndex = 1
	$labelscriptStr_SelectAFil.Text = "$script:Str_SelectAFileVarXML"
	#
	# listviewSelectVariableFile
	#
	$listviewSelectVariableFile.Anchor = 'Top, Left, Right'
	[void]$listviewSelectVariableFile.Columns.Add($columnheaderDeplScenario)
	[void]$listviewSelectVariableFile.Columns.Add($columnheaderDescription)
	$listviewSelectVariableFile.ContextMenuStrip = $contextmenustrip1
	$listviewSelectVariableFile.FullRowSelect = $True
	$listviewSelectVariableFile.GridLines = $True
	$listviewSelectVariableFile.Location = '7, 60'
	$listviewSelectVariableFile.Name = "listviewSelectVariableFile"
	$listviewSelectVariableFile.Size = '1209, 136'
	$listviewSelectVariableFile.TabIndex = 1
	$listviewSelectVariableFile.UseCompatibleStateImageBehavior = $False
	$listviewSelectVariableFile.View = 'Details'
	$listviewSelectVariableFile.add_SelectedIndexChanged($listviewSelectVariableFile_SelectedIndexChanged)
	#
	# tabpageVariable
	#
	$tabpageVariable.Controls.Add($tablelayoutpanelGeneral)
	$tabpageVariable.Location = '4, 23'
	$tabpageVariable.Name = "tabpageVariable"
	$tabpageVariable.Padding = '3, 3, 3, 3'
	$tabpageVariable.Size = '1222, 551'
	$tabpageVariable.TabIndex = 0
	$tabpageVariable.Text = "$script:Str_TabGeneral"
	$tabpageVariable.UseVisualStyleBackColor = $True
	#
	# tablelayoutpanelGeneral
	#
	$tablelayoutpanelGeneral.ColumnCount = 3
	$System_Windows_Forms_ColumnStyle_1 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 424)
	[void]$tablelayoutpanelGeneral.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_1)
	$System_Windows_Forms_ColumnStyle_2 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 716)
	[void]$tablelayoutpanelGeneral.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_2)
	$System_Windows_Forms_ColumnStyle_3 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 11)
	[void]$tablelayoutpanelGeneral.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_3)
	$tablelayoutpanelGeneral.Dock = 'Fill'
	$tablelayoutpanelGeneral.Location = '3, 3'
	$tablelayoutpanelGeneral.Name = "tablelayoutpanelGeneral"
	$tablelayoutpanelGeneral.Padding = '0, 0, 50, 0'
	$tablelayoutpanelGeneral.RowCount = 11
	$System_Windows_Forms_RowStyle_4 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_4)
	$System_Windows_Forms_RowStyle_5 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_5)
	$System_Windows_Forms_RowStyle_6 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_6)
	$System_Windows_Forms_RowStyle_7 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_7)
	$System_Windows_Forms_RowStyle_8 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_8)
	$System_Windows_Forms_RowStyle_9 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_9)
	$System_Windows_Forms_RowStyle_10 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_10)
	$System_Windows_Forms_RowStyle_11 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_11)
	$System_Windows_Forms_RowStyle_12 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_12)
	$System_Windows_Forms_RowStyle_13 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_13)
	$System_Windows_Forms_RowStyle_14 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelGeneral.RowStyles.Add($System_Windows_Forms_RowStyle_14)
	$tablelayoutpanelGeneral.Size = '1216, 545'
	$tablelayoutpanelGeneral.TabIndex = 0
	#
	# tabpageVMs
	#
	$tabpageVMs.Controls.Add($tabcontrolSubVMs)
	$tabpageVMs.Location = '4, 23'
	$tabpageVMs.Name = "tabpageVMs"
	$tabpageVMs.Padding = '3, 3, 3, 3'
	$tabpageVMs.Size = '1222, 551'
	$tabpageVMs.TabIndex = 4
	$tabpageVMs.Text = "$script:Str_TabVMs"
	$tabpageVMs.UseVisualStyleBackColor = $True
	#
	# tabcontrolSubVMs
	#
	$tabcontrolSubVMs.Controls.Add($tabpageDomain)
	$tabcontrolSubVMs.Controls.Add($tabpageDefaultVMSettings)
	$tabcontrolSubVMs.Controls.Add($tabpageVMSettings)
	$tabcontrolSubVMs.Dock = 'Fill'
	$tabcontrolSubVMs.Location = '3, 3'
	$tabcontrolSubVMs.Name = "tabcontrolSubVMs"
	$tabcontrolSubVMs.SelectedIndex = 0
	$tabcontrolSubVMs.Size = '1216, 545'
	$tabcontrolSubVMs.TabIndex = 0
	$tabcontrolSubVMs.add_SelectedIndexChanged($tabcontrolSubVMs_SelectedIndexChanged)
	#
	# tabpageDomain
	#
	$tabpageDomain.Controls.Add($buttonSaveDomainChanges)
	$tabpageDomain.Controls.Add($textboxGroupOU)
	$tabpageDomain.Controls.Add($labelGroupOU)
	$tabpageDomain.Controls.Add($textboxServiceAccountOU)
	$tabpageDomain.Controls.Add($labelServiceAccountOU)
	$tabpageDomain.Controls.Add($TextboxDomainName)
	$tabpageDomain.Controls.Add($labelName)
	$tabpageDomain.Controls.Add($checkboxscriptStr_DomainCrea)
	$tabpageDomain.Location = '4, 23'
	$tabpageDomain.Name = "tabpageDomain"
	$tabpageDomain.Padding = '3, 3, 3, 3'
	$tabpageDomain.Size = '1208, 518'
	$tabpageDomain.TabIndex = 0
	$tabpageDomain.Text = "$script:Str_VmsTabDomain"
	$tabpageDomain.UseVisualStyleBackColor = $True
	#
	# buttonSaveDomainChanges
	#
	$buttonSaveDomainChanges.Location = '161, 119'
	$buttonSaveDomainChanges.Name = "buttonSaveDomainChanges"
	$buttonSaveDomainChanges.Size = '146, 23'
	$buttonSaveDomainChanges.TabIndex = 7
	$buttonSaveDomainChanges.Text = "$script:Str_DomainSaveChanges"
	$buttonSaveDomainChanges.UseVisualStyleBackColor = $True
	$buttonSaveDomainChanges.add_Click($buttonSaveDomainChanges_Click)
	#
	# textboxGroupOU
	#
	$textboxGroupOU.Location = '161, 92'
	$textboxGroupOU.Name = "textboxGroupOU"
	$textboxGroupOU.Size = '146, 20'
	$textboxGroupOU.TabIndex = 6
	#
	# labelGroupOU
	#
	$labelGroupOU.Location = '7, 90'
	$labelGroupOU.Name = "labelGroupOU"
	$labelGroupOU.Size = '148, 23'
	$labelGroupOU.TabIndex = 5
	$labelGroupOU.Text = "GroupOU:"
	$labelGroupOU.TextAlign = 'MiddleRight'
	#
	# textboxServiceAccountOU
	#
	$textboxServiceAccountOU.Location = '161, 66'
	$textboxServiceAccountOU.Name = "textboxServiceAccountOU"
	$textboxServiceAccountOU.Size = '146, 20'
	$textboxServiceAccountOU.TabIndex = 4
	#
	# labelServiceAccountOU
	#
	$labelServiceAccountOU.Location = '7, 64'
	$labelServiceAccountOU.Name = "labelServiceAccountOU"
	$labelServiceAccountOU.Size = '148, 23'
	$labelServiceAccountOU.TabIndex = 3
	$labelServiceAccountOU.Text = "ServiceAccountOU:"
	$labelServiceAccountOU.TextAlign = 'MiddleRight'
	#
	# TextboxDomainName
	#
	$TextboxDomainName.Location = '161, 40'
	$TextboxDomainName.Name = "TextboxDomainName"
	$TextboxDomainName.Size = '146, 20'
	$TextboxDomainName.TabIndex = 2
	#
	# labelName
	#
	$labelName.Location = '7, 38'
	$labelName.Name = "labelName"
	$labelName.Size = '148, 23'
	$labelName.TabIndex = 1
	$labelName.Text = "Name:"
	$labelName.TextAlign = 'MiddleRight'
	#
	# checkboxscriptStr_DomainCrea
	#
	$checkboxscriptStr_DomainCrea.Location = '7, 7'
	$checkboxscriptStr_DomainCrea.Name = "checkboxscriptStr_DomainCrea"
	$checkboxscriptStr_DomainCrea.Size = '770, 24'
	$checkboxscriptStr_DomainCrea.TabIndex = 0
	$checkboxscriptStr_DomainCrea.Text = "$script:Str_DomainCreateNewADForest"
	$checkboxscriptStr_DomainCrea.UseVisualStyleBackColor = $True
	$checkboxscriptStr_DomainCrea.add_CheckedChanged($checkboxscriptStr_DomainCrea_CheckedChanged)
	#
	# tabpageDefaultVMSettings
	#
	$tabpageDefaultVMSettings.Controls.Add($tablelayoutpanelDefaultVMSetting)
	$tabpageDefaultVMSettings.Controls.Add($buttonDefaultVMSettingSave)
	$tabpageDefaultVMSettings.Controls.Add($label3)
	$tabpageDefaultVMSettings.Controls.Add($treeviewDefaultVMSetting)
	$tabpageDefaultVMSettings.Controls.Add($labelscriptStr_DefaultVMS)
	$tabpageDefaultVMSettings.Location = '4, 22'
	$tabpageDefaultVMSettings.Name = "tabpageDefaultVMSettings"
	$tabpageDefaultVMSettings.Padding = '3, 3, 3, 3'
	$tabpageDefaultVMSettings.Size = '1208, 519'
	$tabpageDefaultVMSettings.TabIndex = 1
	$tabpageDefaultVMSettings.Text = "$script:Str_VmsTabDefaultVMSettings"
	$tabpageDefaultVMSettings.UseVisualStyleBackColor = $True
	#
	# tablelayoutpanelDefaultVMSetting
	#
	$tablelayoutpanelDefaultVMSetting.Anchor = 'Top, Bottom, Left'
	$tablelayoutpanelDefaultVMSetting.AutoScroll = $True
	$tablelayoutpanelDefaultVMSetting.ColumnCount = 3
	$System_Windows_Forms_ColumnStyle_15 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 47.42268)
	[void]$tablelayoutpanelDefaultVMSetting.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_15)
	$System_Windows_Forms_ColumnStyle_16 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 52.57732)
	[void]$tablelayoutpanelDefaultVMSetting.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_16)
	$System_Windows_Forms_ColumnStyle_17 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_17)
	$tablelayoutpanelDefaultVMSetting.Location = '224, 62'
	$tablelayoutpanelDefaultVMSetting.Name = "tablelayoutpanelDefaultVMSetting"
	$tablelayoutpanelDefaultVMSetting.Padding = '0, 0, 35, 35'
	$tablelayoutpanelDefaultVMSetting.RowCount = 14
	$System_Windows_Forms_RowStyle_18 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_18)
	$System_Windows_Forms_RowStyle_19 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_19)
	$System_Windows_Forms_RowStyle_20 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_20)
	$System_Windows_Forms_RowStyle_21 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_21)
	$System_Windows_Forms_RowStyle_22 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_22)
	$System_Windows_Forms_RowStyle_23 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_23)
	$System_Windows_Forms_RowStyle_24 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_24)
	$System_Windows_Forms_RowStyle_25 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_25)
	$System_Windows_Forms_RowStyle_26 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_26)
	$System_Windows_Forms_RowStyle_27 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_27)
	$System_Windows_Forms_RowStyle_28 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_28)
	$System_Windows_Forms_RowStyle_29 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_29)
	$System_Windows_Forms_RowStyle_30 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_30)
	$System_Windows_Forms_RowStyle_31 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelDefaultVMSetting.RowStyles.Add($System_Windows_Forms_RowStyle_31)
	$tablelayoutpanelDefaultVMSetting.Size = '458, 422'
	$tablelayoutpanelDefaultVMSetting.TabIndex = 17
	#
	# buttonDefaultVMSettingSave
	#
	$buttonDefaultVMSettingSave.Anchor = 'Bottom'
	$buttonDefaultVMSettingSave.Location = '309, 490'
	$buttonDefaultVMSettingSave.Name = "buttonDefaultVMSettingSave"
	$buttonDefaultVMSettingSave.Size = '219, 23'
	$buttonDefaultVMSettingSave.TabIndex = 16
	$buttonDefaultVMSettingSave.Text = "$script:Str_VMSettingsSaveSetting"
	$buttonDefaultVMSettingSave.UseVisualStyleBackColor = $True
	$buttonDefaultVMSettingSave.add_Click($buttonDefaultVMSettingSave_Click)
	#
	# label3
	#
	$label3.Font = "Arial, 8.25pt, style=Bold"
	$label3.Location = '223, 35'
	$label3.Name = "label3"
	$label3.Size = '100, 23'
	$label3.TabIndex = 15
	$label3.Text = "$script:Str_VMSettingsValue"
	$label3.TextAlign = 'BottomLeft'
	#
	# treeviewDefaultVMSetting
	#
	$treeviewDefaultVMSetting.Anchor = 'Top, Bottom, Left'
	$treeviewDefaultVMSetting.HideSelection = $False
	$treeviewDefaultVMSetting.Location = '7, 35'
	$treeviewDefaultVMSetting.Name = "treeviewDefaultVMSetting"
	$treeviewDefaultVMSetting.PathSeparator = "/"
	$treeviewDefaultVMSetting.Size = '210, 478'
	$treeviewDefaultVMSetting.TabIndex = 5
	$treeviewDefaultVMSetting.add_AfterSelect($treeviewDefaultVMSetting_AfterSelect)
	#
	# labelscriptStr_DefaultVMS
	#
	$labelscriptStr_DefaultVMS.Location = '7, 8'
	$labelscriptStr_DefaultVMS.Name = "labelscriptStr_DefaultVMS"
	$labelscriptStr_DefaultVMS.Size = '1013, 23'
	$labelscriptStr_DefaultVMS.TabIndex = 4
	$labelscriptStr_DefaultVMS.Text = "$script:Str_DefaultVMSettingsSpecify"
	#
	# tabpageVMSettings
	#
	$tabpageVMSettings.Controls.Add($buttonMoveVMDown)
	$tabpageVMSettings.Controls.Add($buttonMoveVMUp)
	$tabpageVMSettings.Controls.Add($tablelayoutpanelVMSettings)
	$tabpageVMSettings.Controls.Add($listviewVMs)
	$tabpageVMSettings.Controls.Add($comboboxSettingNodeToAdd)
	$tabpageVMSettings.Controls.Add($labelAddSettingNode)
	$tabpageVMSettings.Controls.Add($buttonRemoveSetting)
	$tabpageVMSettings.Controls.Add($buttonAddSetting)
	$tabpageVMSettings.Controls.Add($buttonRemoveVM)
	$tabpageVMSettings.Controls.Add($buttonAddVM)
	$tabpageVMSettings.Controls.Add($buttonSaveVMSetting)
	$tabpageVMSettings.Controls.Add($label1)
	$tabpageVMSettings.Controls.Add($labelSettings)
	$tabpageVMSettings.Controls.Add($labelscriptStr_VMSettings)
	$tabpageVMSettings.Controls.Add($treeviewVMSettings)
	$tabpageVMSettings.Location = '4, 22'
	$tabpageVMSettings.Name = "tabpageVMSettings"
	$tabpageVMSettings.Padding = '3, 3, 3, 3'
	$tabpageVMSettings.Size = '1208, 519'
	$tabpageVMSettings.TabIndex = 2
	$tabpageVMSettings.Text = "$script:Str_VmsTabVMs"
	$tabpageVMSettings.UseVisualStyleBackColor = $True
	#
	# buttonMoveVMDown
	#
	#region Binary Data
	$buttonMoveVMDown.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFqSURBVDhPpc/PK8NxHMfxnfwdGEZxkFo7
mANN2ljTYi2t1eY7I4v8KovFtGRm2A/NWsOE0C5yUIoZ2/Ij82P5kT/E8eXzOaxsex+Uw/Pwfnxe
l48IwL8ikTeRsWI8PYDRpADbhYkRvSORN5ay4PgjhsP3bVjPDIzoHYm8kYQZB29R7OUiMJ/oGdE7
EnlD50bs5sLYeQ3BcKRlRO9I5Amnfdh62UDkKQBdTM2I3pHIM8Z7Ec76EXpcgybcwYjekcjT72sQ
fPDCf78Mpa+VEb0jkaeNKrF+54b3dhFt7mZG9I5EXmdQAU/GhaW0E3KnlBG9I1EVaJP1hNVYTM3D
de2A1N7IuHTHKwH23zOFR/49HBfgTM5i7soOjU+Fepvku9ZadV68Lzh47L9lLQuyT91mNxyJacxc
TkG10g6JRfwlNpWXFe8Ljt81TTZku1Y7oPQoUCNUPlMbHon56garb6r7K26pt3wk/j2IfgAWX9VT
aFdYCgAAAABJRU5ErkJggg==')
	#endregion
	$buttonMoveVMDown.BackgroundImageLayout = 'Center'
	$buttonMoveVMDown.Location = '21, 262'
	$buttonMoveVMDown.Name = "buttonMoveVMDown"
	$buttonMoveVMDown.Size = '25, 25'
	$buttonMoveVMDown.TabIndex = 16
	$buttonMoveVMDown.UseVisualStyleBackColor = $True
	$buttonMoveVMDown.add_Click($buttonMoveVMDown_Click)
	#
	# buttonMoveVMUp
	#
	#region Binary Data
	$buttonMoveVMUp.BackgroundImage = [System.Convert]::FromBase64String('
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAAK/INwWK6QAAABl0RVh0
U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAFnSURBVDhPpc9LS0JRGIVhR/6MIEEpQigC
SSiCoigJkqIoworomBFIHS3SOlLGybKS7ohIEd0mNmsghGiamhbZRYLohzhc7T0QUr9B0OAdfM9e
k60A8K9ILGZLTWVm48ID9VaMRJ6YNL9tZF2QH5dgCZty1IZXAfa0RSk+mL892WVcf57gMh+EFLNh
NDTwNXxlVJbvSw7eXEK4s0YnCmspB87zAZx9+LGekDB00VvoPzGEy/clx++E2xGcvh8j+HoIIWRC
X7C7idpVQLGxm0EEcgfwv+zCGOhiRO9I5LH/4ujZh4OnLRj22xjROxJ57L/Yy3rhy3jQ7m1mRO9I
5PUcdWA7LWMz5UaLW8eI3pHI69xphSe5Cjnhgs7ZwIjekchrlfVwxyWs3DtRL9Yxonck8vRSI1wx
B5ajC6ib0TCidyTyGue1cEbsWIyI0AgqRvSORJ7WWoPaaTXUk9VQjVcxonck/j0ofgDmetgt0HdV
SAAAAABJRU5ErkJggg==')
	#endregion
	$buttonMoveVMUp.BackgroundImageLayout = 'Center'
	$buttonMoveVMUp.Location = '21, 231'
	$buttonMoveVMUp.Name = "buttonMoveVMUp"
	$buttonMoveVMUp.Size = '25, 25'
	$buttonMoveVMUp.TabIndex = 15
	$buttonMoveVMUp.UseVisualStyleBackColor = $True
	$buttonMoveVMUp.add_Click($buttonMoveVMUp_Click)
	#
	# tablelayoutpanelVMSettings
	#
	$tablelayoutpanelVMSettings.ColumnCount = 3
	$System_Windows_Forms_ColumnStyle_32 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 46.43678)
	[void]$tablelayoutpanelVMSettings.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_32)
	$System_Windows_Forms_ColumnStyle_33 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 53.5632172)
	[void]$tablelayoutpanelVMSettings.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_33)
	$System_Windows_Forms_ColumnStyle_34 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_34)
	$tablelayoutpanelVMSettings.Location = '411, 66'
	$tablelayoutpanelVMSettings.Name = "tablelayoutpanelVMSettings"
	$tablelayoutpanelVMSettings.Padding = '0, 0, 35, 35'
	$tablelayoutpanelVMSettings.RowCount = 11
	$System_Windows_Forms_RowStyle_35 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_35)
	$System_Windows_Forms_RowStyle_36 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_36)
	$System_Windows_Forms_RowStyle_37 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_37)
	$System_Windows_Forms_RowStyle_38 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_38)
	$System_Windows_Forms_RowStyle_39 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_39)
	$System_Windows_Forms_RowStyle_40 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_40)
	$System_Windows_Forms_RowStyle_41 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_41)
	$System_Windows_Forms_RowStyle_42 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_42)
	$System_Windows_Forms_RowStyle_43 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_43)
	$System_Windows_Forms_RowStyle_44 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_44)
	$System_Windows_Forms_RowStyle_45 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelVMSettings.RowStyles.Add($System_Windows_Forms_RowStyle_45)
	$tablelayoutpanelVMSettings.Size = '435, 293'
	$tablelayoutpanelVMSettings.TabIndex = 14
	#
	# listviewVMs
	#
	$listviewVMs.BorderStyle = 'FixedSingle'
	[void]$listviewVMs.Columns.Add($columnheaderVMCount)
	[void]$listviewVMs.Columns.Add($columnheaderVMName)
	$listviewVMs.FullRowSelect = $True
	$listviewVMs.GridLines = $True
	$listviewVMs.HideSelection = $False
	$listviewVMs.Location = '50, 39'
	$listviewVMs.MultiSelect = $False
	$listviewVMs.Name = "listviewVMs"
	$listviewVMs.Size = '187, 444'
	$listviewVMs.TabIndex = 13
	$listviewVMs.UseCompatibleStateImageBehavior = $False
	$listviewVMs.View = 'Details'
	$listviewVMs.add_SelectedIndexChanged($listviewVMs_SelectedIndexChanged)
	#
	# comboboxSettingNodeToAdd
	#
	$comboboxSettingNodeToAdd.DropDownStyle = 'DropDownList'
	$comboboxSettingNodeToAdd.FormattingEnabled = $True
	$comboboxSettingNodeToAdd.Location = '411, 432'
	$comboboxSettingNodeToAdd.Name = "comboboxSettingNodeToAdd"
	$comboboxSettingNodeToAdd.Size = '197, 22'
	$comboboxSettingNodeToAdd.TabIndex = 12
	#
	# labelAddSettingNode
	#
	$labelAddSettingNode.Location = '410, 406'
	$labelAddSettingNode.Name = "labelAddSettingNode"
	$labelAddSettingNode.Size = '225, 23'
	$labelAddSettingNode.TabIndex = 11
	$labelAddSettingNode.Text = "$script:Str_VMSettingsAddSettingNode"
	$labelAddSettingNode.TextAlign = 'BottomLeft'
	#
	# buttonRemoveSetting
	#
	$buttonRemoveSetting.Location = '410, 459'
	$buttonRemoveSetting.Name = "buttonRemoveSetting"
	$buttonRemoveSetting.Size = '225, 23'
	$buttonRemoveSetting.TabIndex = 10
	$buttonRemoveSetting.Text = "$script:Str_VMSettingsRemoveSelectedNode"
	$buttonRemoveSetting.UseVisualStyleBackColor = $True
	$buttonRemoveSetting.add_Click($buttonRemoveSetting_Click)
	#
	# buttonAddSetting
	#
	$buttonAddSetting.Location = '614, 433'
	$buttonAddSetting.Name = "buttonAddSetting"
	$buttonAddSetting.Size = '21, 21'
	$buttonAddSetting.TabIndex = 9
	$buttonAddSetting.Text = "+"
	$buttonAddSetting.UseVisualStyleBackColor = $True
	$buttonAddSetting.add_Click($buttonAddSetting_Click)
	#
	# buttonRemoveVM
	#
	$buttonRemoveVM.Anchor = 'Bottom, Left'
	$buttonRemoveVM.Location = '93, 490'
	$buttonRemoveVM.Name = "buttonRemoveVM"
	$buttonRemoveVM.Size = '37, 23'
	$buttonRemoveVM.TabIndex = 8
	$buttonRemoveVM.Text = "-"
	$buttonRemoveVM.UseVisualStyleBackColor = $True
	$buttonRemoveVM.add_Click($buttonRemoveVM_Click)
	#
	# buttonAddVM
	#
	$buttonAddVM.Anchor = 'Bottom, Left'
	$buttonAddVM.Location = '50, 490'
	$buttonAddVM.Name = "buttonAddVM"
	$buttonAddVM.Size = '37, 23'
	$buttonAddVM.TabIndex = 7
	$buttonAddVM.Text = "+"
	$buttonAddVM.UseVisualStyleBackColor = $True
	$buttonAddVM.add_Click($buttonAddVM_Click)
	#
	# buttonSaveVMSetting
	#
	$buttonSaveVMSetting.Location = '410, 365'
	$buttonSaveVMSetting.Name = "buttonSaveVMSetting"
	$buttonSaveVMSetting.Size = '225, 23'
	$buttonSaveVMSetting.TabIndex = 6
	$buttonSaveVMSetting.Text = "$script:Str_VMSettingsSaveSetting"
	$buttonSaveVMSetting.UseVisualStyleBackColor = $True
	$buttonSaveVMSetting.add_Click($buttonSaveVMSetting_Click)
	#
	# label1
	#
	$label1.Font = "Arial, 8.25pt, style=Bold"
	$label1.Location = '410, 39'
	$label1.Name = "label1"
	$label1.Size = '100, 23'
	$label1.TabIndex = 4
	$label1.Text = "$script:Str_VMSettingsValue"
	$label1.TextAlign = 'BottomLeft'
	#
	# labelSettings
	#
	$labelSettings.Location = '243, 13'
	$labelSettings.Name = "labelSettings"
	$labelSettings.Size = '100, 23'
	$labelSettings.TabIndex = 3
	$labelSettings.Text = "$script:Str_VMSettingsSetting"
	$labelSettings.TextAlign = 'BottomLeft'
	#
	# labelscriptStr_VMSettings
	#
	$labelscriptStr_VMSettings.Location = '50, 13'
	$labelscriptStr_VMSettings.Name = "labelscriptStr_VMSettings"
	$labelscriptStr_VMSettings.Size = '100, 23'
	$labelscriptStr_VMSettings.TabIndex = 2
	$labelscriptStr_VMSettings.Text = "$script:Str_VMSettingsVMs"
	$labelscriptStr_VMSettings.TextAlign = 'BottomLeft'
	#
	# treeviewVMSettings
	#
	$treeviewVMSettings.Location = '243, 39'
	$treeviewVMSettings.Name = "treeviewVMSettings"
	$treeviewVMSettings.PathSeparator = "/"
	$treeviewVMSettings.Size = '161, 444'
	$treeviewVMSettings.TabIndex = 1
	$treeviewVMSettings.add_AfterSelect($treeviewVMSettings_AfterSelect)
	#
	# tabpageSQL
	#
	$tabpageSQL.Controls.Add($buttonscriptStr_SQLSaveIns)
	$tabpageSQL.Controls.Add($groupbox1)
	$tabpageSQL.Controls.Add($buttonscriptStr_SQLRemoveS)
	$tabpageSQL.Controls.Add($buttonscriptStr_SQLAddInst)
	$tabpageSQL.Controls.Add($buttonscriptStr_SQLSaveCha)
	$tabpageSQL.Controls.Add($comboboxSQLVersion)
	$tabpageSQL.Controls.Add($textboxSQLInstanceName)
	$tabpageSQL.Controls.Add($comboboxSQLServers)
	$tabpageSQL.Controls.Add($labelscriptStr_SQLInstanc)
	$tabpageSQL.Controls.Add($listviewSQLInstances)
	$tabpageSQL.Location = '4, 23'
	$tabpageSQL.Name = "tabpageSQL"
	$tabpageSQL.Padding = '3, 3, 3, 3'
	$tabpageSQL.Size = '1222, 551'
	$tabpageSQL.TabIndex = 3
	$tabpageSQL.Text = "$script:Str_TabSQL"
	$tabpageSQL.UseVisualStyleBackColor = $True
	#
	# buttonscriptStr_SQLSaveIns
	#
	$buttonscriptStr_SQLSaveIns.Anchor = 'Bottom, Right'
	$buttonscriptStr_SQLSaveIns.Location = '995, 509'
	$buttonscriptStr_SQLSaveIns.Name = "buttonscriptStr_SQLSaveIns"
	$buttonscriptStr_SQLSaveIns.Size = '221, 23'
	$buttonscriptStr_SQLSaveIns.TabIndex = 15
	$buttonscriptStr_SQLSaveIns.Text = "$script:Str_SQLSaveInstanceVariables"
	$buttonscriptStr_SQLSaveIns.UseVisualStyleBackColor = $True
	$buttonscriptStr_SQLSaveIns.add_Click($buttonscriptStr_SQLSaveIns_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($tablelayoutpanelSQLVariables)
	$groupbox1.Anchor = 'Top, Bottom, Left, Right'
	$groupbox1.Location = '6, 206'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '1210, 297'
	$groupbox1.TabIndex = 14
	$groupbox1.TabStop = $False
	$groupbox1.Text = "$script:Str_SQLInstanceVariables"
	#
	# tablelayoutpanelSQLVariables
	#
	$tablelayoutpanelSQLVariables.AutoScroll = $True
	$tablelayoutpanelSQLVariables.AutoSize = $True
	$tablelayoutpanelSQLVariables.AutoSizeMode = 'GrowAndShrink'
	$tablelayoutpanelSQLVariables.ColumnCount = 6
	$System_Windows_Forms_ColumnStyle_46 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 28.7234039)
	[void]$tablelayoutpanelSQLVariables.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_46)
	$System_Windows_Forms_ColumnStyle_47 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 21.276598)
	[void]$tablelayoutpanelSQLVariables.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_47)
	$System_Windows_Forms_ColumnStyle_48 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 30)
	[void]$tablelayoutpanelSQLVariables.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_48)
	$System_Windows_Forms_ColumnStyle_49 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 28.7200031)
	[void]$tablelayoutpanelSQLVariables.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_49)
	$System_Windows_Forms_ColumnStyle_50 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 21.28)
	[void]$tablelayoutpanelSQLVariables.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_50)
	$System_Windows_Forms_ColumnStyle_51 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 30)
	[void]$tablelayoutpanelSQLVariables.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_51)
	$tablelayoutpanelSQLVariables.Dock = 'Fill'
	$tablelayoutpanelSQLVariables.Location = '3, 16'
	$tablelayoutpanelSQLVariables.Name = "tablelayoutpanelSQLVariables"
	$tablelayoutpanelSQLVariables.Padding = '0, 0, 35, 35'
	$tablelayoutpanelSQLVariables.RowCount = 1
	$System_Windows_Forms_RowStyle_52 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 25)
	[void]$tablelayoutpanelSQLVariables.RowStyles.Add($System_Windows_Forms_RowStyle_52)
	$tablelayoutpanelSQLVariables.Size = '1204, 278'
	$tablelayoutpanelSQLVariables.TabIndex = 0
	#
	# buttonscriptStr_SQLRemoveS
	#
	$buttonscriptStr_SQLRemoveS.Location = '379, 175'
	$buttonscriptStr_SQLRemoveS.Name = "buttonscriptStr_SQLRemoveS"
	$buttonscriptStr_SQLRemoveS.Size = '170, 25'
	$buttonscriptStr_SQLRemoveS.TabIndex = 13
	$buttonscriptStr_SQLRemoveS.Text = "$script:Str_SQLRemoveSelectedInstance"
	$buttonscriptStr_SQLRemoveS.UseVisualStyleBackColor = $True
	$buttonscriptStr_SQLRemoveS.add_Click($buttonscriptStr_SQLRemoveS_Click)
	#
	# buttonscriptStr_SQLAddInst
	#
	$buttonscriptStr_SQLAddInst.Location = '203, 175'
	$buttonscriptStr_SQLAddInst.Name = "buttonscriptStr_SQLAddInst"
	$buttonscriptStr_SQLAddInst.Size = '170, 25'
	$buttonscriptStr_SQLAddInst.TabIndex = 12
	$buttonscriptStr_SQLAddInst.Text = "$script:Str_SQLAddInstance "
	$buttonscriptStr_SQLAddInst.UseVisualStyleBackColor = $True
	$buttonscriptStr_SQLAddInst.add_Click($buttonscriptStr_SQLAddInst_Click)
	#
	# buttonscriptStr_SQLSaveCha
	#
	$buttonscriptStr_SQLSaveCha.Location = '27, 175'
	$buttonscriptStr_SQLSaveCha.Name = "buttonscriptStr_SQLSaveCha"
	$buttonscriptStr_SQLSaveCha.Size = '170, 25'
	$buttonscriptStr_SQLSaveCha.TabIndex = 11
	$buttonscriptStr_SQLSaveCha.Text = "$script:Str_SQLSaveChanges"
	$buttonscriptStr_SQLSaveCha.UseVisualStyleBackColor = $True
	$buttonscriptStr_SQLSaveCha.add_Click($buttonscriptStr_SQLSaveCha_Click)
	#
	# comboboxSQLVersion
	#
	$comboboxSQLVersion.FormattingEnabled = $True
	$comboboxSQLVersion.Location = '379, 149'
	$comboboxSQLVersion.Name = "comboboxSQLVersion"
	$comboboxSQLVersion.Size = '170, 22'
	$comboboxSQLVersion.TabIndex = 10
	#
	# textboxSQLInstanceName
	#
	$textboxSQLInstanceName.Location = '203, 149'
	$textboxSQLInstanceName.Name = "textboxSQLInstanceName"
	$textboxSQLInstanceName.Size = '170, 20'
	$textboxSQLInstanceName.TabIndex = 9
	#
	# comboboxSQLServers
	#
	$comboboxSQLServers.FormattingEnabled = $True
	$comboboxSQLServers.Location = '27, 149'
	$comboboxSQLServers.Name = "comboboxSQLServers"
	$comboboxSQLServers.Size = '170, 22'
	$comboboxSQLServers.TabIndex = 8
	#
	# labelscriptStr_SQLInstanc
	#
	$labelscriptStr_SQLInstanc.Location = '6, 7'
	$labelscriptStr_SQLInstanc.Name = "labelscriptStr_SQLInstanc"
	$labelscriptStr_SQLInstanc.Size = '100, 23'
	$labelscriptStr_SQLInstanc.TabIndex = 7
	$labelscriptStr_SQLInstanc.Text = "$script:Str_SQLInstances"
	$labelscriptStr_SQLInstanc.TextAlign = 'BottomLeft'
	#
	# listviewSQLInstances
	#
	[void]$listviewSQLInstances.Columns.Add($columnheader1)
	[void]$listviewSQLInstances.Columns.Add($columnheader2)
	[void]$listviewSQLInstances.Columns.Add($columnheader3)
	$listviewSQLInstances.FullRowSelect = $True
	$listviewSQLInstances.GridLines = $True
	$listviewSQLInstances.Location = '3, 33'
	$listviewSQLInstances.MultiSelect = $False
	$listviewSQLInstances.Name = "listviewSQLInstances"
	$listviewSQLInstances.Size = '1028, 105'
	$listviewSQLInstances.TabIndex = 0
	$listviewSQLInstances.UseCompatibleStateImageBehavior = $False
	$listviewSQLInstances.View = 'Details'
	$listviewSQLInstances.add_SelectedIndexChanged($listviewSQLInstances_SelectedIndexChanged)
	#
	# tabpageRoles
	#
	$tabpageRoles.Controls.Add($checkboxscriptStr_RolesDisab)
	$tabpageRoles.Controls.Add($labelscriptStr_RolesToSer)
	$tabpageRoles.Controls.Add($comboboxToServer)
	$tabpageRoles.Controls.Add($buttonscriptStr_RolesAddSe)
	$tabpageRoles.Controls.Add($groupbox2)
	$tabpageRoles.Controls.Add($labelscriptStr_RolesRole)
	$tabpageRoles.Controls.Add($listboxRole)
	$tabpageRoles.Controls.Add($labelscriptStr_RolesCompo)
	$tabpageRoles.Controls.Add($listboxComponent)
	$tabpageRoles.Location = '4, 23'
	$tabpageRoles.Name = "tabpageRoles"
	$tabpageRoles.Size = '1222, 551'
	$tabpageRoles.TabIndex = 2
	$tabpageRoles.Text = "$script:Str_TabRoles"
	$tabpageRoles.UseVisualStyleBackColor = $True
	#
	# checkboxscriptStr_RolesDisab
	#
	$checkboxscriptStr_RolesDisab.Anchor = 'Bottom, Left'
	$checkboxscriptStr_RolesDisab.CheckAlign = 'TopLeft'
	$checkboxscriptStr_RolesDisab.Location = '1044, 447'
	$checkboxscriptStr_RolesDisab.Name = "checkboxscriptStr_RolesDisab"
	$checkboxscriptStr_RolesDisab.Size = '179, 75'
	$checkboxscriptStr_RolesDisab.TabIndex = 13
	$checkboxscriptStr_RolesDisab.Text = "$script:Str_RolesDisableRolecombinationValid"
	$checkboxscriptStr_RolesDisab.TextAlign = 'TopLeft'
	$checkboxscriptStr_RolesDisab.UseVisualStyleBackColor = $True
	#
	# labelscriptStr_RolesToSer
	#
	$labelscriptStr_RolesToSer.Anchor = 'Bottom, Left'
	$labelscriptStr_RolesToSer.Location = '1044, 399'
	$labelscriptStr_RolesToSer.Name = "labelscriptStr_RolesToSer"
	$labelscriptStr_RolesToSer.Size = '167, 17'
	$labelscriptStr_RolesToSer.TabIndex = 12
	$labelscriptStr_RolesToSer.Text = "$script:Str_RolesToServer"
	#
	# comboboxToServer
	#
	$comboboxToServer.Anchor = 'Bottom, Left'
	$comboboxToServer.FormattingEnabled = $True
	$comboboxToServer.Location = '1043, 419'
	$comboboxToServer.Name = "comboboxToServer"
	$comboboxToServer.Size = '168, 22'
	$comboboxToServer.TabIndex = 11
	#
	# buttonscriptStr_RolesAddSe
	#
	$buttonscriptStr_RolesAddSe.Anchor = 'Bottom, Left'
	$buttonscriptStr_RolesAddSe.Location = '1043, 360'
	$buttonscriptStr_RolesAddSe.Name = "buttonscriptStr_RolesAddSe"
	$buttonscriptStr_RolesAddSe.Size = '170, 32'
	$buttonscriptStr_RolesAddSe.TabIndex = 10
	$buttonscriptStr_RolesAddSe.Text = "$script:Str_RolesAddSelectedRole"
	$buttonscriptStr_RolesAddSe.UseVisualStyleBackColor = $True
	$buttonscriptStr_RolesAddSe.add_Click($buttonscriptStr_RolesAddSe_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonRemoveSelectedCompon)
	$groupbox2.Controls.Add($buttonscriptStr_RolesRemov)
	$groupbox2.Controls.Add($buttonSaveValuesCR)
	$groupbox2.Controls.Add($tablelayoutpanelComponentAndRoleSettings)
	$groupbox2.Controls.Add($treeviewComponentsAndRoles)
	$groupbox2.Anchor = 'Top, Bottom, Left, Right'
	$groupbox2.Location = '3, 10'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '1216, 325'
	$groupbox2.TabIndex = 9
	$groupbox2.TabStop = $False
	$groupbox2.Text = "$script:Str_RolesComponentsAndRoles"
	#
	# buttonRemoveSelectedCompon
	#
	$buttonRemoveSelectedCompon.Anchor = 'Bottom, Left'
	$buttonRemoveSelectedCompon.Location = '189, 295'
	$buttonRemoveSelectedCompon.Name = "buttonRemoveSelectedCompon"
	$buttonRemoveSelectedCompon.Size = '185, 23'
	$buttonRemoveSelectedCompon.TabIndex = 4
	$buttonRemoveSelectedCompon.Text = "$script:Str_RolesRemoveSelectedComponent"
	$buttonRemoveSelectedCompon.UseVisualStyleBackColor = $True
	$buttonRemoveSelectedCompon.add_Click($buttonRemoveSelectedCompon_Click)
	#
	# buttonscriptStr_RolesRemov
	#
	$buttonscriptStr_RolesRemov.Anchor = 'Bottom, Left'
	$buttonscriptStr_RolesRemov.Location = '7, 295'
	$buttonscriptStr_RolesRemov.Name = "buttonscriptStr_RolesRemov"
	$buttonscriptStr_RolesRemov.Size = '176, 23'
	$buttonscriptStr_RolesRemov.TabIndex = 3
	$buttonscriptStr_RolesRemov.Text = "$script:Str_RolesRemoveSelectedRole"
	$buttonscriptStr_RolesRemov.UseVisualStyleBackColor = $True
	$buttonscriptStr_RolesRemov.add_Click($buttonscriptStr_RolesRemov_Click)
	#
	# buttonSaveValuesCR
	#
	$buttonSaveValuesCR.Anchor = 'Top, Right'
	$buttonSaveValuesCR.Location = '1112, 20'
	$buttonSaveValuesCR.Name = "buttonSaveValuesCR"
	$buttonSaveValuesCR.Size = '98, 23'
	$buttonSaveValuesCR.TabIndex = 2
	$buttonSaveValuesCR.Text = "$script:Str_RolesSaveValues"
	$buttonSaveValuesCR.UseVisualStyleBackColor = $True
	$buttonSaveValuesCR.add_Click($buttonSaveValuesCR_Click)
	#
	# tablelayoutpanelComponentAndRoleSettings
	#
	$tablelayoutpanelComponentAndRoleSettings.Anchor = 'Top, Bottom, Left, Right'
	$tablelayoutpanelComponentAndRoleSettings.AutoScroll = $True
	$tablelayoutpanelComponentAndRoleSettings.ColumnCount = 3
	$System_Windows_Forms_ColumnStyle_53 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 63.51351)
	[void]$tablelayoutpanelComponentAndRoleSettings.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_53)
	$System_Windows_Forms_ColumnStyle_54 = New-Object 'System.Windows.Forms.ColumnStyle' ('Percent', 36.48649)
	[void]$tablelayoutpanelComponentAndRoleSettings.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_54)
	$System_Windows_Forms_ColumnStyle_55 = New-Object 'System.Windows.Forms.ColumnStyle' ('Absolute', 24)
	[void]$tablelayoutpanelComponentAndRoleSettings.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_55)
	$tablelayoutpanelComponentAndRoleSettings.Font = "Arial, 8pt"
	$tablelayoutpanelComponentAndRoleSettings.Location = '380, 20'
	$tablelayoutpanelComponentAndRoleSettings.Name = "tablelayoutpanelComponentAndRoleSettings"
	$tablelayoutpanelComponentAndRoleSettings.Padding = '0, 0, 35, 35'
	$tablelayoutpanelComponentAndRoleSettings.RowCount = 9
	$System_Windows_Forms_RowStyle_56 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_56)
	$System_Windows_Forms_RowStyle_57 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_57)
	$System_Windows_Forms_RowStyle_58 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_58)
	$System_Windows_Forms_RowStyle_59 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_59)
	$System_Windows_Forms_RowStyle_60 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_60)
	$System_Windows_Forms_RowStyle_61 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_61)
	$System_Windows_Forms_RowStyle_62 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_62)
	$System_Windows_Forms_RowStyle_63 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_63)
	$System_Windows_Forms_RowStyle_64 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 30)
	[void]$tablelayoutpanelComponentAndRoleSettings.RowStyles.Add($System_Windows_Forms_RowStyle_64)
	$tablelayoutpanelComponentAndRoleSettings.Size = '726, 299'
	$tablelayoutpanelComponentAndRoleSettings.TabIndex = 1
	#
	# treeviewComponentsAndRoles
	#
	$treeviewComponentsAndRoles.Anchor = 'Top, Bottom, Left'
	$treeviewComponentsAndRoles.Location = '7, 20'
	$treeviewComponentsAndRoles.Name = "treeviewComponentsAndRoles"
	$treeviewComponentsAndRoles.PathSeparator = "/"
	$treeviewComponentsAndRoles.Size = '367, 269'
	$treeviewComponentsAndRoles.TabIndex = 0
	$treeviewComponentsAndRoles.add_AfterSelect($treeviewComponentsAndRoles_AfterSelect)
	#
	# labelscriptStr_RolesRole
	#
	$labelscriptStr_RolesRole.Anchor = 'Bottom, Left'
	$labelscriptStr_RolesRole.Location = '433, 334'
	$labelscriptStr_RolesRole.Name = "labelscriptStr_RolesRole"
	$labelscriptStr_RolesRole.Size = '100, 23'
	$labelscriptStr_RolesRole.TabIndex = 8
	$labelscriptStr_RolesRole.Text = "$script:Str_RolesRole"
	$labelscriptStr_RolesRole.TextAlign = 'BottomLeft'
	#
	# listboxRole
	#
	$listboxRole.Anchor = 'Bottom, Left'
	$listboxRole.FormattingEnabled = $True
	$listboxRole.ItemHeight = 14
	$listboxRole.Location = '433, 360'
	$listboxRole.Name = "listboxRole"
	$listboxRole.Size = '605, 186'
	$listboxRole.TabIndex = 7
	$listboxRole.add_SelectedIndexChanged($listboxRole_SelectedIndexChanged)
	#
	# labelscriptStr_RolesCompo
	#
	$labelscriptStr_RolesCompo.Anchor = 'Bottom, Left'
	$labelscriptStr_RolesCompo.Location = '3, 334'
	$labelscriptStr_RolesCompo.Name = "labelscriptStr_RolesCompo"
	$labelscriptStr_RolesCompo.Size = '100, 23'
	$labelscriptStr_RolesCompo.TabIndex = 6
	$labelscriptStr_RolesCompo.Text = "$script:Str_RolesComponent"
	$labelscriptStr_RolesCompo.TextAlign = 'BottomLeft'
	#
	# listboxComponent
	#
	$listboxComponent.Anchor = 'Bottom, Left'
	$listboxComponent.FormattingEnabled = $True
	$listboxComponent.ItemHeight = 14
	$listboxComponent.Location = '3, 360'
	$listboxComponent.Name = "listboxComponent"
	$listboxComponent.Size = '424, 186'
	$listboxComponent.TabIndex = 5
	$listboxComponent.add_SelectedIndexChanged($listboxComponent_SelectedIndexChanged)
	#
	# tabpageFinish
	#
	$tabpageFinish.Controls.Add($groupbox5)
	$tabpageFinish.Controls.Add($groupbox4)
	$tabpageFinish.Controls.Add($groupbox3)
	$tabpageFinish.Location = '4, 23'
	$tabpageFinish.Name = "tabpageFinish"
	$tabpageFinish.Padding = '3, 3, 3, 3'
	$tabpageFinish.Size = '1222, 551'
	$tabpageFinish.TabIndex = 5
	$tabpageFinish.Text = "$script:Str_TabFinish"
	$tabpageFinish.UseVisualStyleBackColor = $True
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($buttonRunInstaller)
	$groupbox5.Controls.Add($labelSkipValidation)
	$groupbox5.Controls.Add($comboboxSkipValidation)
	$groupbox5.Controls.Add($buttonscriptStr_RunValidat)
	$groupbox5.Location = '7, 262'
	$groupbox5.Name = "groupbox5"
	$groupbox5.Size = '274, 283'
	$groupbox5.TabIndex = 3
	$groupbox5.TabStop = $False
	$groupbox5.Text = "Installer"
	#
	# buttonRunInstaller
	#
	$buttonRunInstaller.Location = '37, 124'
	$buttonRunInstaller.Name = "buttonRunInstaller"
	$buttonRunInstaller.Size = '176, 23'
	$buttonRunInstaller.TabIndex = 3
	$buttonRunInstaller.Text = "Run Installer"
	$buttonRunInstaller.UseVisualStyleBackColor = $True
	$buttonRunInstaller.add_Click($buttonRunInstaller_Click)
	#
	# labelSkipValidation
	#
	$labelSkipValidation.Location = '37, 150'
	$labelSkipValidation.Name = "labelSkipValidation"
	$labelSkipValidation.Size = '176, 23'
	$labelSkipValidation.TabIndex = 2
	$labelSkipValidation.Text = "Skip Validation"
	$labelSkipValidation.TextAlign = 'BottomLeft'
	#
	# comboboxSkipValidation
	#
	$comboboxSkipValidation.FormattingEnabled = $True
	[void]$comboboxSkipValidation.Items.Add("All")
	[void]$comboboxSkipValidation.Items.Add("Local")
	[void]$comboboxSkipValidation.Items.Add("ActiveDirectory")
	[void]$comboboxSkipValidation.Items.Add("Remote")
	[void]$comboboxSkipValidation.Items.Add("RoleCombinations")
	$comboboxSkipValidation.Location = '37, 179'
	$comboboxSkipValidation.Name = "comboboxSkipValidation"
	$comboboxSkipValidation.Size = '176, 22'
	$comboboxSkipValidation.TabIndex = 1
	#
	# buttonscriptStr_RunValidat
	#
	$buttonscriptStr_RunValidat.Location = '37, 49'
	$buttonscriptStr_RunValidat.Name = "buttonscriptStr_RunValidat"
	$buttonscriptStr_RunValidat.Size = '176, 23'
	$buttonscriptStr_RunValidat.TabIndex = 0
	$buttonscriptStr_RunValidat.Text = "$script:Str_RunValidation"
	$buttonscriptStr_RunValidat.UseVisualStyleBackColor = $True
	$buttonscriptStr_RunValidat.add_Click($buttonscriptStr_RunValidat_Click)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($buttonscriptStr_CreateVMs)
	$groupbox4.Location = '7, 134'
	$groupbox4.Name = "groupbox4"
	$groupbox4.Size = '274, 121'
	$groupbox4.TabIndex = 2
	$groupbox4.TabStop = $False
	$groupbox4.Text = "VMCreator"
	#
	# buttonscriptStr_CreateVMs
	#
	$buttonscriptStr_CreateVMs.Location = '37, 38'
	$buttonscriptStr_CreateVMs.Name = "buttonscriptStr_CreateVMs"
	$buttonscriptStr_CreateVMs.Size = '176, 23'
	$buttonscriptStr_CreateVMs.TabIndex = 0
	$buttonscriptStr_CreateVMs.Text = "$script:Str_CreateVMs"
	$buttonscriptStr_CreateVMs.UseVisualStyleBackColor = $True
	$buttonscriptStr_CreateVMs.add_Click($buttonscriptStr_CreateVMs_Click)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($checkboxDeploymentOnly)
	$groupbox3.Controls.Add($buttonscriptStr_RunDownloa)
	$groupbox3.Location = '6, 6'
	$groupbox3.Name = "groupbox3"
	$groupbox3.Size = '274, 121'
	$groupbox3.TabIndex = 1
	$groupbox3.TabStop = $False
	$groupbox3.Text = "Downloader"
	#
	# checkboxDeploymentOnly
	#
	$checkboxDeploymentOnly.Location = '38, 63'
	$checkboxDeploymentOnly.Name = "checkboxDeploymentOnly"
	$checkboxDeploymentOnly.Size = '198, 24'
	$checkboxDeploymentOnly.TabIndex = 1
	$checkboxDeploymentOnly.Text = "DeploymentOnly"
	$checkboxDeploymentOnly.UseVisualStyleBackColor = $True
	#
	# buttonscriptStr_RunDownloa
	#
	$buttonscriptStr_RunDownloa.Location = '38, 34'
	$buttonscriptStr_RunDownloa.Name = "buttonscriptStr_RunDownloa"
	$buttonscriptStr_RunDownloa.Size = '176, 23'
	$buttonscriptStr_RunDownloa.TabIndex = 0
	$buttonscriptStr_RunDownloa.Text = "$script:Str_RunDownloader"
	$buttonscriptStr_RunDownloa.UseVisualStyleBackColor = $True
	$buttonscriptStr_RunDownloa.add_Click($buttonscriptStr_RunDownloa_Click)
	#
	# buttonscriptStr_Next
	#
	$buttonscriptStr_Next.Anchor = 'Bottom, Right'
	$buttonscriptStr_Next.Location = '1006, 612'
	$buttonscriptStr_Next.Name = "buttonscriptStr_Next"
	$buttonscriptStr_Next.Size = '75, 23'
	$buttonscriptStr_Next.TabIndex = 0
	$buttonscriptStr_Next.Text = "$script:Str_Next"
	$buttonscriptStr_Next.UseVisualStyleBackColor = $True
	$buttonscriptStr_Next.add_Click($buttonscriptStr_Next_Click)
	#
	# columnheader1
	#
	$columnheader1.Text = "Server"
	$columnheader1.Width = 392
	#
	# columnheader2
	#
	$columnheader2.Text = "Instance"
	$columnheader2.Width = 309
	#
	# columnheader3
	#
	$columnheader3.Text = "Version"
	$columnheader3.Width = 178
	#
	# columnheaderVMCount
	#
	$columnheaderVMCount.Text = "Count"
	#
	# columnheaderVMName
	#
	$columnheaderVMName.Text = "VM Name"
	$columnheaderVMName.Width = 119
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = "txt"
	$openfiledialog1.Filter = "variable.xml File|variable.xml|All Files|*.*"
	$openfiledialog1.ShowHelp = $True
	#
	# columnheaderDeplScenario
	#
	$columnheaderDeplScenario.Text = "Deployment scenario"
	$columnheaderDeplScenario.Width = 144
	#
	# columnheaderDescription
	#
	$columnheaderDescription.Text = "Description"
	$columnheaderDescription.Width = 881
	#
	# maskedtextboxIP
	#
	$maskedtextboxIP.BorderStyle = 'FixedSingle'
	$maskedtextboxIP.Font = "Consolas, 8.25pt"
	$maskedtextboxIP.InsertKeyMode = 'Overwrite'
	$maskedtextboxIP.Location = '165, 506'
	$maskedtextboxIP.Mask = "999.999.999.999"
	$maskedtextboxIP.Name = "maskedtextboxIP"
	$maskedtextboxIP.PromptChar = ' '
	$maskedtextboxIP.Size = '98, 20'
	$maskedtextboxIP.TabIndex = 2
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formPDTGUI
	#
	# imagelistIcons
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAiCAAAAk1TRnQBSQFMAwEBAAFYAQABWAEAARABAAEQAQAE/wEJAQAI/wFCAU0BNgEE
BgABNgEEAgABKAMAAUADAAEQAwABAQEAAQgGAAEEGAABgAIAAYADAAKAAQABgAMAAYABAAGAAQAC
gAIAA8ABAAHAAdwBwAEAAfABygGmAQABMwUAATMBAAEzAQABMwEAAjMCAAMWAQADHAEAAyIBAAMp
AQADVQEAA00BAANCAQADOQEAAYABfAH/AQACUAH/AQABkwEAAdYBAAH/AewBzAEAAcYB1gHvAQAB
1gLnAQABkAGpAa0CAAH/ATMDAAFmAwABmQMAAcwCAAEzAwACMwIAATMBZgIAATMBmQIAATMBzAIA
ATMB/wIAAWYDAAFmATMCAAJmAgABZgGZAgABZgHMAgABZgH/AgABmQMAAZkBMwIAAZkBZgIAApkC
AAGZAcwCAAGZAf8CAAHMAwABzAEzAgABzAFmAgABzAGZAgACzAIAAcwB/wIAAf8BZgIAAf8BmQIA
Af8BzAEAATMB/wIAAf8BAAEzAQABMwEAAWYBAAEzAQABmQEAATMBAAHMAQABMwEAAf8BAAH/ATMC
AAMzAQACMwFmAQACMwGZAQACMwHMAQACMwH/AQABMwFmAgABMwFmATMBAAEzAmYBAAEzAWYBmQEA
ATMBZgHMAQABMwFmAf8BAAEzAZkCAAEzAZkBMwEAATMBmQFmAQABMwKZAQABMwGZAcwBAAEzAZkB
/wEAATMBzAIAATMBzAEzAQABMwHMAWYBAAEzAcwBmQEAATMCzAEAATMBzAH/AQABMwH/ATMBAAEz
Af8BZgEAATMB/wGZAQABMwH/AcwBAAEzAv8BAAFmAwABZgEAATMBAAFmAQABZgEAAWYBAAGZAQAB
ZgEAAcwBAAFmAQAB/wEAAWYBMwIAAWYCMwEAAWYBMwFmAQABZgEzAZkBAAFmATMBzAEAAWYBMwH/
AQACZgIAAmYBMwEAA2YBAAJmAZkBAAJmAcwBAAFmAZkCAAFmAZkBMwEAAWYBmQFmAQABZgKZAQAB
ZgGZAcwBAAFmAZkB/wEAAWYBzAIAAWYBzAEzAQABZgHMAZkBAAFmAswBAAFmAcwB/wEAAWYB/wIA
AWYB/wEzAQABZgH/AZkBAAFmAf8BzAEAAcwBAAH/AQAB/wEAAcwBAAKZAgABmQEzAZkBAAGZAQAB
mQEAAZkBAAHMAQABmQMAAZkCMwEAAZkBAAFmAQABmQEzAcwBAAGZAQAB/wEAAZkBZgIAAZkBZgEz
AQABmQEzAWYBAAGZAWYBmQEAAZkBZgHMAQABmQEzAf8BAAKZATMBAAKZAWYBAAOZAQACmQHMAQAC
mQH/AQABmQHMAgABmQHMATMBAAFmAcwBZgEAAZkBzAGZAQABmQLMAQABmQHMAf8BAAGZAf8CAAGZ
Af8BMwEAAZkBzAFmAQABmQH/AZkBAAGZAf8BzAEAAZkC/wEAAcwDAAGZAQABMwEAAcwBAAFmAQAB
zAEAAZkBAAHMAQABzAEAAZkBMwIAAcwCMwEAAcwBMwFmAQABzAEzAZkBAAHMATMBzAEAAcwBMwH/
AQABzAFmAgABzAFmATMBAAGZAmYBAAHMAWYBmQEAAcwBZgHMAQABmQFmAf8BAAHMAZkCAAHMAZkB
MwEAAcwBmQFmAQABzAKZAQABzAGZAcwBAAHMAZkB/wEAAswCAALMATMBAALMAWYBAALMAZkBAAPM
AQACzAH/AQABzAH/AgABzAH/ATMBAAGZAf8BZgEAAcwB/wGZAQABzAH/AcwBAAHMAv8BAAHMAQAB
MwEAAf8BAAFmAQAB/wEAAZkBAAHMATMCAAH/AjMBAAH/ATMBZgEAAf8BMwGZAQAB/wEzAcwBAAH/
ATMB/wEAAf8BZgIAAf8BZgEzAQABzAJmAQAB/wFmAZkBAAH/AWYBzAEAAcwBZgH/AQAB/wGZAgAB
/wGZATMBAAH/AZkBZgEAAf8CmQEAAf8BmQHMAQAB/wGZAf8BAAH/AcwCAAH/AcwBMwEAAf8BzAFm
AQAB/wHMAZkBAAH/AswBAAH/AcwB/wEAAv8BMwEAAcwB/wFmAQAC/wGZAQAC/wHMAQACZgH/AQAB
ZgH/AWYBAAFmAv8BAAH/AmYBAAH/AWYB/wEAAv8BZgEAASEBAAGlAQADXwEAA3cBAAOGAQADlgEA
A8sBAAOyAQAD1wEAA90BAAPjAQAD6gEAA/EBAAP4AQAB8AH7Af8BAAGkAqABAAOAAwAB/wIAAf8D
AAL/AQAB/wMAAf8BAAH/AQAC/wIAA/8MAAH/AbwB/zwAARsBSwFSAW8B/zoAARsBdAJ5AXQBTAH/
OAABGwF0A5kBdAFuAf8yAAH0AZkBdAJSAXQBUgGZApoBmQFLAf8yAAEbAXQBkwEaAvQBGgF0AXkC
mQFSAf8yAAH0AXQBGgH/BPQB/wJ0AUwBGzMAApkB/wb0Af8BdAGTNAABdAEaCPQBGgF0NAABdAH/
CfQBUjQAAXQB/wn0AXQ0AAF5ARoI9AEaAXQ0AAKZAf8G9AH/AZMBmTQAAfQBeQEaAf8E9AH/ARoB
dAH0NQABGwF5AZkBGgL/ARoBmQF0ARs3AAH0AZkBeQN0AZkB9DYAAUIBTQE+BwABPgMAASgDAAFA
AwABEAMAAQEBAAEBBQABgBcAA/8BAAH/AeMGAAH/AcEGAAH/AYAGAAH/BwABwAEBBgABgAEDBwAB
BwcAAQ8HAAEPBwABDwcAAQ8HAAEPBwABDwcAAQ8GAAGAAR8GAAHAAT8GAAs='))
	#endregion
	$imagelistIcons.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistIcons.TransparentColor = 'Transparent'
	#
	# tooltip1
	#
	$tooltip1.AutoPopDelay = 5000
	$tooltip1.BackColor = 'Control'
	$tooltip1.InitialDelay = 100
	$tooltip1.ReshowDelay = 100
	#
	# errorproviderWarning
	#
	$errorproviderWarning.ContainerControl = $formPDTGUI
	#region Binary Data
	$errorproviderWarning.Icon = [System.Convert]::FromBase64String('
AAABAAEAEBAAAAAAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAA
AAAAAAD///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B
////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH/
//8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af//
/wH///8B////Af///wH///8B////Af///wH///8B////ATKKxe0wh8T3L4XD9y2DwvcrgcH3KX/A
9yh9v/cme773JXm99yN3vfcidrzD////Af///wH///8B////Af///wE4kcnl3ez2/73u+f+s6vj/
q+r4/6vq+P+r6vj/rer4/9Tz+/+kyOT/Jnu+q////wH///8B////Af///wH///8BP5nNa47C4f+X
6Pn/Ydz2/1vb9f8yiML/W9v1/2re9v+x5/b/LYPC6SuBwSv///8B////Af///wH///8B////AUWg
0AdDns/Nq9vv/3Tg9/9Y2vX/WNr1/13b9f+Q5vj/ksHh/zKKxX////8B////Af///wH///8B////
Af///wH///8BSabTSXu93/+i6vn/Ydz2/zGHwv934ff/tt7w/zqUytc4kckN////Af///wH///8B
////Af///wH///8B////AU+t1gNNqtWjrNns/4Lj+P8ziML/rO36/0Oez/9Bm85T////Af///wH/
//8B////Af///wH///8B////Af///wH///8BU7HZK1Gv1+206/j/jub4/7Xd7v9JptOzR6PSBf//
/wH///8B////Af///wH///8B////Af///wH///8B////Af///wFWttt/pNfr/9z0+/9Rr9fvT63W
Nf///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8BW7vdD1m63der2+3/
Vrbbjf///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wFe
v99VXL3eyVu73Rf///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af//
/wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////
Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B
////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH///8B////Af///wH/
//8BAAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA
//8AAP//AAD//w==')
	#endregion
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($editDescriptionToolStripMenuItem)
	$contextmenustrip1.Name = "contextmenustrip1"
	$contextmenustrip1.Size = '61, 4'
	#
	# editDescriptionToolStripMenuItem
	#
	$editDescriptionToolStripMenuItem.Name = "editDescriptionToolStripMenuItem"
	$editDescriptionToolStripMenuItem.Size = '156, 22'
	$editDescriptionToolStripMenuItem.Text = "Edit description"
	$groupbox3.ResumeLayout($false)
	$groupbox4.ResumeLayout($false)
	$groupbox5.ResumeLayout($false)
	$tabpageFinish.ResumeLayout($false)
	$tablelayoutpanelComponentAndRoleSettings.ResumeLayout($false)
	$groupbox2.ResumeLayout($false)
	$tabpageRoles.ResumeLayout($false)
	$tablelayoutpanelSQLVariables.ResumeLayout($false)
	$groupbox1.ResumeLayout($false)
	$tabpageSQL.ResumeLayout($false)
	$tablelayoutpanelVMSettings.ResumeLayout($false)
	$tabpageVMSettings.ResumeLayout($false)
	$tablelayoutpanelDefaultVMSetting.ResumeLayout($false)
	$tabpageDefaultVMSettings.ResumeLayout($false)
	$tabpageDomain.ResumeLayout($false)
	$tabcontrolSubVMs.ResumeLayout($false)
	$tabpageVMs.ResumeLayout($false)
	$tablelayoutpanelGeneral.ResumeLayout($false)
	$tabpageVariable.ResumeLayout($false)
	$tabpageSelectFile.ResumeLayout($false)
	$tabpageAbout.ResumeLayout($false)
	$tabcontrolWizard.ResumeLayout($false)
	$formPDTGUI.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formPDTGUI.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formPDTGUI.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formPDTGUI.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formPDTGUI.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formPDTGUI.ShowDialog()
}
#endregion Source: Edit-Config.psf

#region Source: EULA.psf
function Call-EULA_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formEULA = New-Object 'System.Windows.Forms.Form'
	$tablelayoutpanel1 = New-Object 'System.Windows.Forms.TableLayoutPanel'
	$panel1 = New-Object 'System.Windows.Forms.Panel'
	$buttonNo = New-Object 'System.Windows.Forms.Button'
	$buttonIAgree = New-Object 'System.Windows.Forms.Button'
	$webbrowser1 = New-Object 'System.Windows.Forms.WebBrowser'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formEULA_Load={
		#TODO: Initialize Form Controls here
		$webbrowser1.Url = 'http://gallery.technet.microsoft.com/site/PowerShell-Deployment-f20bb605/eulapartial?licenseType=TechNet'
		
	}
	
	$webbrowser1_DocumentCompleted=[System.Windows.Forms.WebBrowserDocumentCompletedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.WebBrowserDocumentCompletedEventArgs]
		#TODO: Place custom script here
		$buttonIAgree.Enabled = $true
	}
	
	$buttonIAgree_Click={
		#TODO: Place custom script here
		$script:eulaAccept = $true
		$formEULA.Close()
	}
	
	$buttonNo_Click={
		#TODO: Place custom script here
		$script:eulaAccept = $false
		$formEULA.Close()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formEULA.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonNo.remove_Click($buttonNo_Click)
			$buttonIAgree.remove_Click($buttonIAgree_Click)
			$webbrowser1.remove_DocumentCompleted($webbrowser1_DocumentCompleted)
			$formEULA.remove_Load($formEULA_Load)
			$formEULA.remove_Load($Form_StateCorrection_Load)
			$formEULA.remove_Closing($Form_StoreValues_Closing)
			$formEULA.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formEULA.SuspendLayout()
	$tablelayoutpanel1.SuspendLayout()
	$panel1.SuspendLayout()
	#
	# formEULA
	#
	$formEULA.Controls.Add($tablelayoutpanel1)
	$formEULA.BackColor = 'White'
	$formEULA.ClientSize = '851, 608'
	$formEULA.Name = "formEULA"
	$formEULA.Text = "EULA"
	$formEULA.add_Load($formEULA_Load)
	#
	# tablelayoutpanel1
	#
	$tablelayoutpanel1.Controls.Add($panel1, 0, 1)
	$tablelayoutpanel1.Controls.Add($webbrowser1, 0, 0)
	$tablelayoutpanel1.ColumnCount = 1
	$System_Windows_Forms_ColumnStyle_1 = New-Object 'System.Windows.Forms.ColumnStyle'
	[void]$tablelayoutpanel1.ColumnStyles.Add($System_Windows_Forms_ColumnStyle_1)
	$tablelayoutpanel1.Dock = 'Fill'
	$tablelayoutpanel1.Location = '0, 0'
	$tablelayoutpanel1.Name = "tablelayoutpanel1"
	$tablelayoutpanel1.RowCount = 2
	$System_Windows_Forms_RowStyle_2 = New-Object 'System.Windows.Forms.RowStyle' ('Percent', 100)
	[void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_2)
	$System_Windows_Forms_RowStyle_3 = New-Object 'System.Windows.Forms.RowStyle' ('Absolute', 35)
	[void]$tablelayoutpanel1.RowStyles.Add($System_Windows_Forms_RowStyle_3)
	$tablelayoutpanel1.Size = '851, 608'
	$tablelayoutpanel1.TabIndex = 0
	#
	# panel1
	#
	$panel1.Controls.Add($buttonNo)
	$panel1.Controls.Add($buttonIAgree)
	$panel1.BackColor = 'White'
	$panel1.Dock = 'Fill'
	$panel1.Location = '3, 576'
	$panel1.Name = "panel1"
	$panel1.Size = '845, 29'
	$panel1.TabIndex = 0
	#
	# buttonNo
	#
	$buttonNo.Location = '435, 0'
	$buttonNo.Name = "buttonNo"
	$buttonNo.Size = '75, 23'
	$buttonNo.TabIndex = 1
	$buttonNo.Text = "No"
	$buttonNo.UseVisualStyleBackColor = $True
	$buttonNo.add_Click($buttonNo_Click)
	#
	# buttonIAgree
	#
	$buttonIAgree.Enabled = $False
	$buttonIAgree.Location = '334, 0'
	$buttonIAgree.Name = "buttonIAgree"
	$buttonIAgree.Size = '75, 23'
	$buttonIAgree.TabIndex = 0
	$buttonIAgree.Text = "I agree"
	$buttonIAgree.UseVisualStyleBackColor = $True
	$buttonIAgree.add_Click($buttonIAgree_Click)
	#
	# webbrowser1
	#
	$webbrowser1.Dock = 'Fill'
	$webbrowser1.Location = '3, 3'
	$webbrowser1.MinimumSize = '20, 20'
	$webbrowser1.Name = "webbrowser1"
	$webbrowser1.Size = '845, 567'
	$webbrowser1.TabIndex = 1
	$webbrowser1.add_DocumentCompleted($webbrowser1_DocumentCompleted)
	$panel1.ResumeLayout($false)
	$tablelayoutpanel1.ResumeLayout($false)
	$formEULA.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formEULA.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formEULA.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formEULA.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formEULA.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formEULA.ShowDialog()
}
#endregion Source: EULA.psf

#region Source: DirectoryObjectPicker.psf
function Call-DirectoryObjectPicker_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectActiveDirector = New-Object 'System.Windows.Forms.Form'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonSubmit = New-Object 'System.Windows.Forms.Button'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$labelSelectAnActiveDirect = New-Object 'System.Windows.Forms.Label'
	$imagelistADObjects = New-Object 'System.Windows.Forms.ImageList'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSelectActiveDirector_Load = {
		#TODO: Initialize Form Controls here
		$listview1.Items.Clear()
		$listview1.Groups.Clear()
		$listview1.Columns.Clear()
		
		switch ($script:SearchADObjectType)
		{
			"Computer" {
				$searcher = [adsisearcher]"(&(objectClass=Computer))"
			}
			"User" {
				$searcher = [adsisearcher]"(&(objectCategory=person)(objectClass=User))"
			}
			"Group" {
				$searcher = [adsisearcher]"(&(objectCategory=Group))"
			}
			default
			{
				return $null
			}
		}
		if ($searcher.SearchRoot -ne $null)
		{
			
			switch ($script:SearchADObjectType)
			{
				"Computer" {
					$listview1.Groups.Add("Server Systems")
					$listview1.Groups.Add("Client Systems")
					$listview1.Columns.Add("Name", "Name", $($listview1.Width/2))
					$listview1.Columns.Add("OperatingSystem", "OperatingSystem", $($listview1.Width/2))
					$searcher.Sort.PropertyName = "Name"
					foreach ($Computer in $($searcher.FindAll()))
					{
						if ($Computer.properties.operatingsystem -like "*Server*")
						{
							$li = $listview1.Items.Add("$($Computer.properties.name)")
							$li.ImageIndex = 0
							$li.SubItems.Add("$($Computer.properties.operatingsystem)")
							$li.Group = $listview1.Groups[0]
						}
						else
						{
							$li = $listview1.Items.Add("$($Computer.properties.name)")
							$li.ImageIndex = 1
							$li.SubItems.Add("$($Computer.properties.operatingsystem)")
							$li.Group = $listview1.Groups[1]
						}
					}
				}
				"User" {
					$listview1.Columns.Add("SamAccountName", "SamAccountName", $($listview1.Width/2))
					$listview1.Columns.Add("Name", "Name", $($listview1.Width/2))
					$searcher.Sort.PropertyName = "SamAccountName"
					foreach ($user in $($searcher.FindAll()))
					{
						
						$li = $listview1.Items.Add("$($user.properties.samaccountname)")
						$li.ImageIndex = 2
						$li.SubItems.Add("$($user.properties.name)")
						$li.Group = $listview1.Groups[0]
						
					}
					
				}
				"Group" {
					$listview1.Columns.Add("SamAccountName", "SamAccountName", $($listview1.Width/2))
					$listview1.Columns.Add("Name", "Name", $($listview1.Width/2))
					$searcher.Sort.PropertyName = "SamAccountName"
					foreach ($group in $($searcher.FindAll()))
					{
						
						$li = $listview1.Items.Add("$($group.properties.samaccountname)")
						$li.ImageIndex = 3
						$li.SubItems.Add("$($group.properties.name)")
						$li.Group = $listview1.Groups[0]
						
					}
					
				}
			}
		}
		else
		{
			return $null
		}
	}
	$buttonCancel_Click = {
		#TODO: Place custom script here
		$script:SelectedADObject = $null
		$formSelectActiveDirector.Close()
	}
	$buttonSubmit_Click = {
		#TODO: Place custom script here
		if ($listview1.SelectedItems -ne $null)
		{
			switch ($script:SearchADObjectType)
			{
				"Computer" {
					$script:SelectedADObject = $listview1.SelectedItems[0].Text
				}
				"User" {
					$script:SelectedADObject = "$(([adsi]'').Name)\$($listview1.SelectedItems[0].Text)"
				}
				"Group" {
					$script:SelectedADObject = "$(([adsi]'').Name)\$($listview1.SelectedItems[0].Text)"
				}
				default
				{
					$script:SelectedADObject = $null
				}
			}
			$formSelectActiveDirector.Close()
		}
	}
	
	$listview1_DoubleClick = {
		#TODO: Place custom script here
		$buttonSubmit.PerformClick()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectActiveDirector.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:DirectoryObjectPicker_listview1 = $listview1.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonCancel.remove_Click($buttonCancel_Click)
			$buttonSubmit.remove_Click($buttonSubmit_Click)
			$listview1.remove_DoubleClick($listview1_DoubleClick)
			$formSelectActiveDirector.remove_Load($formSelectActiveDirector_Load)
			$formSelectActiveDirector.remove_Load($Form_StateCorrection_Load)
			$formSelectActiveDirector.remove_Closing($Form_StoreValues_Closing)
			$formSelectActiveDirector.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectActiveDirector.SuspendLayout()
	#
	# formSelectActiveDirector
	#
	$formSelectActiveDirector.Controls.Add($buttonCancel)
	$formSelectActiveDirector.Controls.Add($buttonSubmit)
	$formSelectActiveDirector.Controls.Add($listview1)
	$formSelectActiveDirector.Controls.Add($labelSelectAnActiveDirect)
	$formSelectActiveDirector.ClientSize = '505, 503'
	$formSelectActiveDirector.Name = "formSelectActiveDirector"
	$formSelectActiveDirector.StartPosition = 'CenterParent'
	$formSelectActiveDirector.Text = "Select ActiveDirectory object"
	$formSelectActiveDirector.add_Load($formSelectActiveDirector_Load)
	#
	# buttonCancel
	#
	$buttonCancel.Location = '255, 476'
	$buttonCancel.Name = "buttonCancel"
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 3
	$buttonCancel.Text = "Cancel"
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# buttonSubmit
	#
	$buttonSubmit.Location = '174, 476'
	$buttonSubmit.Name = "buttonSubmit"
	$buttonSubmit.Size = '75, 23'
	$buttonSubmit.TabIndex = 2
	$buttonSubmit.Text = "Submit"
	$buttonSubmit.UseVisualStyleBackColor = $True
	$buttonSubmit.add_Click($buttonSubmit_Click)
	#
	# listview1
	#
	$listview1.Anchor = 'Top, Bottom, Left, Right'
	$listview1.FullRowSelect = $True
	$listview1.GridLines = $True
	$listview1.Location = '13, 40'
	$listview1.MultiSelect = $False
	$listview1.Name = "listview1"
	$listview1.Size = '480, 430'
	$listview1.SmallImageList = $imagelistADObjects
	$listview1.TabIndex = 1
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'Details'
	$listview1.add_DoubleClick($listview1_DoubleClick)
	#
	# labelSelectAnActiveDirect
	#
	$labelSelectAnActiveDirect.Location = '13, 13'
	$labelSelectAnActiveDirect.Name = "labelSelectAnActiveDirect"
	$labelSelectAnActiveDirect.Size = '352, 23'
	$labelSelectAnActiveDirect.TabIndex = 0
	$labelSelectAnActiveDirect.Text = "Select an ActiveDirectory Object"
	#
	# imagelistADObjects
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAADeCwAAAk1TRnQBSQFMAgEBBAEAARABAAEQAQABEAEAARABAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABQAMAASADAAEBAQABCAYAAQgYAAGAAgABgAMAAoABAAGAAwABgAEAAYAB
AAKAAgADwAEAAcAB3AHAAQAB8AHKAaYBAAEzBQABMwEAATMBAAEzAQACMwIAAxYBAAMcAQADIgEA
AykBAANVAQADTQEAA0IBAAM5AQABgAF8Af8BAAJQAf8BAAGTAQAB1gEAAf8B7AHMAQABxgHWAe8B
AAHWAucBAAGQAakBrQIAAf8BMwMAAWYDAAGZAwABzAIAATMDAAIzAgABMwFmAgABMwGZAgABMwHM
AgABMwH/AgABZgMAAWYBMwIAAmYCAAFmAZkCAAFmAcwCAAFmAf8CAAGZAwABmQEzAgABmQFmAgAC
mQIAAZkBzAIAAZkB/wIAAcwDAAHMATMCAAHMAWYCAAHMAZkCAALMAgABzAH/AgAB/wFmAgAB/wGZ
AgAB/wHMAQABMwH/AgAB/wEAATMBAAEzAQABZgEAATMBAAGZAQABMwEAAcwBAAEzAQAB/wEAAf8B
MwIAAzMBAAIzAWYBAAIzAZkBAAIzAcwBAAIzAf8BAAEzAWYCAAEzAWYBMwEAATMCZgEAATMBZgGZ
AQABMwFmAcwBAAEzAWYB/wEAATMBmQIAATMBmQEzAQABMwGZAWYBAAEzApkBAAEzAZkBzAEAATMB
mQH/AQABMwHMAgABMwHMATMBAAEzAcwBZgEAATMBzAGZAQABMwLMAQABMwHMAf8BAAEzAf8BMwEA
ATMB/wFmAQABMwH/AZkBAAEzAf8BzAEAATMC/wEAAWYDAAFmAQABMwEAAWYBAAFmAQABZgEAAZkB
AAFmAQABzAEAAWYBAAH/AQABZgEzAgABZgIzAQABZgEzAWYBAAFmATMBmQEAAWYBMwHMAQABZgEz
Af8BAAJmAgACZgEzAQADZgEAAmYBmQEAAmYBzAEAAWYBmQIAAWYBmQEzAQABZgGZAWYBAAFmApkB
AAFmAZkBzAEAAWYBmQH/AQABZgHMAgABZgHMATMBAAFmAcwBmQEAAWYCzAEAAWYBzAH/AQABZgH/
AgABZgH/ATMBAAFmAf8BmQEAAWYB/wHMAQABzAEAAf8BAAH/AQABzAEAApkCAAGZATMBmQEAAZkB
AAGZAQABmQEAAcwBAAGZAwABmQIzAQABmQEAAWYBAAGZATMBzAEAAZkBAAH/AQABmQFmAgABmQFm
ATMBAAGZATMBZgEAAZkBZgGZAQABmQFmAcwBAAGZATMB/wEAApkBMwEAApkBZgEAA5kBAAKZAcwB
AAKZAf8BAAGZAcwCAAGZAcwBMwEAAWYBzAFmAQABmQHMAZkBAAGZAswBAAGZAcwB/wEAAZkB/wIA
AZkB/wEzAQABmQHMAWYBAAGZAf8BmQEAAZkB/wHMAQABmQL/AQABzAMAAZkBAAEzAQABzAEAAWYB
AAHMAQABmQEAAcwBAAHMAQABmQEzAgABzAIzAQABzAEzAWYBAAHMATMBmQEAAcwBMwHMAQABzAEz
Af8BAAHMAWYCAAHMAWYBMwEAAZkCZgEAAcwBZgGZAQABzAFmAcwBAAGZAWYB/wEAAcwBmQIAAcwB
mQEzAQABzAGZAWYBAAHMApkBAAHMAZkBzAEAAcwBmQH/AQACzAIAAswBMwEAAswBZgEAAswBmQEA
A8wBAALMAf8BAAHMAf8CAAHMAf8BMwEAAZkB/wFmAQABzAH/AZkBAAHMAf8BzAEAAcwC/wEAAcwB
AAEzAQAB/wEAAWYBAAH/AQABmQEAAcwBMwIAAf8CMwEAAf8BMwFmAQAB/wEzAZkBAAH/ATMBzAEA
Af8BMwH/AQAB/wFmAgAB/wFmATMBAAHMAmYBAAH/AWYBmQEAAf8BZgHMAQABzAFmAf8BAAH/AZkC
AAH/AZkBMwEAAf8BmQFmAQAB/wKZAQAB/wGZAcwBAAH/AZkB/wEAAf8BzAIAAf8BzAEzAQAB/wHM
AWYBAAH/AcwBmQEAAf8CzAEAAf8BzAH/AQAC/wEzAQABzAH/AWYBAAL/AZkBAAL/AcwBAAJmAf8B
AAFmAf8BZgEAAWYC/wEAAf8CZgEAAf8BZgH/AQAC/wFmAQABIQEAAaUBAANfAQADdwEAA4YBAAOW
AQADywEAA7IBAAPXAQAD3QEAA+MBAAPqAQAD8QEAA/gBAAHwAfsB/wEAAaQCoAEAA4ADAAH/AgAB
/wMAAv8BAAH/AwAB/wEAAf8BAAL/AgAD//8A/wD/AP8AFwAB/wHvAuwC6wGSFwAB9AEaAbUFrQHP
AfAB8woAAfMBkgLrA20B7AUAAf8B7QHwAfIC8QHsCQAC/wEJAosDhgGLAbUC/wIAAXQBcwHPBdsB
tAHsAVIIAAHzAe8B9wEHAfADvAHzAW0GAAHxAe8BBwG8AewBBwGSAusDbQHsAQABGwFMAa4BrQbb
AacB6wFSARoBAAFSAZMBtALbAtUC1AH3AVIHAAEHAe8B8AHxAQcE7wG8AW0DAAHxAgcB7wH3ApIE
7AH3ArwB8wFtAQABTAGaAa4B3AfVAYsBmgFMAQAB8gHPAQkB3APbAdUB3AHPAQcHAAH3AfQB8gHw
Be8BvAFtAwAB7wHyAvAGvAHwAesC7wG8AW0BAAFMAXoB9wPbA9UC1AG1AXoBTAIAAfABzwEZAfcC
kQEJAbQBtQH/BwAB7wHzAfEB8AEHBO8BvAHrAwAB7wHxCIsB8AHsAu8BvAFtAQAB8wGLAQkB3ATb
AtUB2wHWAYsB8QMAAbwB7AF0AZkBeQF0AWwFcgG8AfMCAAHvAfMB8QHwAwcCTwHwAewDAAEHAfEC
tAS1AbQBiwHwAewC7wG8AesBAAH/AfEBpwEZAdwE2wHcAd0BpwHwAf8DAAHxAXQCmgEaAZkBcwR4
AZcBcgFSAgAB7wHzAvEDBwGYAXIB8AHsAwABBwHxAc8GtAGLAfAB7AJPAfAB7AIAAf8B8AGnARkE
SwHdAacB8AH/BAABkwGZA5oBGgFLA3gClwFyAVICAAEHAfMC8QUHAfAB7AMAAQcB8QHPBrQBiwHw
AewBmAFyAfAB7AMAAf8BtQFLBJoBSwH3Af8FAAEcAW4BcwF0AW4CSwR4AZgBlwHvAgABBwHzAfIB
8QEHAe0D7AHwAewDAAG8AfEBzwa0AYsB8AHtAgcB8AHsBAABHAaaAXQGAAHzBUsBcwHtAuwBmQKY
Af8CAAEHAfMB8gHxArwDBwHwAe0DAAG8AfEGzwG0AYsB8AGSAuwB8AHsBAABSwEbAZoBmQF0AZkB
GgFLAf8GAAHwAW4CSwFzAewBdAGZAXkBdAHtAf8DAAG8AvMB8gG8BO0B8AGSAwAB8AH0CPEB8wGS
AgcB8AHtBAABJAF0AZkBdAEjA0QB/woAAfEBdAKaARoBmQEcBAAB9AHwAfEB8wS8AQcB8QGSAwAD
8AK8AwcD7wH3Au0B8AGSBAABJAEqBCQBIwFECwABmQEaA5oBGgF0BQAB/wLxAfIE8QHzAfcIAAH0
AfAB8QHzBLwBBwHxAZIEAAG8BCoBJAEjAQcLAAGZAVIBeQGaA1IHAAHyAbwDBwLvAfAJAAH/AvEB
8gTxAfMB9wUAAbwBSwIkAUUBBwwAAfMFUgGZGgAB8gG8AwcC7wHwGAAB8QNSAZkB/wIAAUIBTQE+
BwABPgMAASgDAAFAAwABIAMAAQEBAAEBBgABARYAA/+BAAL/AcABfwL/AQABHwH4AQcBwAF/AcAB
AwEAAR8B4AEHAeABAAGAAQEBAAEfAcABBwIAAYABAQEAAR8BwAEHAgABgAEBAYABHwHAAQcCAAGA
AQEBwAEAAcABBwIAAYABAQHAAQABwAEHAgABwAEDAcABAAHAAQcCAAHgAQcBwAEAAcABBwIAAfAB
DwHAAQABwAEHAgAB8AEHAeABAQHAAQcCAAHwAQcB/gEDAcABBwIAAfABDwH+AQMB4AEHAfgBAAHw
AQ8B/gEDAfgBBwH8AQAB+AEfAf4BAwP/AQAD/wEDCw=='))
	#endregion
	$imagelistADObjects.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistADObjects.TransparentColor = 'Transparent'
	$formSelectActiveDirector.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectActiveDirector.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectActiveDirector.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectActiveDirector.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectActiveDirector.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectActiveDirector.ShowDialog()
}
#endregion Source: DirectoryObjectPicker.psf

#region Source: SelectSize.psf
function Call-SelectSize_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formSelectSize = New-Object 'System.Windows.Forms.Form'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonSubmit = New-Object 'System.Windows.Forms.Button'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formSelectSize_Load={
		#TODO: Initialize Form Controls here
		$combobox1.SelectedIndex = 0
	}
	
	$buttonCancel_Click={
		$script:SizeSelected = $null	
	}
	
	$buttonSubmit_Click = {
		$size = [INt]$textbox1.Text
		if ($size -gt 0)
		{
			switch ($combobox1.Text)
			{
				"MB" {
					$script:SizeSelected = $size
				}
				"GB" {
					$script:SizeSelected = ($size * 1024)
				}
				"TB" {
					$script:SizeSelected = ($size * 1024 * 1024)
				}
				default
				{
					#<code>
				}
			}
			
			$formSelectSize.Close()
		}
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formSelectSize.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:SelectSize_combobox1_SelectedItem = $combobox1.SelectedItems
		$script:SelectSize_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonCancel.remove_Click($buttonCancel_Click)
			$buttonSubmit.remove_Click($buttonSubmit_Click)
			$formSelectSize.remove_Load($formSelectSize_Load)
			$formSelectSize.remove_Load($Form_StateCorrection_Load)
			$formSelectSize.remove_Closing($Form_StoreValues_Closing)
			$formSelectSize.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formSelectSize.SuspendLayout()
	#
	# formSelectSize
	#
	$formSelectSize.Controls.Add($buttonCancel)
	$formSelectSize.Controls.Add($buttonSubmit)
	$formSelectSize.Controls.Add($combobox1)
	$formSelectSize.Controls.Add($textbox1)
	$formSelectSize.ClientSize = '259, 73'
	$formSelectSize.FormBorderStyle = 'FixedToolWindow'
	$formSelectSize.Name = "formSelectSize"
	$formSelectSize.StartPosition = 'CenterParent'
	$formSelectSize.Text = "Select size"
	$formSelectSize.add_Load($formSelectSize_Load)
	#
	# buttonCancel
	#
	$buttonCancel.Location = '137, 39'
	$buttonCancel.Name = "buttonCancel"
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 3
	$buttonCancel.Text = "Cancel"
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# buttonSubmit
	#
	$buttonSubmit.Location = '46, 39'
	$buttonSubmit.Name = "buttonSubmit"
	$buttonSubmit.Size = '75, 23'
	$buttonSubmit.TabIndex = 2
	$buttonSubmit.Text = "Submit"
	$buttonSubmit.UseVisualStyleBackColor = $True
	$buttonSubmit.add_Click($buttonSubmit_Click)
	#
	# combobox1
	#
	$combobox1.DropDownStyle = 'DropDownList'
	$combobox1.FormattingEnabled = $True
	[void]$combobox1.Items.Add("MB")
	[void]$combobox1.Items.Add("GB")
	[void]$combobox1.Items.Add("TB")
	$combobox1.Location = '185, 13'
	$combobox1.Name = "combobox1"
	$combobox1.Size = '61, 21'
	$combobox1.TabIndex = 1
	#
	# textbox1
	#
	$textbox1.Location = '13, 13'
	$textbox1.Name = "textbox1"
	$textbox1.Size = '166, 20'
	$textbox1.TabIndex = 0
	$formSelectSize.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formSelectSize.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formSelectSize.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formSelectSize.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formSelectSize.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formSelectSize.ShowDialog()
}
#endregion Source: SelectSize.psf

#Start the application
Main ($CommandLine)
